{"ID":"1224","Name":"Improper Restriction of Write-Once Bit Fields","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The hardware design control register \"sticky bits\" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.","ExtendedDescription":"\n\nIntegrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or \"sticky.\" This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.\n\n\nFailure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value \"1\", wherein they would work as \"write-1-once\" and not \"write-once\".\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"284","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"Verilog","Prevalence":"Undetermined"},{"Type":"Language","Name":"VHDL","Prevalence":"Undetermined"},{"Type":"Technology","Class":"System on Chip","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation","Note":"Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases."}],"CommonConsequences":[{"Scope":["Confidentiality","Integrity","Availability","Access Control"],"Impact":["Varies by Context"],"Note":"System configuration cannot be programmed in a secure way."}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"During hardware design all register write-once or sticky fields must be evaluated for proper configuration."},{"Phase":["Testing"],"Description":"The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"Consider the example design module system verilog code shown below. register_write_once_example module is an example of register that has a write-once field defined. Bit 0 field captures the write_once_status value. This implementation can be for a register that is defined by specification to be a write-once register, since the write_once_status field gets written by input data bit 0 on first write."},{"Nature":"Bad","Language":"Verilog","ExampleCode":"module register_write_once_example\n ( \n input [15:0] Data_in, \n input Clk, \n input ip_resetn, \n input global_resetn,\n input write,\n output reg [15:0] Data_out \n );\n\n reg Write_once_status; \n\n always @(posedge Clk or negedge ip_resetn)\n\n```\n\t if (~ip_resetn)\n\t begin\n\t\t Data_out \u003c= 16'h0000;\n\t\t Write_once_status \u003c= 1'b0; \n\t end \n\t else if (write \u0026 ~Write_once_status)\n\t begin\n\t\t Data_out \u003c= Data_in \u0026 16'hFFFE;\n\t\t Write_once_status \u003c= Data_in[0]; // Input bit 0 sets Write_once_status\n\t end\n\t else if (~write)\n\t begin \n\t\t Data_out[15:1] \u003c= Data_out[15:1]; \n\t\t Data_out[0] \u003c= Write_once_status; \n\t end \n endmodule\n```"},{"BodyText":"The above example only locks further writes if write_once_status bit is written to one. So it acts as write_1-Once instead of the write-once attribute."},{"Nature":"Good","Language":"Verilog","ExampleCode":"module register_write_once_example \n ( \n input [15:0] Data_in, \n input Clk, \n input ip_resetn, \n input global_resetn, \n input write, \n output reg [15:0] Data_out \n ); \n\n reg Write_once_status; \n\n always @(posedge Clk or negedge ip_resetn) \n\n```\n\t if (~ip_resetn) \n\t begin \n\t\t Data_out \u003c= 16'h0000; \n\t\t Write_once_status \u003c= 1'b0; \n\t end \n\t else if (write \u0026 ~Write_once_status) \n\t begin \n\t\t Data_out \u003c= Data_in \u0026 16'hFFFE; \n\t\t Write_once_status \u003c= 1'b1; // Write once status set on first write, independent of input \n\t end \n\t else if (~write) \n\t begin \n\t\t Data_out[15:1] \u003c= Data_out[15:1]; \n\t\t Data_out[0] \u003c= Write_once_status; \n\t end \n endmodule\n```"}]}],"RelatedAttackPatterns":["680"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi","SubmissionOrganization":"Intel Corporation","SubmissionDate":"2019-12-12","SubmissionVersion":"4.0","SubmissionReleaseDate":"2020-02-24"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}