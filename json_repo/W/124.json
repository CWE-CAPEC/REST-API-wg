{"ID":"124","Name":"Buffer Underwrite ('Buffer Underflow')","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.","ExtendedDescription":"This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.","LikelihoodOfExploit":"Medium","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"786","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"787","ViewID":"1000"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Undetermined"},{"Type":"Language","Name":"C++","Prevalence":"Undetermined"}],"AlternateTerms":[{"Term":"buffer underrun","Description":"Some prominent vendors and researchers use the term \"buffer underrun\". \"Buffer underflow\" is more commonly used, although both terms are also sometimes used to describe a buffer under-read (CWE-127)."}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Availability"],"Impact":["Modify Memory","DoS: Crash, Exit, or Restart"],"Note":"Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash."},{"Scope":["Integrity","Confidentiality","Availability","Access Control","Other"],"Impact":["Execute Unauthorized Code or Commands","Modify Memory","Bypass Protection Mechanism","Other"],"Note":"If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy. The consequences would only be limited by how the affected data is used, such as an adjacent memory location that is used to specify whether the user has special privileges."},{"Scope":["Access Control","Other"],"Impact":["Bypass Protection Mechanism","Other"],"Note":"When the consequence is arbitrary code execution, this can often be used to subvert any other security service."}],"PotentialMitigations":[{"Phase":["Requirements"],"Description":"Choose a language that is not susceptible to these issues."},{"Phase":["Implementation"],"Description":"All calculated values that are used as index or for pointer arithmetic should be validated to ensure that they are within an expected range."}],"DemonstrativeExamples":[{"ID":"DX-87","Entries":[{"IntroText":"In the following C/C++ example, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tchar* trimTrailingWhitespace(char *strMessage, int length) {\n\t\t\tchar *retMessage;\n\t\t\tchar *message = malloc(sizeof(char)*(length+1));\n```\n// copy input string to a temporary string* \n\t\t\tchar message[length+1];\n\t\t\tint index;\n\t\t\tfor (index = 0; index \u003c length; index++) {\n\t\t\t```\n\t\t\t\tmessage[index] = strMessage[index];\n\t\t\t}\n\t\t\tmessage[index] = '\\0';\n```\n// trim trailing whitespace* \n\t\t\tint len = index-1;\n\t\t\twhile (isspace(message[len])) {\n\t\t\t```\n\t\t\t\tmessage[len] = '\\0';\n\t\t\t\tlen--;\n\t\t\t}\n```\n// return string without trailing whitespace* \n\t\t\tretMessage = message;\n\t\t\treturn retMessage;}"},{"BodyText":"However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer."}]},{"ID":"DX-88","Entries":[{"IntroText":"The following is an example of code that may result in a buffer underwrite. This code is attempting to replace the substring \"Replace Me\" in destBuf with the string stored in srcBuf. It does so by using the function strstr(), which returns a pointer to the found substring in destBuf. Using pointer arithmetic, the starting index of the substring is found."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tint main() { \n\t\t...\n\t\t char *result = strstr(destBuf, \"Replace Me\");\n\t\t int idx = result - destBuf;\n\t\t strcpy(\u0026destBuf[idx], srcBuf);\n\t\t ...\n\t} \n```"},{"BodyText":"In the case where the substring is not found in destBuf, strstr() will return NULL, causing the pointer arithmetic to be undefined, potentially setting the value of idx to a negative number. If idx is negative, this will result in a buffer underwrite of destBuf."}]}],"ObservedExamples":[{"Reference":"CVE-2021-24018","Description":"buffer underwrite in firmware verification routine allows code execution via a crafted firmware image","Link":"https://www.cve.org/CVERecord?id=CVE-2021-24018"},{"Reference":"CVE-2002-2227","Description":"Unchecked length of SSLv2 challenge value leads to buffer underflow.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-2227"},{"Reference":"CVE-2007-4580","Description":"Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130)","Link":"https://www.cve.org/CVERecord?id=CVE-2007-4580"},{"Reference":"CVE-2007-1584","Description":"Buffer underflow from an all-whitespace string, which causes a counter to be decremented before the buffer while looking for a non-whitespace character.","Link":"https://www.cve.org/CVERecord?id=CVE-2007-1584"},{"Reference":"CVE-2007-0886","Description":"Buffer underflow resultant from encoded data that triggers an integer overflow.","Link":"https://www.cve.org/CVERecord?id=CVE-2007-0886"},{"Reference":"CVE-2006-6171","Description":"Product sets an incorrect buffer size limit, leading to \"off-by-two\" buffer underflow.","Link":"https://www.cve.org/CVERecord?id=CVE-2006-6171"},{"Reference":"CVE-2006-4024","Description":"Negative value is used in a memcpy() operation, leading to buffer underflow.","Link":"https://www.cve.org/CVERecord?id=CVE-2006-4024"},{"Reference":"CVE-2004-2620","Description":"Buffer underflow due to mishandled special characters","Link":"https://www.cve.org/CVERecord?id=CVE-2004-2620"}],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"UNDER - Boundary beginning violation ('buffer underflow'?)"},{"TaxonomyName":"CLASP","EntryName":"Buffer underwrite"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP8","EntryName":"Faulty Buffer Access"}],"References":[{"ExternalReferenceID":"REF-90","Title":"Buffer UNDERFLOWS: What do you know about it?","Publication":"Vuln-Dev Mailing List","PublicationYear":"2004","PublicationMonth":"01","PublicationDay":"10","URL":"https://seclists.org/vuln-dev/2004/Jan/22","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-44","Section":"\"Sin 5: Buffer Overruns.\" Page 89","Authors":["Michael Howard","David LeBlanc","John Viega"],"Title":"24 Deadly Sins of Software Security","Publication":"McGraw-Hill","PublicationYear":"2010"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Relationship","Note":"This could be resultant from several errors, including a bad offset or an array index that decrements before the beginning of the buffer (see CWE-129)."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Description, Relationships, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-01-12","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-10-29","ModificationComment":"updated Description, Name, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-03-29","ModificationComment":"updated Demonstrative_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Demonstrative_Examples, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Causal_Nature, Demonstrative_Examples, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Research_Gaps"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated References, Relationships, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Demonstrative_Examples","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"},{"Type":"Contribution","ContributionName":"Muchen Xu","ContributionOrganization":"Naive Systems","ContributionDate":"2023-02-06","ContributionComment":"Pointed out that the demonstrative example #2 was incorrect and instead demonstrated a Buffer Under-read.","ContributionType":"Feedback"},{"Type":"Rename","PreviousEntryName":"Boundary Beginning Violation ('Buffer Underwrite')","Date":"2009-10-29"}]}