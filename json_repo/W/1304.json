{"ID":"1304","Name":"Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"The product performs a power save/restore\n            operation, but it does not ensure that the integrity of\n            the configuration state is maintained and/or verified between\n\t    the beginning and ending of the operation.","ExtendedDescription":"\n\nBefore powering down, the Intellectual Property (IP) saves current state (S) to persistent storage such as flash or always-on memory in order to optimize the restore operation. During this process, an attacker with access to the persistent storage may alter (S) to a configuration that could potentially modify privileges, disable protections, and/or cause damage to the hardware. If the IP does not validate the configuration state stored in persistent memory, upon regaining power or becoming operational again, the IP could be compromised through the activation of an unwanted/harmful configuration. \n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"284","ViewID":"1000","Ordinal":"Primary"},{"Nature":"PeerOf","CweID":"345","ViewID":"1000"},{"Nature":"PeerOf","CweID":"1271","ViewID":"1194"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"Not Technology-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design","Note":"Weakness introduced via missing internal integrity guarantees during power save/restore"},{"Phase":"Integration","Note":"Weakness introduced via missing external integrity verification during power save/restore"}],"CommonConsequences":[{"Scope":["Confidentiality","Integrity"],"Impact":["DoS: Instability","DoS: Crash, Exit, or Restart","DoS: Resource Consumption (Other)","Gain Privileges or Assume Identity","Bypass Protection Mechanism","Alter Execution Logic","Quality Degradation","Unexpected State","Reduce Maintainability","Reduce Performance","Reduce Reliability"],"Likelihood":["High"]}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"Inside the IP, incorporate integrity checking on the configuration state via a cryptographic hash. The hash can be protected inside the IP such as by storing it in internal registers which never lose power. Before powering down, the IP performs a hash of the configuration and saves it in these persistent registers. Upon restore, the IP performs a hash of the saved configuration and compares it with the saved hash. If they do not match, then the IP should not trust the configuration."},{"Phase":["Integration"],"Description":"Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration."},{"Phase":["Integration"],"Description":"Outside the IP, incorporate a protected environment that prevents undetected modification of the configuration state by untrusted agents. Before powering down, a trusted agent saves the IP's configuration state in this protected location that only it is privileged to. Upon restore, the trusted agent loads the saved state into the IP."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"The following pseudo code demonstrates the power save/restore workflow which may lead to weakness through a lack of validation of the config state after restore."},{"Nature":"Bad","Language":"C","ExampleCode":"void save_config_state()\n {\n\n```\n\t void* cfg;\n\t cfg = get_config_state();\n\t save_config_state(cfg);\n\t go_to_sleep();\n }\n void restore_config_state()\n {\n\t void* cfg;\n\t cfg = get_config_file();\n\t load_config_file(cfg);\n }\n```"},{"BodyText":"The following pseudo-code is the proper workflow for the integrity checking mitigation:"},{"Nature":"Good","Language":"C","ExampleCode":"void save_config_state()\n {\n\n```\n\t void* cfg;\n\t void* sha;\n\t cfg = get_config_state();\n\t save_config_state(cfg);\n\t // save hash(cfg) to trusted location\n\t sha = get_hash_of_config_state(cfg);\n\t save_hash(sha); \n\t go_to_sleep();\n }\n void restore_config_state()\n {\n\t void* cfg;\n\t void* sha_1, sha_2;\n\t cfg = get_config_file();\n\t // restore hash of config from trusted memory\n\t sha_1 = get_persisted_sha_value();\n\t sha_2 = get_hash_of_config_state(cfg);\n\t if (sha_1 != sha_2)\n\t\t assert_error_and_halt();\n\t load_config_file(cfg);\n }\n```"},{"BodyText":"It must be noted that in the previous example of good pseudo code, the memory (where the hash of the config state is stored) must be trustworthy while the hardware is between the power save and restore states."}]}],"FunctionalAreas":["Power"],"RelatedAttackPatterns":["176"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionOrganization":"Accellera Systems Initiative","SubmissionDate":"2020-07-16","SubmissionVersion":"4.2","SubmissionReleaseDate":"2020-08-20"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Functional_Areas"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}