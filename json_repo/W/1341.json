{"ID":"1341","Name":"Multiple Releases of Same Resource or Handle","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The product attempts to close or release a resource or handle more than once, without any successful open between the close operations.","ExtendedDescription":"\n\nCode typically requires \"opening\" handles or references to resources such as memory, files, devices, socket connections, services, etc. When the code is finished with using the resource, it is typically expected to \"close\" or \"release\" the resource, which indicates to the environment (such as the OS) that the resource can be re-assigned or reused by unrelated processes or actors - or in some cases, within the same process. API functions or other abstractions are often used to perform this release, such as free() or delete() within C/C++, or file-handle close() operations that are used in many languages.\n\n\nUnfortunately, the implementation or design of such APIs might expect the developer to be responsible for ensuring that such APIs are only called once per release of the resource. If the developer attempts to release the same resource/handle more than once, then the API's expectations are not met, resulting in undefined and/or insecure behavior. This could lead to consequences such as memory corruption, data corruption, execution path corruption, or other consequences.\n\n\nNote that while the implementation for most (if not all) resource reservation allocations involve a unique identifier/pointer/symbolic reference, then if this identifier is reused, checking the identifier for resource closure may result in a false state of openness and closing of the wrong resource. For this reason, reuse of identifiers is discouraged.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"675","ViewID":"1000","Ordinal":"Primary"},{"Nature":"CanPrecede","CweID":"672","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"Java","Prevalence":"Undetermined"},{"Type":"Language","Name":"Rust","Prevalence":"Undetermined"},{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Language","Name":"C","Prevalence":"Undetermined"},{"Type":"Language","Name":"C++","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"Not Technology-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Availability","Integrity"],"Impact":["DoS: Crash, Exit, or Restart"],"Likelihood":["Medium"]}],"DetectionMethods":[{"Method":"Automated Static Analysis","Description":"For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue."},{"Method":"Automated Dynamic Analysis","Description":"Some compiler instrumentation tools such as AddressSanitizer (ASan) can indirectly detect some instances of this weakness."}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals."},{"Phase":["Implementation"],"Strategy":"Refactoring","Description":"It can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer."},{"Phase":["Implementation"],"Strategy":"Refactoring","Description":"When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.","Effectiveness":"Defense in Depth"}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"This example attempts to close a file twice. In some cases, the C library fclose() function will catch the error and return an error code. In other implementations, a double-free (CWE-415) occurs, causing the program to fault. Note that the examples presented here are simplistic, and double fclose() calls will frequently be spread around a program, making them more difficult to find during code reviews."},{"Nature":"Bad","Language":"C","ExampleCode":"char b[2000];\n FILE *f = fopen(\"dbl_cls.c\", \"r\");\n if (f)\n {\n\n```\n\tb[0] = 0;\n\t fread(b, 1, sizeof(b) - 1, f);\n\t printf(\"%s\\n'\", b);\n\t int r1 = fclose(f);\n\t printf(\"\\n-----------------\\n1 close done '%d'\\n\", r1);\n\t int r2 = fclose(f); // Double close\n\t printf(\"2 close done '%d'\\n\", r2);\n }\n```"},{"BodyText":"There are multiple possible fixes. This fix only has one call to fclose(), which is typically the preferred handling of this problem - but this simplistic method is not always possible."},{"Nature":"Good","Language":"C","ExampleCode":"char b[2000];\n FILE *f = fopen(\"dbl_cls.c\", \"r\");\n if (f)\n {\n\n```\n\tb[0] = 0;\n\t fread(b, 1, sizeof(b) - 1, f);\n\t printf(\"%s\\n'\", b);\n\t int r = fclose(f);\n\t printf(\"\\n-----------------\\n1 close done '%d'\\n\", r);\n }\n```"},{"BodyText":"This fix uses a flag to call fclose() only once. Note that this flag is explicit. The variable \"f\" could also have been used as it will be either NULL if the file is not able to be opened or a valid pointer if the file was successfully opened. If \"f\" is replacing \"f_flg\" then \"f\" would need to be set to NULL after the first fclose() call so the second fclose call would never be executed."},{"Nature":"Good","Language":"C","ExampleCode":"char b[2000];\n int f_flg = 0;\n FILE *f = fopen(\"dbl_cls.c\", \"r\");\n if (f)\n {\n\n```\n\tf_flg = 1;\n\t b[0] = 0;\n\t fread(b, 1, sizeof(b) - 1, f);\n\t printf(\"%s\\n'\", b);\n\t if (f_flg)\n\t {\n\t\tint r1 = fclose(f);\n\t\t f_flg = 0;\n\t\t printf(\"\\n-----------------\\n1 close done '%d'\\n\", r1);\n\t }\n\t if (f_flg)\n\t {\n\t\tint r2 = fclose(f); // Double close\n\t\t f_flg = 0;\n\t\t printf(\"2 close done '%d'\\n\", r2);\n\t }\n }\n```"}]},{"ID":"DX-149","Entries":[{"IntroText":"The following code shows a simple example of a double free vulnerability."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tchar* ptr = (char*)malloc (SIZE);\n\t...\n\tif (abrt) {\n\t\tfree(ptr);\n\t}\n\t...\n\tfree(ptr);\n```"},{"BodyText":"Double free vulnerabilities have two common (and sometimes overlapping) causes:"},{"BodyText":"- Error conditions and other exceptional circumstances\n\n  - Confusion over which part of the program is responsible for freeing the memory"},{"BodyText":"Although some double free vulnerabilities are not much more complicated than this example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once."}]}],"ObservedExamples":[{"Reference":"CVE-2019-13351","Description":"file descriptor double close can cause the wrong file to be associated with a file descriptor.","Link":"https://www.cve.org/CVERecord?id=CVE-2019-13351"},{"Reference":"CVE-2006-5051","Description":"Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition that leads to a double free (CWE-415).","Link":"https://www.cve.org/CVERecord?id=CVE-2006-5051"},{"Reference":"CVE-2004-0772","Description":"Double free resultant from certain error conditions.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0772"}],"References":[{"ExternalReferenceID":"REF-1198","Title":"close - Perldoc Browser","URL":"https://perldoc.perl.org/functions/close"},{"ExternalReferenceID":"REF-1199","Title":"io - Core tools for working with streams â€” Python 3.9.7 documentation","PublicationYear":"2021","PublicationMonth":"09","PublicationDay":"02","URL":"https://docs.python.org/3.9/library/io.html#io.IOBase.close"},{"ExternalReferenceID":"REF-1200","Title":"FileOutputStream (Java Platform SE 7 )","PublicationYear":"2020","URL":"https://docs.oracle.com/javase/7/docs/api/java/io/FileOutputStream.html"},{"ExternalReferenceID":"REF-1201","Title":"FileOutputStream (Java SE 11 \u0026 JDK 11 )","PublicationYear":"2021","URL":"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/FileOutputStream.html"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Terminology","Note":"The terms related to \"release\" may vary depending on the type of resource, programming language, specification, or framework. \"Close\" has been used synonymously for the release of resources like file descriptors and file handles. \"Return\" is sometimes used instead of Release. \"Free\" is typically used when releasing memory or buffers back into the system for reuse."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2021-09-07","SubmissionVersion":"4.6","SubmissionReleaseDate":"2021-10-28"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Demonstrative_Examples, Description, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}