{"ID":"190","Name":"Integer Overflow or Wraparound","Abstraction":"Base","Structure":"Simple","Status":"Stable","Diagram":"/data/images/CWE-190-Diagram.png","Description":"The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.","LikelihoodOfExploit":"Medium","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"682","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"682","ViewID":"1003","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"20","ViewID":"700","Ordinal":"Primary"},{"Nature":"CanPrecede","CweID":"119","ViewID":"1000"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"AlternateTerms":[{"Term":"Overflow","Description":"The terms \"overflow\" and \"wraparound\" are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes."},{"Term":"Wraparound","Description":"The terms \"overflow\" and \"wraparound\" are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes."},{"Term":"wrap, wrap-around, wrap around","Description":"Alternate spellings of \"wraparound\""}],"ModesOfIntroduction":[{"Phase":"Implementation","Note":"This weakness may become security critical when determining the offset or size in behaviors such as memory allocation, copying, and concatenation."}],"CommonConsequences":[{"Scope":["Availability"],"Impact":["DoS: Crash, Exit, or Restart","DoS: Resource Consumption (Memory)","DoS: Instability"],"Note":"This weakness can generally lead to undefined behavior and therefore crashes. When the calculated result is used for resource allocation, this weakness can cause too many (or too few) resources to be allocated, possibly enabling crashes if the product requests more resources than can be provided."},{"Scope":["Integrity"],"Impact":["Modify Memory"],"Note":"If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the overflow/wraparound results in other conditions such as buffer overflows, further memory corruption may occur."},{"Scope":["Confidentiality","Availability","Access Control"],"Impact":["Execute Unauthorized Code or Commands","Bypass Protection Mechanism"],"Note":"This weakness can sometimes trigger buffer overflows, which can be used to execute arbitrary code. This is usually outside the scope of the product's implicit security policy."},{"Scope":["Availability","Other"],"Impact":["Alter Execution Logic","DoS: Crash, Exit, or Restart","DoS: Resource Consumption (CPU)"],"Note":"If the overflow/wraparound occurs in a loop index variable, this could cause the loop to terminate at the wrong time - too early, too late, or not at all (i.e., infinite loops). With too many iterations, some loops could consume too many resources such as memory, file handles, etc., possibly leading to a crash or other DoS."},{"Scope":["Access Control"],"Impact":["Bypass Protection Mechanism"],"Note":"If integer values are used in security-critical decisions, such as calculating quotas or allocation limits, integer overflows can be used to cause an incorrect security decision."}],"DetectionMethods":[{"DetectionMethodID":"DM-1","Method":"Automated Static Analysis","Description":"This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.","Effectiveness":"High"},{"DetectionMethodID":"DM-2","Method":"Black Box","Description":"Sometimes, evidence of this weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","Effectiveness":"Moderate","EffectivenessNotes":"Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring follow-up manual methods to diagnose the underlying problem."},{"DetectionMethodID":"DM-7","Method":"Manual Analysis","Description":"\n\nThis weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\n\nSpecifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.\n","Effectiveness":"High","EffectivenessNotes":"These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."},{"Method":"Automated Static Analysis - Binary or Bytecode","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis","Effectiveness":"High"},{"Method":"Dynamic Analysis with Manual Results Interpretation","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer","Effectiveness":"SOAR Partial"},{"Method":"Manual Static Analysis - Source Code","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tManual Source Code Review (not inspections)","Effectiveness":"SOAR Partial"},{"Method":"Automated Static Analysis - Source Code","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer","Effectiveness":"High"},{"Method":"Architecture or Design Review","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Requirements"],"Description":"Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol."},{"MitigationID":"MIT-3","Phase":["Requirements"],"Strategy":"Language Selection","Description":"\n\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nIf possible, choose a language or compiler that performs automatic bounds checking.\n"},{"MitigationID":"MIT-4","Phase":["Architecture and Design"],"Strategy":"Libraries or Frameworks","Description":"\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nUse libraries or frameworks that make it easier to handle numbers without unexpected consequences.\n\n\nExamples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]\n"},{"MitigationID":"MIT-8","Phase":["Implementation"],"Strategy":"Input Validation","Description":"\n\nPerform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.\n\n\nUse unsigned integers where possible. This makes it easier to perform validation for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values.\n"},{"MitigationID":"MIT-36","Phase":["Implementation"],"Description":"\n\nUnderstand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]\n\n\nAlso be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.\n"},{"MitigationID":"MIT-15","Phase":["Architecture and Design"],"Description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."},{"MitigationID":"MIT-26","Phase":["Implementation"],"Strategy":"Compilation or Build Hardening","Description":"Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system."}],"DemonstrativeExamples":[{"ID":"DX-33","Entries":[{"IntroText":"The following image processing code allocates a table for images."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\timg_t table_ptr; /*struct containing img data, 10kB each*/\n\tint num_imgs;\n\t...\n\tnum_imgs = get_num_imgs();\n\ttable_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);\n\t...\n```"},{"BodyText":"This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119)."}]},{"Entries":[{"IntroText":"The following code excerpt from OpenSSH 3.3 demonstrates a classic case of integer overflow:"},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tnresp = packet_get_int();\n\tif (nresp \u003e 0) {\n\t\tresponse = xmalloc(nresp*sizeof(char*));\n\t\tfor (i = 0; i \u003c nresp; i++) response[i] = packet_get_string(NULL);\n\t}\n```"},{"BodyText":"If nresp has the value 1073741824 and sizeof(char*) has its typical value of 4, then the result of the operation nresp*sizeof(char*) overflows, and the argument to xmalloc() will be 0. Most malloc() implementations will happily allocate a 0-byte buffer, causing the subsequent loop iterations to overflow the heap buffer response."}]},{"Entries":[{"IntroText":"Integer overflows can be complicated and difficult to detect. The following example is an attempt to show how an integer overflow may lead to undefined looping behavior:"},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tshort int bytesRec = 0;\n\tchar buf[SOMEBIGNUM];\n\twhile(bytesRec \u003c MAXGET) {\n\t\tbytesRec += getFromInput(buf+bytesRec);\n\t}\n```"},{"BodyText":"In the above case, it is entirely possible that bytesRec may overflow, continuously creating a lower number than MAXGET and also overwriting the first MAXGET-1 bytes of buf."}]},{"Entries":[{"IntroText":"In this example the method determineFirstQuarterRevenue is used to determine the first quarter revenue for an accounting/business application. The method retrieves the monthly sales totals for the first three months of the year, calculates the first quarter sales totals from the monthly sales totals, calculates the first quarter revenue based on the first quarter sales, and finally saves the first quarter revenue results to the database."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\t#define JAN 1\n\t#define FEB 2\n\t#define MAR 3\n\tshort getMonthlySales(int month) {...}\n\tfloat calculateRevenueForQuarter(short quarterSold) {...}\n\tint determineFirstQuarterRevenue() {\n```\n// Variable for sales revenue for the quarter* \n\t\t\tfloat quarterRevenue = 0.0f;\n\t\t\t\n\t\t\tshort JanSold = getMonthlySales(JAN); /* Get sales in January */\n\t\t\tshort FebSold = getMonthlySales(FEB); /* Get sales in February */\n\t\t\tshort MarSold = getMonthlySales(MAR); /* Get sales in March */\n\t\t\t\n\t\t\t\n\t\t\t *// Calculate quarterly total* \n\t\t\tshort quarterSold = JanSold + FebSold + MarSold;\n\t\t\t\n\t\t\t\n\t\t\t *// Calculate the total revenue for the quarter* \n\t\t\tquarterRevenue = calculateRevenueForQuarter(quarterSold);\n\t\t\t\n\t\t\tsaveFirstQuarterRevenue(quarterRevenue);\n\t\t\t\n\t\t\treturn 0;}"},{"BodyText":"However, in this example the primitive type short int is used for both the monthly and the quarterly sales variables. In C the short int primitive type has a maximum value of 32768. This creates a potential integer overflow if the value for the three monthly sales adds up to more than the maximum value for the short int primitive type. An integer overflow can lead to data corruption, unexpected behavior, infinite loops and system crashes. To correct the situation the appropriate primitive type should be used, as in the example below, and/or provide some validation mechanism to ensure that the maximum value for the primitive type is not exceeded."},{"Nature":"Good","Language":"C","ExampleCode":"```\n\t...\n\tfloat calculateRevenueForQuarter(long quarterSold) {...}\n\tint determineFirstQuarterRevenue() {\n\t\t\t...\n```\n// Calculate quarterly total* \n\t\t\tlong quarterSold = JanSold + FebSold + MarSold;\n\t\t\t\n\t\t\t\n\t\t\t *// Calculate the total revenue for the quarter* \n\t\t\tquarterRevenue = calculateRevenueForQuarter(quarterSold);\n\t\t\t\n\t\t\t...}"},{"BodyText":"Note that an integer overflow could also occur if the quarterSold variable has a primitive type long but the method calculateRevenueForQuarter has a parameter of type short."}]}],"ObservedExamples":[{"Reference":"CVE-2021-43537","Description":"Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122)","Link":"https://www.cve.org/CVERecord?id=CVE-2021-43537"},{"Reference":"CVE-2022-21668","Description":"Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).","Link":"https://www.cve.org/CVERecord?id=CVE-2022-21668"},{"Reference":"CVE-2022-0545","Description":"Chain: 3D renderer has an integer overflow (CWE-190) leading to write-what-where condition (CWE-123) using a crafted image.","Link":"https://www.cve.org/CVERecord?id=CVE-2022-0545"},{"Reference":"CVE-2021-30860","Description":"Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2021-30860"},{"Reference":"CVE-2021-30663","Description":"Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2021-30663"},{"Reference":"CVE-2018-10887","Description":"Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125)","Link":"https://www.cve.org/CVERecord?id=CVE-2018-10887"},{"Reference":"CVE-2019-1010006","Description":"Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).","Link":"https://www.cve.org/CVERecord?id=CVE-2019-1010006"},{"Reference":"CVE-2010-1866","Description":"Chain: integer overflow (CWE-190) causes a negative signed value, which later bypasses a maximum-only check (CWE-839), leading to heap-based buffer overflow (CWE-122).","Link":"https://www.cve.org/CVERecord?id=CVE-2010-1866"},{"Reference":"CVE-2010-2753","Description":"Chain: integer overflow leads to use-after-free","Link":"https://www.cve.org/CVERecord?id=CVE-2010-2753"},{"Reference":"CVE-2005-1513","Description":"Chain: integer overflow in securely-coded mail program leads to buffer overflow. In 2005, this was regarded as unrealistic to exploit, but in 2020, it was rediscovered to be easier to exploit due to evolutions of the technology.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1513"},{"Reference":"CVE-2002-0391","Description":"Integer overflow via a large number of arguments.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-0391"},{"Reference":"CVE-2002-0639","Description":"Integer overflow in OpenSSH as listed in the demonstrative examples.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-0639"},{"Reference":"CVE-2005-1141","Description":"Image with large width and height leads to integer overflow.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1141"},{"Reference":"CVE-2005-0102","Description":"Length value of -1 leads to allocation of 0 bytes and resultant heap overflow.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-0102"},{"Reference":"CVE-2004-2013","Description":"Length value of -1 leads to allocation of 0 bytes and resultant heap overflow.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-2013"},{"Reference":"CVE-2017-1000121","Description":"chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).","Link":"https://www.cve.org/CVERecord?id=CVE-2017-1000121"},{"Reference":"CVE-2013-1591","Description":"Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.","Link":"https://www.cve.org/CVERecord?id=CVE-2013-1591"}],"FunctionalAreas":["Number Processing","Memory Management","Counters"],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"Integer overflow (wrap or wraparound)"},{"TaxonomyName":"7 Pernicious Kingdoms","EntryName":"Integer Overflow"},{"TaxonomyName":"CLASP","EntryName":"Integer overflow"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"INT18-C","EntryName":"Evaluate integer expressions in a larger size before comparing or assigning to that size","MappingFit":"CWE More Abstract"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"INT30-C","EntryName":"Ensure that unsigned integer operations do not wrap","MappingFit":"CWE More Abstract"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"INT32-C","EntryName":"Ensure that operations on signed integers do not result in overflow","MappingFit":"Imprecise"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"INT35-C","EntryName":"Evaluate integer expressions in a larger size before comparing or assigning to that size"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"MEM07-C","EntryName":"Ensure that the arguments to calloc(), when multiplied, do not wrap","MappingFit":"CWE More Abstract"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"MEM35-C","EntryName":"Allocate sufficient memory for an object"},{"TaxonomyName":"WASC","EntryID":"3","EntryName":"Integer Overflows"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP1","EntryName":"Glitch in computation"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 3-3","EntryName":"Req SR 3.5"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 3-3","EntryName":"Req SR 7.2"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-1","EntryName":"Req SR-2"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-1","EntryName":"Req SI-2"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-1","EntryName":"Req SVV-1"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-1","EntryName":"Req SVV-3"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-2","EntryName":"Req CR 3.5"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-2","EntryName":"Req CR 7.2"}],"RelatedAttackPatterns":["92"],"References":[{"ExternalReferenceID":"REF-145","Authors":["Yves Younan"],"Title":"An overview of common programming security vulnerabilities and possible solutions","Publication":"Student thesis section 5.4.3","PublicationYear":"2003","PublicationMonth":"08","URL":"http://fort-knox.org/thesis.pdf"},{"ExternalReferenceID":"REF-146","Authors":["blexim"],"Title":"Basic Integer Overflows","Publication":"Phrack - Issue 60, Chapter 10","URL":"http://www.phrack.org/issues.html?issue=60\u0026id=10#article"},{"ExternalReferenceID":"REF-7","Section":"Chapter 20, \"Integer Overflows\" Page 620","Authors":["Michael Howard","David LeBlanc"],"Title":"Writing Secure Code","Edition":"2nd Edition","PublicationYear":"2002","PublicationMonth":"12","PublicationDay":"04","Publisher":"Microsoft Press","URL":"https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223"},{"ExternalReferenceID":"REF-44","Section":"\"Sin 7: Integer Overflows.\" Page 119","Authors":["Michael Howard","David LeBlanc","John Viega"],"Title":"24 Deadly Sins of Software Security","Publication":"McGraw-Hill","PublicationYear":"2010"},{"ExternalReferenceID":"REF-106","Authors":["David LeBlanc","Niels Dekker"],"Title":"SafeInt","URL":"http://safeint.codeplex.com/"},{"ExternalReferenceID":"REF-150","Authors":["Johannes Ullrich"],"Title":"Top 25 Series - Rank 17 - Integer Overflow Or Wraparound","PublicationYear":"2010","PublicationMonth":"03","PublicationDay":"18","Publisher":"SANS Software Security Institute","URL":"http://software-security.sans.org/blog/2010/03/18/top-25-series-rank-17-integer-overflow-or-wraparound"},{"ExternalReferenceID":"REF-62","Section":"Chapter 6, \"Signed Integer Boundaries\", Page 220","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"},{"ExternalReferenceID":"REF-1440","Section":"Definition variations and ambiguity","Title":"Integer overflow","PublicationYear":"2024","PublicationMonth":"06","PublicationDay":"11","Publisher":"Wikipedia","URL":"https://en.wikipedia.org/wiki/Integer_overflow","URLDate":"2024-06-30"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"],"Suggestions":[{"CweID":"191","Comment":"Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."}]},"Notes":[{"Type":"Relationship","Note":"Integer overflows can be primary to buffer overflows when they cause less memory to be allocated than expected."},{"Type":"Terminology","Note":"\n\n\"Integer overflow\" is sometimes used to cover several types of errors, including signedness errors, or buffer overflows that involve manipulation of integer data types instead of characters. Part of the confusion results from the fact that 0xffffffff is -1 in a signed context. Other confusion also arises because of the role that integer overflows have in chains.\n\n\nA \"wraparound\" is a well-defined, standard behavior that follows specific rules for how to handle situations when the intended numeric value is too large or too small to be represented, as specified in standards such as C11.\n\n\n\"Overflow\" is sometimes conflated with \"wraparound\" but typically indicates a non-standard or undefined behavior.\n\n\nThe \"overflow\" term is sometimes used to indicate cases where either the maximum or the minimum is exceeded, but others might only use \"overflow\" to indicate exceeding the maximum while using \"underflow\" for exceeding the minimum.\n\n\nSome people use \"overflow\" to mean any value outside the representable range - whether greater than the maximum, or less than the minimum - but CWE uses \"underflow\" for cases in which the intended result is less than the minimum.\n\n\nSee [REF-1440] for additional explanation of the ambiguity of terminology.\n"},{"Type":"Other","Note":"While there may be circumstances in which the logic intentionally relies on wrapping - such as with modular arithmetic in timers or counters - it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings, Terminology_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-10-14","ModificationComment":"updated Common_Consequences, Description, Potential_Mitigations, Terminology_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-01-12","ModificationComment":"updated Description, Name"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-10-29","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Applicable_Platforms, Detection_Factors, Functional_Areas, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Terminology_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-04-05","ModificationComment":"updated Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Common_Consequences, Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Observed_Examples, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Common_Consequences, Demonstrative_Examples, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2013-07-17","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Detection_Factors, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-01-19","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Functional_Areas, Observed_Examples, References, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2018-03-27","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-09-19","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description, Detection_Factors"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Observed_Examples","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-07-16","ModificationComment":"updated Alternate_Terms, Common_Consequences, Description, Diagram, Mapping_Notes, Modes_of_Introduction, Other_Notes, References, Relationship_Notes, Terminology_Notes","ModificationVersion":"4.15","ModificationReleaseDate":"2024-07-16"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-11-19","ModificationComment":"updated Relationships","ModificationVersion":"4.16","ModificationReleaseDate":"2024-11-19"},{"Type":"Contribution","ContributionName":"\"Mapping CWE to 62443\" Sub-Working Group","ContributionOrganization":"CWE-CAPEC ICS/OT SIG","ContributionDate":"2023-04-25","ContributionComment":"Suggested mappings to ISA/IEC 62443.","ContributionType":"Content"},{"Type":"Contribution","ContributionName":"Abhi Balakrishnan","ContributionDate":"2024-02-29","ContributionComment":"Provided diagram to improve CWE usability","ContributionType":"Content","ContributionVersion":"4.15","ContributionReleaseDate":"2024-07-16"},{"Type":"Rename","PreviousEntryName":"Integer Overflow (Wrap or Wraparound)","Date":"2009-01-12"}]}