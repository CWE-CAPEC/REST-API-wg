{"ID":"245","Name":"J2EE Bad Practices: Direct Management of Connections","Abstraction":"Variant","Structure":"Simple","Status":"Draft","Description":"The J2EE application directly manages connections, instead of using the container's connection management facilities.","ExtendedDescription":"The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"695","ViewID":"1000","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"Java","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Other"],"Impact":["Quality Degradation"]}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"In the following example, the class DatabaseConnection opens and manages a connection to a database for a J2EE application. The method openDatabaseConnection opens a connection to the database using a DriverManager to create the Connection object conn to the database specified in the string constant CONNECT_STRING."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic class DatabaseConnection {\n\t\t\tprivate static final String CONNECT_STRING = \"jdbc:mysql://localhost:3306/mysqldb\";\n\t\t\tprivate Connection conn = null;\n\t\t\tpublic DatabaseConnection() {\n\t\t\t}\n\t\t\tpublic void openDatabaseConnection() {\n\t\t\t\ttry {\n\t\t\t\t\tconn = DriverManager.getConnection(CONNECT_STRING);\n\t\t\t\t} catch (SQLException ex) {...}\n\t\t\t}\n\t\t\t// Member functions for retrieving database connection and accessing database\n\t\t\t...\n\t}\n```"},{"BodyText":"The use of the DriverManager class to directly manage the connection to the database violates the J2EE restriction against the direct management of connections. The J2EE application should use the web application container's resource management facilities to obtain a connection to the database as shown in the following example."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tpublic class DatabaseConnection {\n\t\t\tprivate static final String DB_DATASRC_REF = \"jdbc:mysql://localhost:3306/mysqldb\";\n\t\t\tprivate Connection conn = null;\n\t\t\tpublic DatabaseConnection() {\n\t\t\t}\n\t\t\tpublic void openDatabaseConnection() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t\tInitialContext ctx = new InitialContext();\n\t\t\t\t\t\t\tDataSource datasource = (DataSource) ctx.lookup(DB_DATASRC_REF);\n\t\t\t\t\t\t\tconn = datasource.getConnection();\n\t\t\t\t\t} catch (NamingException ex) {...}\n\t\t\t\t\t} catch (SQLException ex) {...}\n\t\t\t}\n\t\t\t// Member functions for retrieving database connection and accessing database\n\t\t\t...\n\t}\n```"}]}],"TaxonomyMappings":[{"TaxonomyName":"7 Pernicious Kingdoms","EntryName":"J2EE Bad Practices: getConnection()"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP3","EntryName":"Use of an improper API"}],"References":[{"ExternalReferenceID":"REF-6","Authors":["Katrina Tsipenyuk","Brian Chess","Gary McGraw"],"Title":"Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors","Publication":"NIST Workshop on Software Security Assurance Tools Techniques and Metrics","PublicationYear":"2005","PublicationMonth":"11","PublicationDay":"07","Publisher":"NIST","URL":"https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"7 Pernicious Kingdoms","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-04-05","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-06-23","ModificationComment":"updated Description, Other_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Causal_Nature, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, Relationships, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2025-04-03","ModificationComment":"updated Demonstrative_Examples","ModificationVersion":"4.17","ModificationReleaseDate":"2025-04-03"},{"Type":"Rename","PreviousEntryName":"J2EE Bad Practices: getConnection()","Date":"2008-04-11"}]}