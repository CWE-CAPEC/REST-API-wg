{"ID":"476","Name":"NULL Pointer Dereference","Abstraction":"Base","Structure":"Simple","Status":"Stable","Diagram":"/data/images/CWE-476-Diagram.png","Description":"The product dereferences a pointer that it expects to be valid but is NULL.","LikelihoodOfExploit":"Medium","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"710","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"754","ViewID":"1000"},{"Nature":"ChildOf","CweID":"754","ViewID":"1003","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Resultant","Description":"NULL pointer dereferences are frequently resultant from rarely encountered error conditions and race conditions, since these are most likely to escape detection during the testing phases."}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Undetermined"},{"Type":"Language","Name":"C++","Prevalence":"Undetermined"},{"Type":"Language","Name":"Java","Prevalence":"Undetermined"},{"Type":"Language","Name":"C#","Prevalence":"Undetermined"},{"Type":"Language","Name":"Go","Prevalence":"Undetermined"}],"AlternateTerms":[{"Term":"NPD","Description":"Common abbreviation for Null Pointer Dereference"},{"Term":"null deref","Description":"Common abbreviation for Null Pointer Dereference"},{"Term":"NPE","Description":"Common abbreviation for Null Pointer Exception"},{"Term":"nil pointer dereference","Description":"used for access of nil in Go programs"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Availability"],"Impact":["DoS: Crash, Exit, or Restart"],"Note":"NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation."},{"Scope":["Integrity","Confidentiality"],"Impact":["Execute Unauthorized Code or Commands","Read Memory","Modify Memory"],"Note":"In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution."}],"DetectionMethods":[{"DetectionMethodID":"DM-2","Method":"Automated Dynamic Analysis","Description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","Effectiveness":"Moderate"},{"DetectionMethodID":"DM-12","Method":"Manual Dynamic Analysis","Description":"Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself."},{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"If all pointers that could have been modified are checked for NULL before use, nearly all NULL pointer dereferences can be prevented."},{"Phase":["Requirements"],"Description":"Select a programming language that is not susceptible to these issues."},{"Phase":["Implementation"],"Description":"Check the results of all functions that return a value and verify that the value is non-null before acting upon it.","Effectiveness":"Moderate","EffectivenessNotes":"Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment. This solution does not handle the use of improperly initialized variables (CWE-665)."},{"Phase":["Architecture and Design"],"Description":"Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values."},{"Phase":["Implementation"],"Description":"Explicitly initialize all variables and other data stores, either during declaration or just before the first usage."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"While there are no complete fixes aside from conscientious programming, the following steps will go a long way to ensure that NULL pointer dereferences do not occur."},{"Nature":"Good","ExampleCode":"```\n\tif (pointer1 != NULL) {\n```\n/* make use of pointer1 */* \n\t\t\t\n\t\t\t */* ... */* \n\t\t\t}"},{"BodyText":"When working with a multithreaded or otherwise asynchronous environment, ensure that proper locking APIs are used to lock before the if statement; and unlock when it has finished."}]},{"ID":"DX-1","Entries":[{"IntroText":"This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tvoid host_lookup(char *user_supplied_addr){\n\t\t\tstruct hostent *hp;\n\t\t\tin_addr_t *addr;\n\t\t\tchar hostname[64];\n\t\t\tin_addr_t inet_addr(const char *cp);\n```\n/*routine that ensures user_supplied_addr is in the right format for conversion */* \n\t\t\t\n\t\t\tvalidate_addr_form(user_supplied_addr);\n\t\t\taddr = inet_addr(user_supplied_addr);\n\t\t\thp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);\n\t\t\tstrcpy(hostname, hp-\u003eh_name);}"},{"BodyText":"If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference (CWE-476) would then occur in the call to strcpy()."},{"BodyText":"Note that this code is also vulnerable to a buffer overflow (CWE-119)."}]},{"Entries":[{"IntroText":"In the following code, the programmer assumes that the system always has a property named \"cmd\" defined. If an attacker can control the program's environment so that \"cmd\" is not defined, the program throws a NULL pointer exception when it attempts to call the trim() method."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tString cmd = System.getProperty(\"cmd\");\n\tcmd = cmd.trim();\n```"}]},{"ID":"DX-110","Entries":[{"IntroText":"This Android application has registered to handle a URL when sent an intent:"},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n```\n...* \n\tIntentFilter filter = new IntentFilter(\"com.example.URLHandler.openURL\");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n\t\n\t *...* \n\t\n\tpublic class UrlHandlerReceiver extends BroadcastReceiver {\n\t```\n\t\t\t@Override\n\t\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\t\t\tif(\"com.example.URLHandler.openURL\".equals(intent.getAction())) {\n\t\t\t\t\t\tString URL = intent.getStringExtra(\"URLToOpen\");\n\t\t\t\t\t\tint length = URL.length();\n```\n...* \n\t\t\t\t\t}}}"},{"BodyText":"The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called."}]},{"Entries":[{"IntroText":"Consider the following example of a typical client server exchange. The HandleRequest function is intended to perform a request and use a defer to close the connection whenever the function returns."},{"Nature":"Bad","Language":"Go","ExampleCode":"```\n\tfunc HandleRequest(client http.Client, request *http.Request) (*http.Response, error) { \n\t\t response, err := client.Do(request)\n\t\t defer response.Body.Close()\n\t\t if err != nil { \n\t\t\t return nil, err\n\t\t }\n\t\t...\n\t }\n```"},{"BodyText":"If a user supplies a malformed request or violates the client policy, the Do method can return a nil response and a non-nil err."},{"BodyText":"This HandleRequest Function evaluates the close before checking the error. A deferred call's arguments are evaluated immediately, so the defer statement panics due to a nil response."}]}],"ObservedExamples":[{"Reference":"CVE-2005-3274","Description":"race condition causes a table to be corrupted if a timer activates while it is being modified, leading to resultant NULL dereference; also involves locking.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-3274"},{"Reference":"CVE-2002-1912","Description":"large number of packets leads to NULL dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2002-1912"},{"Reference":"CVE-2005-0772","Description":"packet with invalid error status value triggers NULL dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2005-0772"},{"Reference":"CVE-2009-4895","Description":"Chain: race condition for an argument value, possibly resulting in NULL dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2009-4895"},{"Reference":"CVE-2020-29652","Description":"ssh component for Go allows clients to cause a denial of service (nil pointer dereference) against SSH servers.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-29652"},{"Reference":"CVE-2009-2692","Description":"Chain: Use of an unimplemented network socket operation pointing to an uninitialized handler function (CWE-456) causes a crash because of a null pointer dereference (CWE-476).","Link":"https://www.cve.org/CVERecord?id=CVE-2009-2692"},{"Reference":"CVE-2009-3547","Description":"Chain: race condition (CWE-362) might allow resource to be released before operating on it, leading to NULL dereference (CWE-476)","Link":"https://www.cve.org/CVERecord?id=CVE-2009-3547"},{"Reference":"CVE-2009-3620","Description":"Chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2009-3620"},{"Reference":"CVE-2009-2698","Description":"Chain: IP and UDP layers each track the same value with different mechanisms that can get out of sync, possibly resulting in a NULL dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2009-2698"},{"Reference":"CVE-2009-2692","Description":"Chain: uninitialized function pointers can be dereferenced allowing code execution","Link":"https://www.cve.org/CVERecord?id=CVE-2009-2692"},{"Reference":"CVE-2009-0949","Description":"Chain: improper initialization of memory can lead to NULL dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2009-0949"},{"Reference":"CVE-2008-3597","Description":"Chain: game server can access player data structures before initialization has happened leading to NULL dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2008-3597"},{"Reference":"CVE-2020-6078","Description":"Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476)","Link":"https://www.cve.org/CVERecord?id=CVE-2020-6078"},{"Reference":"CVE-2008-0062","Description":"Chain: a message having an unknown message type may cause a reference to uninitialized memory resulting in a null pointer dereference (CWE-476) or dangling pointer (CWE-825), possibly crashing the system or causing heap corruption.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-0062"},{"Reference":"CVE-2008-5183","Description":"Chain: unchecked return value can lead to NULL dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2008-5183"},{"Reference":"CVE-2004-0079","Description":"SSL software allows remote attackers to cause a denial of service (crash) via a crafted SSL/TLS handshake that triggers a null dereference.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0079"},{"Reference":"CVE-2004-0365","Description":"Network monitor allows remote attackers to cause a denial of service (crash) via a malformed RADIUS packet that triggers a null dereference.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0365"},{"Reference":"CVE-2003-1013","Description":"Network monitor allows remote attackers to cause a denial of service (crash) via a malformed Q.931, which triggers a null dereference.","Link":"https://www.cve.org/CVERecord?id=CVE-2003-1013"},{"Reference":"CVE-2003-1000","Description":"Chat client allows remote attackers to cause a denial of service (crash) via a passive DCC request with an invalid ID number, which causes a null dereference.","Link":"https://www.cve.org/CVERecord?id=CVE-2003-1000"},{"Reference":"CVE-2004-0389","Description":"Server allows remote attackers to cause a denial of service (crash) via malformed requests that trigger a null dereference.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0389"},{"Reference":"CVE-2004-0119","Description":"OS allows remote attackers to cause a denial of service (crash from null dereference) or execute arbitrary code via a crafted request during authentication protocol selection.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0119"},{"Reference":"CVE-2004-0458","Description":"Game allows remote attackers to cause a denial of service (server crash) via a missing argument, which triggers a null pointer dereference.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0458"},{"Reference":"CVE-2002-0401","Description":"Network monitor allows remote attackers to cause a denial of service (crash) or execute arbitrary code via malformed packets that cause a NULL pointer dereference.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-0401"},{"Reference":"CVE-2001-1559","Description":"Chain: System call returns wrong value (CWE-393), leading to a resultant NULL dereference (CWE-476).","Link":"https://www.cve.org/CVERecord?id=CVE-2001-1559"}],"TaxonomyMappings":[{"TaxonomyName":"7 Pernicious Kingdoms","EntryName":"Null Dereference"},{"TaxonomyName":"CLASP","EntryName":"Null-pointer dereference"},{"TaxonomyName":"PLOVER","EntryName":"Null Dereference (Null Pointer Dereference)"},{"TaxonomyName":"OWASP Top Ten 2004","EntryID":"A9","EntryName":"Denial of Service","MappingFit":"CWE More Specific"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"EXP34-C","EntryName":"Do not dereference null pointers","MappingFit":"Exact"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP7","EntryName":"Faulty Pointer Use"}],"References":[{"ExternalReferenceID":"REF-6","Authors":["Katrina Tsipenyuk","Brian Chess","Gary McGraw"],"Title":"Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors","Publication":"NIST Workshop on Software Security Assurance Tools Techniques and Metrics","PublicationYear":"2005","PublicationMonth":"11","PublicationDay":"07","Publisher":"NIST","URL":"https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf"},{"ExternalReferenceID":"REF-18","Authors":["Secure Software, Inc."],"Title":"The CLASP Application Security Process","PublicationYear":"2005","URL":"https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf","URLDate":"2024-11-17"},{"ExternalReferenceID":"REF-1031","Title":"Null pointer / Null dereferencing","PublicationYear":"2019","PublicationMonth":"07","PublicationDay":"15","Publisher":"Wikipedia","URL":"https://en.wikipedia.org/wiki/Null_pointer#Null_dereferencing"},{"ExternalReferenceID":"REF-1032","Title":"Null Reference Creation and Null Pointer Dereference","Publisher":"Apple","URL":"https://developer.apple.com/documentation/xcode/null-reference-creation-and-null-pointer-dereference","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-1033","Title":"NULL Pointer Dereference [CWE-476]","PublicationYear":"2012","PublicationMonth":"09","PublicationDay":"11","Publisher":"ImmuniWeb","URL":"https://www.immuniweb.com/vulnerability/null-pointer-dereference.html"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"7 Pernicious Kingdoms","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationOrganization":"KDM Analytics","ModificationDate":"2008-08-01","ModificationComment":"added/updated white box definitions"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-10-29","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-12-28","ModificationComment":"updated Common_Consequences, Demonstrative_Examples, Other_Notes, Potential_Mitigations, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Potential_Mitigations, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Demonstrative_Examples, Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-12-13","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Observed_Examples, Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-02-18","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-01-19","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Relationships, Taxonomy_Mappings, White_Box_Definitions"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-09-19","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples, Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Alternate_Terms"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Alternate_Terms, Applicable_Platforms, Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Demonstrative_Examples, Detection_Factors, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-07-16","ModificationComment":"updated Alternate_Terms, Demonstrative_Examples, Description, Diagram, Potential_Mitigations, Relationships, Weakness_Ordinalities","ModificationVersion":"4.15","ModificationReleaseDate":"2024-07-16"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-11-19","ModificationComment":"updated Relationships","ModificationVersion":"4.16","ModificationReleaseDate":"2024-11-19"},{"Type":"Contribution","ContributionName":"Abhi Balakrishnan","ContributionDate":"2024-02-29","ContributionComment":"Provided diagram to improve CWE usability","ContributionType":"Content","ContributionVersion":"4.15","ContributionReleaseDate":"2024-07-16"}]}