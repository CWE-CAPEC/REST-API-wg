{"ID":"763","Name":"Release of Invalid Pointer or Reference","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.","ExtendedDescription":"\n\nThis weakness can take several forms, such as:\n\n\n  - The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762).\n\n  - The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761.\n\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"404","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"404","ViewID":"1003","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"404","ViewID":"1340","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Often"},{"Type":"Language","Name":"C++","Prevalence":"Often"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Availability","Confidentiality"],"Impact":["Modify Memory","DoS: Crash, Exit, or Restart","Execute Unauthorized Code or Commands"],"Note":"This weakness may result in the corruption of memory, and perhaps instructions, possibly leading to a crash. If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code."}],"DetectionMethods":[{"DetectionMethodID":"DM-13","Method":"Fuzzing","Description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free()."},{"Phase":["Implementation"],"Description":"When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory."},{"MitigationID":"MIT-4.6","Phase":["Architecture and Design"],"Strategy":"Libraries or Frameworks","Description":"\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, glibc in Linux provides protection against free of invalid pointers.\n"},{"Phase":["Architecture and Design"],"Description":"Use a language that provides abstractions for memory allocation and deallocation."},{"Phase":["Testing"],"Description":"Use a tool that dynamically detects memory management problems, such as valgrind."}],"DemonstrativeExamples":[{"ID":"DX-78","Entries":[{"IntroText":"This code attempts to tokenize a string and place it into an array using the strsep function, which inserts a \\0 byte in place of whitespace or a tab character. After finishing the loop, each string in the AP array points to a location within the input string."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tchar **ap, *argv[10], *inputstring;\n\tfor (ap = argv; (*ap = strsep(\u0026inputstring, \" \\t\")) != NULL;)\n\t\t\tif (**ap != '\\0')\n\t\t\t\tif (++ap \u003e= \u0026argv[10])\n\t\t\t\t\tbreak;\n\t/.../\n\tfree(ap[4]);\n```"},{"BodyText":"Since strsep is not allocating any new memory, freeing an element in the middle of the array is equivalent to free a pointer in the middle of inputstring."}]},{"ID":"DX-80","Entries":[{"IntroText":"This example allocates a BarObj object using the new operator in C++, however, the programmer then deallocates the object using free(), which may lead to unexpected behavior."},{"Nature":"Bad","Language":"C++","ExampleCode":"```\n\tvoid foo(){\n\t\t\tBarObj *ptr = new BarObj()\n```\n/* do some work with ptr here */* \n\t\t\t\n\t\t\t...\n\t\t\t\n\t\t\tfree(ptr);}"},{"BodyText":"Instead, the programmer should have either created the object with one of the malloc family functions, or else deleted the object with the delete operator."},{"Nature":"Good","Language":"C++","ExampleCode":"```\n\tvoid foo(){\n\t\t\tBarObj *ptr = new BarObj()\n```\n/* do some work with ptr here */* \n\t\t\t\n\t\t\t...\n\t\t\t\n\t\t\tdelete ptr;}"}]},{"ID":"DX-77","Entries":[{"IntroText":"In this example, the programmer dynamically allocates a buffer to hold a string and then searches for a specific character. After completing the search, the programmer attempts to release the allocated memory and return SUCCESS or FAILURE to the caller. Note: for simplification, this example uses a hard-coded \"Search Me!\" string and a constant string length of 20."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\t#define SUCCESS (1)\n\t#define FAILURE (0)\n\tint contains_char(char c){\n\t\t\tchar *str;\n\t\t\tstr = (char*)malloc(20*sizeof(char));\n\t\t\tstrcpy(str, \"Search Me!\");\n\t\t\twhile( *str != NULL){\n\t\t\t\t\tif( *str == c ){\n```\n/* matched char, free string and return success */* \n\t\t\t\t\t\t\tfree(str);\n\t\t\t\t\t\t\treturn SUCCESS;}\n\t\t\t\t\t\n\t\t\t\t\t */* didn't match yet, increment pointer and try next char */* \n\t\t\t\t\t\n\t\t\t\t\tstr = str + 1;}\n\t\t\t\n\t\t\t */* we did not match the char in the string, free mem and return failure */* \n\t\t\t\n\t\t\tfree(str);\n\t\t\treturn FAILURE;}"},{"BodyText":"However, if the character is not at the beginning of the string, or if it is not in the string at all, then the pointer will not be at the start of the buffer when the programmer frees it."},{"BodyText":"Instead of freeing the pointer in the middle of the buffer, the programmer can use an indexing pointer to step through the memory or abstract the memory calculations by using array indexing."},{"Nature":"Good","Language":"C","ExampleCode":"```\n\t#define SUCCESS (1)\n\t#define FAILURE (0)\n\tint cointains_char(char c){\n\t\t\tchar *str;\n\t\t\tint i = 0;\n\t\t\tstr = (char*)malloc(20*sizeof(char));\n\t\t\tstrcpy(str, \"Search Me!\");\n\t\t\twhile( i \u003c strlen(str) ){\n\t\t\t\t\tif( str[i] == c ){\n```\n/* matched char, free string and return success */* \n\t\t\t\t\t\t\tfree(str);\n\t\t\t\t\t\t\treturn SUCCESS;}\n\t\t\t\t\t\n\t\t\t\t\t */* didn't match yet, increment pointer and try next char */* \n\t\t\t\t\t\n\t\t\t\t\ti = i + 1;}\n\t\t\t\n\t\t\t */* we did not match the char in the string, free mem and return failure */* \n\t\t\t\n\t\t\tfree(str);\n\t\t\treturn FAILURE;}"}]},{"ID":"DX-79","Entries":[{"IntroText":"Consider the following code in the context of a parsing application to extract commands out of user data. The intent is to parse each command and add it to a queue of commands to be executed, discarding each malformed entry."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n```\n//hardcode input length for simplicity* \n\tchar* input = (char*) malloc(40*sizeof(char));\n\tchar *tok;\n\tchar* sep = \" \\t\";\n\t\n\tget_user_input( input );\n\t\n\t\n\t */* The following loop will parse and process each token in the input string */* \n\t\n\ttok = strtok( input, sep);\n\twhile( NULL != tok ){\n\t```\n\t\t\tif( isMalformed( tok ) ){\n```\n/* ignore and discard bad data */* \n\t\t\t\t\tfree( tok );}\n\t\t\telse{\n\t\t\t```\n\t\t\t\tadd_to_command_queue( tok );\n\t\t\t}\n\t\t\ttok = strtok( NULL, sep));\n\t}\n```"},{"BodyText":"While the above code attempts to free memory associated with bad commands, since the memory was all allocated in one chunk, it must all be freed together."},{"BodyText":"One way to fix this problem would be to copy the commands into a new memory location before placing them in the queue. Then, after all commands have been processed, the memory can safely be freed."},{"Nature":"Good","Language":"C","ExampleCode":"```\n```\n//hardcode input length for simplicity* \n\tchar* input = (char*) malloc(40*sizeof(char));\n\tchar *tok, *command;\n\tchar* sep = \" \\t\";\n\t\n\tget_user_input( input );\n\t\n\t\n\t */* The following loop will parse and process each token in the input string */* \n\t\n\ttok = strtok( input, sep);\n\twhile( NULL != tok ){\n\t```\n\t\t\tif( !isMalformed( command ) ){\n```\n/* copy and enqueue good data */* \n\t\t\t\t\tcommand = (char*) malloc( (strlen(tok) + 1) * sizeof(char) );\n\t\t\t\t\tstrcpy( command, tok );\n\t\t\t\t\tadd_to_command_queue( command );}\n\t\t\ttok = strtok( NULL, sep));}\n\t\n\tfree( input )"}]}],"ObservedExamples":[{"Reference":"CVE-2019-11930","Description":"function \"internally calls 'calloc' and returns a pointer at an index... inside the allocated buffer. This led to freeing invalid memory.\"","Link":"https://www.cve.org/CVERecord?id=CVE-2019-11930"}],"AffectedResources":["Memory"],"TaxonomyMappings":[{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP12","EntryName":"Faulty Memory Release"}],"References":[{"ExternalReferenceID":"REF-657","Title":"boost C++ Library Smart Pointers","URL":"https://www.boost.org/doc/libs/1_38_0/libs/smart_ptr/smart_ptr.htm","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-480","Title":"Valgrind","URL":"http://valgrind.org/"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Maintenance","Note":"The view-1000 subtree that is associated with this weakness needs additional work. Several entries will likely be created in this branch. Currently the focus is on free() of memory, but delete and other related release routines may require the creation of intermediate entries that are not specific to a particular function. In addition, the role of other types of invalid pointers, such as an expired pointer, i.e. CWE-415 Double Free and release of uninitialized pointers, related to CWE-457."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2009-05-08","SubmissionVersion":"1.4","SubmissionReleaseDate":"2009-05-27"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Common_Consequences, Demonstrative_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-02-18","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Maintenance_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2025-04-03","ModificationComment":"updated Applicable_Platforms","ModificationVersion":"4.17","ModificationReleaseDate":"2025-04-03"}]}