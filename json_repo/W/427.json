{"ID":"427","Name":"Uncontrolled Search Path Element","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.","ExtendedDescription":"\n\nAlthough this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as \"/tmp\" or the current working directory.\n\n\nIn Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:\n\n\n  - the directory from which the program has been loaded\n\n  - the current working directory\n\nIn some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.\n\nOne or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled.\n\n\nIn some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.\n\n\nIn software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"668","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"668","ViewID":"1003","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"}],"AlternateTerms":[{"Term":"DLL preloading","Description":"This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427."},{"Term":"Binary planting","Description":"This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427."},{"Term":"Insecure library loading","Description":"This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427."},{"Term":"Dependency confusion","Description":"As of February 2021, this term is used to describe CWE-427 in the context of managing installation of software package dependencies, in which attackers release packages on public sites where the names are the same as package names used by private repositories, and the search for the dependent package tries the public site first, downloading untrusted code. It may also be referred to as a \"substitution attack.\""}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Confidentiality","Integrity","Availability"],"Impact":["Execute Unauthorized Code or Commands"]}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Architecture and Design","Implementation"],"Strategy":"Attack Surface Reduction","Description":"Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428."},{"Phase":["Implementation"],"Strategy":"Attack Surface Reduction","Description":"When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths."},{"Phase":["Implementation"],"Strategy":"Attack Surface Reduction","Description":"Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths."},{"Phase":["Implementation"],"Description":"Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a denylist approach, it might not be a complete solution."},{"Phase":["Implementation"],"Description":"Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path."}],"DemonstrativeExamples":[{"ID":"DX-29","Entries":[{"IntroText":"The following code is from a web application that allows users access to an interface through which they can update their password on the system. In this environment, user passwords can be managed using the Network Information System (NIS), which is commonly used on UNIX systems. When performing NIS updates, part of the process for updating passwords is to run a make command in the /var/yp directory. Performing NIS updates requires extra privileges."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\t...\n\tSystem.Runtime.getRuntime().exec(\"make\");\n\t...\n```"},{"BodyText":"The problem here is that the program does not specify an absolute path for make and does not clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system."}]},{"Entries":[{"IntroText":"In versions of Go prior to v1.19, the LookPath function would follow the conventions of the runtime OS and look for a program in the directiories listed in the current path [REF-1325]."},{"BodyText":"Therefore, Go would prioritize searching the current directory when the provided command name does not contain a directory separator and continued to search for programs even when the specified program name is empty."},{"BodyText":"Consider the following where an application executes a git command to run on the system."},{"Nature":"Bad","Language":"Go","ExampleCode":"```\n\tfunc ExecuteGitCommand(name string, arg []string) error { \n\t\t c := exec.Command(name, arg...)\n\t\t var err error\n\t\t c.Path, err = exec.LookPath(name)\n\t\t if err != nil {\n\t\t\t return err\n\t\t }\n\t }\n```"},{"BodyText":"An attacker could create a malicious repository with a file named ..exe and another file named git.exe. If git.exe is not found in the system PATH, then ..exe would execute [REF-1326]."}]},{"Entries":[{"IntroText":"In February 2021 [REF-1169], a researcher was able to demonstrate the ability to breach major technology companies by using \"dependency confusion\" where the companies would download and execute untrusted packages."},{"BodyText":"The researcher discovered the names of some internal, private packages by looking at dependency lists in public source code, such as package.json. The researcher then created new, untrusted packages with the same name as the internal packages, then uploaded them to package hosting services. These services included the npm registry for Node, PyPi for Python, and RubyGems. In affected companies, their dependency resolution would search the public hosting services first before consulting their internal service, causing the untrusted packages to be automatically downloaded and executed."}]}],"ObservedExamples":[{"Reference":"CVE-2023-25815","Description":"chain: a change in an underlying package causes the gettext function to use implicit initialization with a hard-coded path (CWE-1419) under the user-writable C:\\ drive, introducing an untrusted search path element (CWE-427) that enables spoofing of messages.","Link":"https://www.cve.org/CVERecord?id=CVE-2023-25815"},{"Reference":"CVE-2022-4826","Description":"Go-based git extension on Windows can search for and execute a malicious \"..exe\" in a repository because Go searches the current working directory if git.exe is not found in the PATH","Link":"https://www.cve.org/CVERecord?id=CVE-2022-4826"},{"Reference":"CVE-2020-26284","Description":"A Static Site Generator built in Go, when running on Windows, searches the current working directory for a command, possibly allowing code execution using a malicious .exe or .bat file with the name being searched","Link":"https://www.cve.org/CVERecord?id=CVE-2020-26284"},{"Reference":"CVE-2022-24765","Description":"Windows-based fork of git creates a \".git\" folder in the C: drive, allowing local attackers to create a .git folder with a malicious config file","Link":"https://www.cve.org/CVERecord?id=CVE-2022-24765"},{"Reference":"CVE-2019-1552","Description":"SSL package searches under \"C:/usr/local\" for configuration files and other critical data, but C:/usr/local might be world-writable.","Link":"https://www.cve.org/CVERecord?id=CVE-2019-1552"},{"Reference":"CVE-2010-3402","Description":"\"DLL hijacking\" issue in document editor.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-3402"},{"Reference":"CVE-2010-3397","Description":"\"DLL hijacking\" issue in encryption software.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-3397"},{"Reference":"CVE-2010-3138","Description":"\"DLL hijacking\" issue in library used by multiple media players.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-3138"},{"Reference":"CVE-2010-3152","Description":"\"DLL hijacking\" issue in illustration program.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-3152"},{"Reference":"CVE-2010-3147","Description":"\"DLL hijacking\" issue in address book.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-3147"},{"Reference":"CVE-2010-3135","Description":"\"DLL hijacking\" issue in network monitoring software.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-3135"},{"Reference":"CVE-2010-3131","Description":"\"DLL hijacking\" issue in web browser.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-3131"},{"Reference":"CVE-2010-1795","Description":"\"DLL hijacking\" issue in music player/organizer.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-1795"},{"Reference":"CVE-2002-1576","Description":"Product uses the current working directory to find and execute a program, which allows local users to gain privileges by creating a symlink that points to a malicious version of the program.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-1576"},{"Reference":"CVE-1999-1461","Description":"Product trusts the PATH environmental variable to find and execute a program, which allows local users to obtain root access by modifying the PATH to point to a malicous version of that program.","Link":"https://www.cve.org/CVERecord?id=CVE-1999-1461"},{"Reference":"CVE-1999-1318","Description":"Software uses a search path that includes the current working directory (.), which allows local users to gain privileges via malicious programs.","Link":"https://www.cve.org/CVERecord?id=CVE-1999-1318"},{"Reference":"CVE-2003-0579","Description":"Admin software trusts the user-supplied -uv.install command line option to find and execute the uv.install program, which allows local users to gain privileges by providing a pathname that is under control of the user.","Link":"https://www.cve.org/CVERecord?id=CVE-2003-0579"},{"Reference":"CVE-2000-0854","Description":"When a document is opened, the directory of that document is first used to locate DLLs , which could allow an attacker to execute arbitrary commands by inserting malicious DLLs into the same directory as the document.","Link":"https://www.cve.org/CVERecord?id=CVE-2000-0854"},{"Reference":"CVE-2001-0943","Description":"Database trusts the PATH environment variable to find and execute programs, which allows local users to modify the PATH to point to malicious programs.","Link":"https://www.cve.org/CVERecord?id=CVE-2001-0943"},{"Reference":"CVE-2001-0942","Description":"Database uses an environment variable to find and execute a program, which allows local users to execute arbitrary programs by changing the environment variable.","Link":"https://www.cve.org/CVERecord?id=CVE-2001-0942"},{"Reference":"CVE-2001-0507","Description":"Server uses relative paths to find system files that will run in-process, which allows local users to gain privileges via a malicious file.","Link":"https://www.cve.org/CVERecord?id=CVE-2001-0507"},{"Reference":"CVE-2002-2017","Description":"Product allows local users to execute arbitrary code by setting an environment variable to reference a malicious program.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-2017"},{"Reference":"CVE-1999-0690","Description":"Product includes the current directory in root's PATH variable.","Link":"https://www.cve.org/CVERecord?id=CVE-1999-0690"},{"Reference":"CVE-2001-0912","Description":"Error during packaging causes product to include a hard-coded, non-standard directory in search path.","Link":"https://www.cve.org/CVERecord?id=CVE-2001-0912"},{"Reference":"CVE-2001-0289","Description":"Product searches current working directory for configuration file.","Link":"https://www.cve.org/CVERecord?id=CVE-2001-0289"},{"Reference":"CVE-2005-1705","Description":"Product searches current working directory for configuration file.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1705"},{"Reference":"CVE-2005-1307","Description":"Product executable other program from current working directory.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1307"},{"Reference":"CVE-2002-2040","Description":"Untrusted path.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-2040"},{"Reference":"CVE-2005-2072","Description":"Modification of trusted environment variable leads to untrusted path vulnerability.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2072"},{"Reference":"CVE-2005-1632","Description":"Product searches /tmp for modules before other paths.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1632"}],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"Uncontrolled Search Path Element"}],"RelatedAttackPatterns":["38","471"],"References":[{"ExternalReferenceID":"REF-409","Authors":["Georgi Guninski"],"Title":"Double clicking on MS Office documents from Windows Explorer may execute arbitrary programs in some cases","Publication":"Bugtraq","PublicationYear":"2000","PublicationMonth":"09","PublicationDay":"18","URL":"https://seclists.org/bugtraq/2000/Sep/331","URLDate":"2023-01-30"},{"ExternalReferenceID":"REF-410","Authors":["Mitja Kolsek"],"Title":"ACROS Security: Remote Binary Planting in Apple iTunes for Windows (ASPR #2010-08-18-1)","Publication":"Bugtraq","PublicationYear":"2010","PublicationMonth":"08","PublicationDay":"18","URL":"https://lists.openwall.net/bugtraq/2010/08/18/4","URLDate":"2023-01-30"},{"ExternalReferenceID":"REF-411","Authors":["Taeho Kwon","Zhendong Su"],"Title":"Automatic Detection of Vulnerable Dynamic Component Loadings","URL":"https://dl.acm.org/doi/10.1145/1831708.1831722","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-412","Title":"Dynamic-Link Library Search Order","PublicationYear":"2010","PublicationMonth":"09","PublicationDay":"02","Publisher":"Microsoft","URL":"https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-413","Title":"Dynamic-Link Library Security","PublicationYear":"2010","PublicationMonth":"09","PublicationDay":"02","Publisher":"Microsoft","URL":"https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-security","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-414","Title":"An update on the DLL-preloading remote attack vector","PublicationYear":"2010","PublicationMonth":"08","PublicationDay":"31","Publisher":"Microsoft","URL":"https://msrc.microsoft.com/blog/2010/08/an-update-on-the-dll-preloading-remote-attack-vector/","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-415","Title":"Insecure Library Loading Could Allow Remote Code Execution","PublicationYear":"2010","PublicationMonth":"08","PublicationDay":"23","Publisher":"Microsoft","URL":"https://learn.microsoft.com/en-us/security-updates/securityadvisories/2010/2269637#insecure-library-loading-could-allow-remote-code-execution","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-416","Authors":["HD Moore"],"Title":"Application DLL Load Hijacking","PublicationYear":"2010","PublicationMonth":"08","PublicationDay":"23","URL":"https://www.rapid7.com/blog/?p=5325","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-417","Authors":["Oliver Lavery"],"Title":"DLL Hijacking: Facts and Fiction","PublicationYear":"2010","PublicationMonth":"08","PublicationDay":"26","URL":"https://threatpost.com/dll-hijacking-facts-and-fiction-082610/74384/","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-1168","Authors":["Catalin Cimpanu"],"Title":"Microsoft warns enterprises of new 'dependency confusion' attack technique","Publication":"ZDNet","PublicationYear":"2021","PublicationMonth":"02","PublicationDay":"10","URL":"https://www.zdnet.com/article/microsoft-warns-enterprises-of-new-dependency-confusion-attack-technique/"},{"ExternalReferenceID":"REF-1169","Authors":["Alex Birsan"],"Title":"Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies","PublicationYear":"2021","PublicationMonth":"02","PublicationDay":"09","URL":"https://medium.com/@alex.birsan/dependency-confusion-4a5d60fec610"},{"ExternalReferenceID":"REF-1170","Authors":["Microsoft"],"Title":"3 Ways to Mitigate Risk When Using Private Package Feeds","PublicationYear":"2021","PublicationMonth":"02","PublicationDay":"09","URL":"https://azure.microsoft.com/mediahandler/files/resourcefiles/3-ways-to-mitigate-risk-using-private-package-feeds/3%20Ways%20to%20Mitigate%20Risk%20When%20Using%20Private%20Package%20Feeds%20-%20v1.0.pdf"},{"ExternalReferenceID":"REF-1325","Title":"exec package - os/exec - Go Packages","PublicationYear":"2023","PublicationMonth":"04","PublicationDay":"04","URL":"https://pkg.go.dev/os/exec","URLDate":"2023-04-21"},{"ExternalReferenceID":"REF-1326","Authors":["Brian M. Carlson"],"Title":"Git LFS Changelog","PublicationYear":"2022","PublicationMonth":"04","PublicationDay":"19","URL":"https://github.com/git-lfs/git-lfs/commit/032dca8ee69c193208cd050024c27e82e11aef81","URLDate":"2023-04-21"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Relationship","Note":"Unlike untrusted search path (CWE-426), which inherently involves control over the definition of a control sphere (i.e., modification of a search path), this entry concerns a fixed control sphere in which some part of the sphere may be under attacker control (i.e., the search path cannot be modified by an attacker, but one element of the path can be under attacker control)."},{"Type":"Theoretical","Note":"This weakness is not a clean fit under CWE-668 or CWE-610, which suggests that the control sphere model might need enhancement or clarification."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Potential_Mitigations, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-07-27","ModificationComment":"updated Description, Maintenance_Notes, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Alternate_Terms, Applicable_Platforms, Description, Maintenance_Notes, Observed_Examples, References, Relationship_Notes, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-03-29","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Observed_Examples, Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-02-18","ModificationComment":"updated Demonstrative_Examples, Observed_Examples, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Alternate_Terms, Description, Maintenance_Notes, References, Theoretical_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description, Observed_Examples, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Demonstrative_Examples, Detection_Factors, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Observed_Examples"},{"Type":"Contribution","ContributionName":"Anonymous External Contributor","ContributionDate":"2022-05-24","ContributionComment":"provided observed examples and descriptions for Windows drive root","ContributionType":"Content"}]}