{"ID":"96","Name":"Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"94","ViewID":"1000","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"PHP","Prevalence":"Undetermined"},{"Type":"Language","Name":"Perl","Prevalence":"Undetermined"},{"Type":"Language","Class":"Interpreted","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation","Note":"REALIZATION: This weakness is caused during implementation of an architectural security tactic."},{"Phase":"Implementation","Note":"This issue is frequently found in PHP applications that allow users to set configuration variables that are stored within executable PHP files. Technically, this could also be performed in some compiled code (e.g., by byte-patching an executable), although it is highly unlikely."}],"CommonConsequences":[{"Scope":["Confidentiality"],"Impact":["Read Files or Directories","Read Application Data"],"Note":"The injected code could access restricted data / files."},{"Scope":["Access Control"],"Impact":["Bypass Protection Mechanism"],"Note":"In some cases, injectable code controls authentication; this may lead to a remote vulnerability."},{"Scope":["Access Control"],"Impact":["Gain Privileges or Assume Identity"],"Note":"Injected code can access resources that the attacker is directly prevented from accessing."},{"Scope":["Integrity","Confidentiality","Availability","Other"],"Impact":["Execute Unauthorized Code or Commands"],"Note":"Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code."},{"Scope":["Non-Repudiation"],"Impact":["Hide Activities"],"Note":"Often the actions performed by injected control code are unlogged."}],"PotentialMitigations":[{"MitigationID":"MIT-5","Phase":["Implementation"],"Strategy":"Input Validation","Description":"\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"},{"Phase":["Implementation"],"Strategy":"Output Encoding","Description":"Perform proper output validation and escaping to neutralize all code syntax from data written to code files."}],"DemonstrativeExamples":[{"ID":"DX-32","Entries":[{"IntroText":"This example attempts to write user messages to a message file and allow users to view them."},{"Nature":"Bad","Language":"PHP","ExampleCode":"```\n\t$MessageFile = \"messages.out\";\n\tif ($_GET[\"action\"] == \"NewMessage\") {\n\t\t$name = $_GET[\"name\"];\n\t\t$message = $_GET[\"message\"];\n\t\t$handle = fopen($MessageFile, \"a+\");\n\t\tfwrite($handle, \"\u003cb\u003e$name\u003c/b\u003e says '$message'\u003chr\u003e\\n\");\n\t\tfclose($handle);\n\t\techo \"Message Saved!\u003cp\u003e\\n\";\n\t}\n\telse if ($_GET[\"action\"] == \"ViewMessages\") {\n\t\tinclude($MessageFile);\n\t}\n```"},{"BodyText":"While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:"},{"Nature":"Attack","ExampleCode":"```\n\tname=h4x0r\n\tmessage=%3C?php%20system(%22/bin/ls%20-l%22);?%3E\n```"},{"BodyText":"which will decode to the following:"},{"Nature":"Attack","ExampleCode":"```\n\t\u003c?php system(\"/bin/ls -l\");?\u003e\n```"},{"BodyText":"The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages."},{"BodyText":"Notice that XSS (CWE-79) is also possible in this situation."}]}],"ObservedExamples":[{"Reference":"CVE-2002-0495","Description":"Perl code directly injected into CGI library file from parameters to another CGI program.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-0495"},{"Reference":"CVE-2005-1876","Description":"Direct PHP code injection into supporting template file.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1876"},{"Reference":"CVE-2005-1894","Description":"Direct code injection into PHP script that can be accessed by attacker.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1894"},{"Reference":"CVE-2003-0395","Description":"PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.","Link":"https://www.cve.org/CVERecord?id=CVE-2003-0395"},{"Reference":"CVE-2007-6652","Description":"chain: execution after redirect allows non-administrator to perform static code injection.","Link":"https://www.cve.org/CVERecord?id=CVE-2007-6652"}],"AffectedResources":["File or Directory"],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"Direct Static Code Injection"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP24","EntryName":"Tainted Input to Command"}],"RelatedAttackPatterns":["35","73","77","81","85"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Relationship","Note":"\"HTML injection\" (see CWE-79: XSS) could be thought of as an example of this, but the code is injected and executed on the client side, not the server side. Server-Side Includes (SSI) are an example of direct static code injection."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Potential_Mitigations, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Description, Name"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-04-05","ModificationComment":"updated Description, Name"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Common_Consequences, Demonstrative_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2013-02-21","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-06-23","ModificationComment":"updated Enabling_Factors_for_Exploitation, Other_Notes, Relationship_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-05-03","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Affected_Resources, Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Potential_Mitigations, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Modes_of_Introduction, Relationships, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Rename","PreviousEntryName":"Direct Static Code Injection","Date":"2008-04-11"},{"Type":"Rename","PreviousEntryName":"Insufficient Control of Directives in Statically Saved Code (Static Code Injection)","Date":"2009-05-27"},{"Type":"Rename","PreviousEntryName":"Improper Sanitization of Directives in Statically Saved Code ('Static Code Injection')","Date":"2010-04-05"}]}