{"ID":"113","Name":"Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","Abstraction":"Variant","Structure":"Simple","Status":"Incomplete","Description":"The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.","ExtendedDescription":"\n\n HTTP agents or components may include a web server, load balancer, reverse proxy, web caching proxy, application firewall, web browser, etc. Regardless of the role, they are expected to maintain coherent, consistent HTTP communication state across all components. However, including unexpected data in an HTTP header allows an attacker to specify the entirety of the HTTP message that is rendered by the client HTTP agent (e.g., web browser) or back-end HTTP agent (e.g., web server), whether the message is part of a request or a response. \n\n\nWhen an HTTP request contains unexpected CR and LF characters, the server may respond with an output stream that is interpreted as \"splitting\" the stream into two different HTTP messages instead of one. CR is carriage return, also given by %0d or \\r, and LF is line feed, also given by %0a or \\n.\n\n\nIn addition to CR and LF characters, other valid/RFC compliant special characters and unique character encodings can be utilized, such as HT (horizontal tab, also given by %09 or \\t) and SP (space, also given as + sign or %20).\n\n\nThese types of unvalidated and unexpected data in HTTP message headers allow an attacker to control the second \"split\" message to mount attacks such as server-side request forgery, cross-site scripting, and cache poisoning attacks.\n\n\nHTTP response splitting weaknesses may be present when:\n\n\n  1. Data enters a web application through an untrusted source, most frequently an HTTP request.\n\n  1. The data is included in an HTTP response header sent to a web user without neutralizing malicious characters that can be interpreted as separator characters for headers.\n\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"93","ViewID":"1000","Ordinal":"Primary"},{"Nature":"CanPrecede","CweID":"79","ViewID":"1000"},{"Nature":"ChildOf","CweID":"20","ViewID":"700","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"436","ViewID":"1000"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"Web Based","Prevalence":"Undetermined"}],"AlternateTerms":[{"Term":"HTTP Request Splitting"},{"Term":"HTTP Response Splitting"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Access Control"],"Impact":["Modify Application Data","Gain Privileges or Assume Identity"],"Note":"CR and LF characters in an HTTP header may give attackers control of the remaining headers and body of the message that the application intends to send/receive, as well as allowing them to create additional messages entirely under their control."}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Implementation"],"Strategy":"Input Validation","Description":"Construct HTTP headers very carefully, avoiding the use of non-validated input data."},{"MitigationID":"MIT-5","Phase":["Implementation"],"Strategy":"Input Validation","Description":"\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. If an input does not strictly conform to specifications, reject it or transform it into something that conforms.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"},{"MitigationID":"MIT-30","Phase":["Implementation"],"Strategy":"Output Encoding","Description":"Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component."},{"MitigationID":"MIT-20","Phase":["Implementation"],"Strategy":"Input Validation","Description":"Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}],"DemonstrativeExamples":[{"ID":"DX-224","Entries":[{"IntroText":"The following code segment reads the name of the author of a weblog entry, author, from an HTTP request and sets it in a cookie header of an HTTP response."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tString author = request.getParameter(AUTHOR_PARAM);\n\t...\n\tCookie cookie = new Cookie(\"author\", author);\n\tcookie.setMaxAge(cookieExpiration);\n\tresponse.addCookie(cookie);\n```"},{"BodyText":"Assuming a string consisting of standard alpha-numeric characters, such as \"Jane Smith\", is submitted in the request the HTTP response including this cookie might take the following form:"},{"Nature":"Result","ExampleCode":"```\n\tHTTP/1.1 200 OK\n\t...\n\tSet-Cookie: author=Jane Smith\n\t...\n```"},{"BodyText":"However, because the value of the cookie is composed of unvalidated user input, the response will only maintain this form if the value submitted for AUTHOR_PARAM does not contain any CR and LF characters. If an attacker submits a malicious string, such as"},{"Nature":"Attack","ExampleCode":"```\n\tWiley Hacker\\r\\nHTTP/1.1 200 OK\\r\\n\n```"},{"BodyText":"then the HTTP response would be split into two responses of the following form:"},{"Nature":"Result","ExampleCode":"```\n\tHTTP/1.1 200 OK\n\t...\n\tSet-Cookie: author=Wiley Hacker\n\tHTTP/1.1 200 OK\n\t...\n```"},{"BodyText":"The second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability to construct arbitrary HTTP responses permits a variety of resulting attacks, including:"},{"BodyText":"- cross-user defacement\n\n  - web and browser cache poisoning\n\n  - cross-site scripting\n\n  - page hijacking"}]},{"Entries":[{"IntroText":"An attacker can make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server."},{"BodyText":"Cross-User Defacement can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server.\n\n\n  -  In the best case, an attacker can leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. \n\n  -  In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker."}]},{"Entries":[{"IntroText":"The impact of a maliciously constructed response can be magnified if it is cached, either by a web cache used by multiple users or even the browser cache of a single user."},{"BodyText":"Cache Poisoning: if a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although the user of the local browser instance will be affected."}]},{"Entries":[{"IntroText":"Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users."},{"BodyText":"Cross-Site Scripting: cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser.\n\n\nThe variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\n\nThe most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account."}]},{"Entries":[{"IntroText":"In addition to using a vulnerable application to send malicious content to a user, the same weakness can also be leveraged to redirect sensitive content generated by the server to the attacker instead of the intended user."},{"BodyText":"Page Hijacking: by submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker can cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server to the attacker instead of the intended user.\n\n\nBecause the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim."}]}],"ObservedExamples":[{"Reference":"CVE-2020-15811","Description":"Chain: Proxy uses a substring search instead of parsing the Transfer-Encoding header (CWE-697), allowing request splitting (CWE-113) and cache poisoning","Link":"https://www.cve.org/CVERecord?id=CVE-2020-15811"},{"Reference":"CVE-2021-41084","Description":"Scala-based HTTP interface allows request splitting and response splitting through header names, header values, status reasons, and URIs","Link":"https://www.cve.org/CVERecord?id=CVE-2021-41084"},{"Reference":"CVE-2018-12116","Description":"Javascript-based framework allows request splitting through a path option of an HTTP request","Link":"https://www.cve.org/CVERecord?id=CVE-2018-12116"},{"Reference":"CVE-2004-2146","Description":"Application accepts CRLF in an object ID, allowing HTTP response splitting.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-2146"},{"Reference":"CVE-2004-1656","Description":"Shopping cart allows HTTP response splitting to perform HTML injection via CRLF in a parameter for a url","Link":"https://www.cve.org/CVERecord?id=CVE-2004-1656"},{"Reference":"CVE-2005-2060","Description":"Bulletin board allows response splitting via CRLF in parameter.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2060"},{"Reference":"CVE-2004-2512","Description":"Response splitting via CRLF in PHPSESSID.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-2512"},{"Reference":"CVE-2005-1951","Description":"e-commerce app allows HTTP response splitting using CRLF in object id parameters","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1951"}],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"HTTP response splitting"},{"TaxonomyName":"7 Pernicious Kingdoms","EntryName":"HTTP Response Splitting"},{"TaxonomyName":"WASC","EntryID":"25","EntryName":"HTTP Response Splitting"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP24","EntryName":"Tainted input to command"}],"RelatedAttackPatterns":["105","31","34","85"],"References":[{"ExternalReferenceID":"REF-43","Authors":["OWASP"],"Title":"OWASP TOP 10","PublicationYear":"2007","PublicationMonth":"05","PublicationDay":"18","URL":"https://github.com/owasp-top/owasp-top-2007"},{"ExternalReferenceID":"REF-44","Section":"\"Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and Response Splitting).\" Page 31","Authors":["Michael Howard","David LeBlanc","John Viega"],"Title":"24 Deadly Sins of Software Security","Publication":"McGraw-Hill","PublicationYear":"2010"},{"ExternalReferenceID":"REF-1272","Authors":["Robert Auger"],"Title":"HTTP Request Splitting","PublicationYear":"2011","PublicationMonth":"02","PublicationDay":"01","URL":"http://projects.webappsec.org/w/page/13246929/HTTP%20Request%20Splitting"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated References, Potential_Mitigations, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Relationships, Observed_Example, Other_Notes, References, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-10-14","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Description, Other_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-03-10","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Name"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-07-27","ModificationComment":"updated Demonstrative_Examples, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-10-29","ModificationComment":"updated Common_Consequences, Description, Other_Notes, Theoretical_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Description, Name"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-03-29","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Common_Consequences, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-06-23","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-05-03","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Applicable_Platforms, Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Applicable_Platforms, Potential_Mitigations, Relationships, Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"Extended the abstraction of this entry to include both HTTP request and response splitting.","ModificationVersion":"4.8","ModificationReleaseDate":"2022-06-28"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Alternate_Terms, Common_Consequences, Demonstrative_Examples, Description, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Theoretical_Notes","ModificationVersion":"4.8","ModificationReleaseDate":"2022-06-28"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Demonstrative_Examples, Related_Attack_Patterns","ModificationVersion":"4.9","ModificationReleaseDate":"2022-10-13"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description","ModificationVersion":"4.10","ModificationReleaseDate":"2023-01-31"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, References, Relationships","ModificationVersion":"4.11","ModificationReleaseDate":"2023-04-23"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-11-19","ModificationComment":"updated Demonstrative_Examples","ModificationVersion":"4.16","ModificationReleaseDate":"2024-11-19"},{"Type":"Contribution","ContributionName":"Jonathan Leitschuh","ContributionOrganization":"Dan Kaminsky Fellowship @ HUMAN Security","ContributionDate":"2022-02-25","ContributionComment":"Suggested a new entry for HTTP Request Splitting, leading to scope expansion for CWE-113","ContributionType":"Content","ContributionVersion":"4.9","ContributionReleaseDate":"2022-10-13"},{"Type":"Rename","PreviousEntryName":"HTTP Response Splitting","Date":"2008-04-11","Version":"Draft 9"},{"Type":"Rename","PreviousEntryName":"Failure to Sanitize CRLF Sequences in HTTP Headers (aka 'HTTP Response Splitting')","Date":"2009-05-27","Version":"1.4"},{"Type":"Rename","PreviousEntryName":"Failure to Sanitize CRLF Sequences in HTTP Headers ('HTTP Response Splitting')","Date":"2010-06-21","Version":"1.9"},{"Type":"Rename","PreviousEntryName":"Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')","Date":"2022-06-28","Version":"4.8"}]}