{"ID":"374","Name":"Passing Mutable Objects to an Untrusted Method","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"The product sends non-cloned mutable data as an argument to a method or function.","ExtendedDescription":"The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.","LikelihoodOfExploit":"Medium","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"668","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Undetermined"},{"Type":"Language","Name":"C++","Prevalence":"Undetermined"},{"Type":"Language","Name":"Java","Prevalence":"Undetermined"},{"Type":"Language","Name":"C#","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity"],"Impact":["Modify Memory"],"Note":"Potentially data could be tampered with by another function which should not have been tampered with."}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Pass in data which should not be altered as constant or immutable."},{"Phase":["Implementation"],"Description":"Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"The following example demonstrates the weakness."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tprivate:\n\t\tint foo;\n\t\tcomplexType bar;\n\t\tString baz;\n\t\totherClass externalClass;\n\tpublic:\n\t\tvoid doStuff() {\n\t\t\texternalClass.doOtherStuff(foo, bar, baz)\n\t\t}\n```"},{"BodyText":"In this example, bar and baz will be passed by reference to doOtherStuff() which may change them."}]},{"Entries":[{"IntroText":"In the following Java example, the BookStore class manages the sale of books in a bookstore, this class includes the member objects for the bookstore inventory and sales database manager classes. The BookStore class includes a method for updating the sales database and inventory when a book is sold. This method retrieves a Book object from the bookstore inventory object using the supplied ISBN number for the book class, then calls a method for the sales object to update the sales information and then calls a method for the inventory object to update inventory for the BookStore."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic class BookStore {\n\t\t\tprivate BookStoreInventory inventory;\n\t\t\tprivate SalesDBManager sales;\n\t\t\t...\n```\n// constructor for BookStore* \n\t\t\tpublic BookStore() {\n\t\t\t```\n\t\t\t\tthis.inventory = new BookStoreInventory();\n\t\t\t\tthis.sales = new SalesDBManager();\n\t\t\t\t...\n\t\t\t}\n\t\t\tpublic void updateSalesAndInventoryForBookSold(String bookISBN) {\n```\n// Get book object from inventory using ISBN* \n\t\t\t\t\tBook book = inventory.getBookWithISBN(bookISBN);\n\t\t\t\t\t\n\t\t\t\t\t *// update sales information for book sold* \n\t\t\t\t\tsales.updateSalesInformation(book);\n\t\t\t\t\t\n\t\t\t\t\t *// update inventory* \n\t\t\t\t\tinventory.updateInventory(book);}\n\t\t\t\n\t\t\t *// other BookStore methods* \n\t\t\t...}\n\tpublic class Book {\n\t```\n\t\tprivate String title;\n\t\tprivate String author;\n\t\tprivate String isbn;\n```\n// Book object constructors and get/set methods* \n\t\t...}"},{"BodyText":"However, in this example the Book object that is retrieved and passed to the method of the sales object could have its contents modified by the method. This could cause unexpected results when the book object is sent to the method for the inventory object to update the inventory."},{"BodyText":"In the Java programming language arguments to methods are passed by value, however in the case of objects a reference to the object is passed by value to the method. When an object reference is passed as a method argument a copy of the object reference is made within the method and therefore both references point to the same object. This allows the contents of the object to be modified by the method that holds the copy of the object reference. [REF-374]"},{"BodyText":"In this case the contents of the Book object could be modified by the method of the sales object prior to the call to update the inventory."},{"BodyText":"To prevent the contents of the Book object from being modified, a copy of the Book object should be made before the method call to the sales object. In the following example a copy of the Book object is made using the clone() method and the copy of the Book object is passed to the method of the sales object. This will prevent any changes being made to the original Book object."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\t...\n\tpublic void updateSalesAndInventoryForBookSold(String bookISBN) {\n```\n// Get book object from inventory using ISBN* \n\t\t\tBook book = inventory.getBookWithISBN(bookISBN);\n\t\t\t\n\t\t\t *// Create copy of book object to make sure contents are not changed* \n\t\t\tBook bookSold = (Book) book.clone();\n\t\t\t\n\t\t\t *// update sales information for book sold* \n\t\t\tsales.updateSalesInformation(bookSold);\n\t\t\t\n\t\t\t *// update inventory* \n\t\t\tinventory.updateInventory(book);}\n\t..."}]}],"TaxonomyMappings":[{"TaxonomyName":"CLASP","EntryName":"Passing mutable objects to an untrusted method"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"OBJ04-J","EntryName":"Provide mutable classes with copy functionality to safely allow passing instances to untrusted code"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP23","EntryName":"Exposed Data"}],"References":[{"ExternalReferenceID":"REF-18","Authors":["Secure Software, Inc."],"Title":"The CLASP Application Security Process","PublicationYear":"2005","URL":"https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf"},{"ExternalReferenceID":"REF-374","Authors":["Tony Sintes"],"Title":"Does Java pass by reference or pass by value?","Publication":"JavaWorld.com","PublicationYear":"2000","PublicationMonth":"05","PublicationDay":"26","URL":"https://web.archive.org/web/20000619025001/https://www.javaworld.com/javaworld/javaqa/2000-05/03-qa-0526-pass.html","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-375","Authors":["Herbert Schildt"],"Title":"Java: The Complete Reference, J2SE 5th Edition"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CLASP","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Name, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-12-13","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-06-23","ModificationComment":"updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Rename","PreviousEntryName":"Mutable Objects Passed by Reference","Date":"2010-06-21"}]}