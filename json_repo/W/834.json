{"ID":"834","Name":"Excessive Iteration","Abstraction":"Class","Structure":"Simple","Status":"Incomplete","Description":"The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.","ExtendedDescription":"If the iteration can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. In many cases, a loop does not need to be infinite in order to cause enough resource consumption to adversely affect the product or its host system; it depends on the amount of resources consumed per iteration.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"691","ViewID":"1000","Ordinal":"Primary"}],"CommonConsequences":[{"Scope":["Availability"],"Impact":["DoS: Resource Consumption (CPU)","DoS: Resource Consumption (Memory)","DoS: Amplification","DoS: Crash, Exit, or Restart"],"Note":"Excessive looping will cause unexpected consumption of resources, such as CPU cycles or memory. The product's operation may slow down, or cause a long time to respond. If limited resources such as memory are consumed for each iteration, the loop may eventually cause a crash or program exit due to exhaustion of resources, such as an out-of-memory error."}],"DetectionMethods":[{"Method":"Dynamic Analysis with Manual Results Interpretation","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer\n\t\tForced Path Execution","Effectiveness":"SOAR Partial"},{"Method":"Manual Static Analysis - Source Code","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)","Effectiveness":"SOAR Partial"},{"Method":"Automated Static Analysis - Source Code","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tContext-configured Source Code Weakness Analyzer","Effectiveness":"High"},{"Method":"Architecture or Design Review","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","Effectiveness":"High"}],"DemonstrativeExamples":[{"ID":"DX-204","Entries":[{"IntroText":"In this example a mistake exists in the code where the exit condition contained in flg is never called. This results in the function calling itself over and over again until the stack is exhausted."},{"Nature":"Bad","Language":"C","ExampleCode":"void do_something_recursive (int flg)\n {\n\n```\n\t ... // Do some real work here, but the value of flg is unmodified\n\t if (flg) { do_something_recursive (flg); } // flg is never modified so it is always TRUE - this call will continue until the stack explodes\n }\n int flag = 1; // Set to TRUE\n do_something_recursive (flag);\n```"},{"BodyText":"Note that the only difference between the Good and Bad examples is that the recursion flag will change value and cause the recursive call to return."},{"Nature":"Good","Language":"C","ExampleCode":"void do_something_recursive (int flg)\n {\n\n```\n\t ... // Do some real work here\n\t // Modify value of flg on done condition\n\t if (flg) { do_something_recursive (flg); } // returns when flg changes to 0\n }\n int flag = 1; // Set to TRUE\n do_something_recursive (flag);\n```"}]},{"ID":"DX-205","Entries":[{"IntroText":"For this example, the method isReorderNeeded is part of a bookstore application that determines if a particular book needs to be reordered based on the current inventory count and the rate at which the book is being sold."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic boolean isReorderNeeded(String bookISBN, int rateSold) {\n\t\t\tboolean isReorder = false;\n\t\t\tint minimumCount = 10;\n\t\t\tint days = 0;\n```\n// get inventory count for book* \n\t\t\tint inventoryCount = inventory.getIventoryCount(bookISBN);\n\t\t\t\n\t\t\t\n\t\t\t *// find number of days until inventory count reaches minimum* \n\t\t\twhile (inventoryCount \u003e minimumCount) {\n\t\t\t```\n\t\t\t\t\tinventoryCount = inventoryCount - rateSold;\n\t\t\t\t\tdays++;\n\t\t\t}\n```\n// if number of days within reorder timeframe* \n\t\t\t\n\t\t\t\n\t\t\t *// set reorder return boolean to true* \n\t\t\tif (days \u003e 0 \u0026\u0026 days \u003c 5) {\n\t\t\t```\n\t\t\t\tisReorder = true;\n\t\t\t}\n\t\t\treturn isReorder;\n\t}\n```"},{"BodyText":"However, the while loop will become an infinite loop if the rateSold input parameter has a value of zero since the inventoryCount will never fall below the minimumCount. In this case the input parameter should be validated to ensure that a value of zero does not cause an infinite loop, as in the following code."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tpublic boolean isReorderNeeded(String bookISBN, int rateSold) {\n\t\t\t...\n```\n// validate rateSold variable* \n\t\t\tif (rateSold \u003c 1) {\n\t\t\t```\n\t\t\t\treturn isReorder;\n\t\t\t}\n\t\t\t...\n\t}\n```"}]}],"ObservedExamples":[{"Reference":"CVE-2011-1027","Description":"Chain: off-by-one error (CWE-193) leads to infinite loop (CWE-835) using invalid hex-encoded characters.","Link":"https://www.cve.org/CVERecord?id=CVE-2011-1027"},{"Reference":"CVE-2006-6499","Description":"Chain: web browser crashes due to infinite loop - \"bad looping logic [that relies on] floating point math [CWE-1339] to exit the loop [CWE-835]\"","Link":"https://www.cve.org/CVERecord?id=CVE-2006-6499"}],"References":[{"ExternalReferenceID":"REF-62","Section":"Chapter 7, \"Looping Constructs\", Page 327","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"}],"MappingNotes":{"Usage":"Discouraged","Rationale":"This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate","Comments":"Examine children of this entry to see if there is a better fit","Reasons":["Abstraction"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2011-03-22","SubmissionVersion":"1.12","SubmissionReleaseDate":"2011-03-30"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Detection_Factors"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Relationships, Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Common_Consequences, Description, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Demonstrative_Examples, Mapping_Notes","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"}]}