{"ID":"390","Name":"Detection of Error Condition Without Action","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"The product detects a specific error, but takes no actions to handle the error.","LikelihoodOfExploit":"Medium","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"755","ViewID":"1000","Ordinal":"Primary"},{"Nature":"CanPrecede","CweID":"401","ViewID":"1000"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation","Note":"REALIZATION: This weakness is caused during implementation of an architectural security tactic."}],"CommonConsequences":[{"Scope":["Integrity","Other"],"Impact":["Varies by Context","Unexpected State","Alter Execution Logic"],"Note":"An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior."}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment."},{"Phase":["Implementation"],"Description":"If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program."},{"Phase":["Testing"],"Description":"Subject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing."}],"DemonstrativeExamples":[{"ID":"DX-201","Entries":[{"IntroText":"The following example attempts to allocate memory for a character. After the call to malloc, an if statement is used to check whether the malloc function failed."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tfoo=malloc(sizeof(char)); //the next line checks to see if malloc failed\n\tif (foo==NULL) {\n\t\t//We do nothing so we just ignore the error.\n\t}\n```"},{"BodyText":"The conditional successfully detects a NULL return value from malloc indicating a failure, however it does not do anything to handle the problem. Unhandled errors may have unexpected results and may cause the program to crash or terminate."},{"BodyText":"Instead, the if block should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following example notifies the user that the malloc function did not allocate the required memory resources and returns an error code."},{"Nature":"Good","Language":"C","ExampleCode":"```\n\tfoo=malloc(sizeof(char)); //the next line checks to see if malloc failed\n\tif (foo==NULL) {\n\t\tprintf(\"Malloc failed to allocate memory resources\");\n\t\treturn -1;\n\t}\n```"}]},{"Entries":[{"IntroText":"In the following C++ example the method readFile() will read the file whose name is provided in the input parameter and will return the contents of the file in char string. The method calls open() and read() may result in errors if the file does not exist or does not contain any data to read. These errors will be thrown when the is_open() method and good() method indicate errors opening or reading the file. However, these errors are not handled within the catch statement. Catch statements that do not perform any processing will have unexpected results. In this case an empty char string will be returned, and the file will not be properly closed."},{"Nature":"Bad","Language":"C++","ExampleCode":"```\n\tchar* readfile (char *filename) {\n\t\t\ttry {\n\t\t\t\t\t// open input file\n\t\t\t\t\tifstream infile;\n\t\t\t\t\tinfile.open(filename);\n\t\t\t\t\tif (!infile.is_open()) {\n\t\t\t\t\t\tthrow \"Unable to open file \" + filename;\n\t\t\t\t\t}\n\t\t\t\t\t// get length of file\n\t\t\t\t\tinfile.seekg (0, ios::end);\n\t\t\t\t\tint length = infile.tellg();\n\t\t\t\t\tinfile.seekg (0, ios::beg);\n\t\t\t\t\t// allocate memory\n\t\t\t\t\tchar *buffer = new char [length];\n\t\t\t\t\t// read data from file\n\t\t\t\t\tinfile.read (buffer,length);\n\t\t\t\t\tif (!infile.good()) {\n\t\t\t\t\t\tthrow \"Unable to read from file \" + filename;\n\t\t\t\t\t}\n\t\t\t\t\tinfile.close();\n\t\t\t\t\treturn buffer;\n\t\t\t}\n\t\t\tcatch (...) {\n\t\t\t\t/* bug: insert code to handle this later */\n\t\t\t}\n\t}\n```"},{"BodyText":"The catch statement should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following C++ example contains two catch statements. The first of these will catch a specific error thrown within the try block, and the second catch statement will catch all other errors from within the catch block. Both catch statements will notify the user that an error has occurred, close the file, and rethrow to the block that called the readFile() method for further handling or possible termination of the program."},{"Nature":"Good","Language":"C++","ExampleCode":"```\n\tchar* readFile (char *filename) {\n\t\t\ttry {\n\t\t\t\t\t// open input file\n\t\t\t\t\tifstream infile;\n\t\t\t\t\tinfile.open(filename);\n\t\t\t\t\tif (!infile.is_open()) {\n\t\t\t\t\t\tthrow \"Unable to open file \" + filename;\n\t\t\t\t\t}\n\t\t\t\t\t// get length of file\n\t\t\t\t\tinfile.seekg (0, ios::end);\n\t\t\t\t\tint length = infile.tellg();\n\t\t\t\t\tinfile.seekg (0, ios::beg);\n\t\t\t\t\t// allocate memory\n\t\t\t\t\tchar *buffer = new char [length];\n\t\t\t\t\t// read data from file\n\t\t\t\t\tinfile.read (buffer,length);\n\t\t\t\t\tif (!infile.good()) {\n\t\t\t\t\t\tthrow \"Unable to read from file \" + filename;\n\t\t\t\t\t}\n\t\t\t\t\tinfile.close();\n\t\t\t\t\treturn buffer;\n\t\t\t}\n\t\t\tcatch (char *str) {\n\t\t\t\tprintf(\"Error: %s \\n\", str);\n\t\t\t\tinfile.close();\n\t\t\t\tthrow str;\n\t\t\t}\n\t\t\tcatch (...) {\n\t\t\t\tprintf(\"Error occurred trying to read from file \\n\");\n\t\t\t\tinfile.close();\n\t\t\t\tthrow;\n\t\t\t}\n\t}\n```"}]},{"Entries":[{"IntroText":"In the following Java example the method readFile will read the file whose name is provided in the input parameter and will return the contents of the file in a String object. The constructor of the FileReader object and the read method call may throw exceptions and therefore must be within a try/catch block. While the catch statement in this example will catch thrown exceptions in order for the method to compile, no processing is performed to handle the thrown exceptions. Catch statements that do not perform any processing will have unexpected results. In this case, this will result in the return of a null String."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic String readFile(String filename) {\n\t\t\tString retString = null;\n\t\t\ttry {\n\t\t\t\t\t// initialize File and FileReader objects\n\t\t\t\t\tFile file = new File(filename);\n\t\t\t\t\tFileReader fr = new FileReader(file);\n\t\t\t\t\t// initialize character buffer\n\t\t\t\t\tlong fLen = file.length();\n\t\t\t\t\tchar[] cBuf = new char[(int) fLen];\n\t\t\t\t\t// read data from file\n\t\t\t\t\tint iRead = fr.read(cBuf, 0, (int) fLen);\n\t\t\t\t\t// close file\n\t\t\t\t\tfr.close();\n\t\t\t\t\tretString = new String(cBuf);\n\t\t\t} catch (Exception ex) {\n\t\t\t\t/* do nothing, but catch so it'll compile... */\n\t\t\t}\n\t\t\treturn retString;\n\t}\n```"},{"BodyText":"The catch statement should contain statements that either attempt to fix the problem, notify the user that an exception has been raised and continue processing, or perform some cleanup and gracefully terminate the program. The following Java example contains three catch statements. The first of these will catch the FileNotFoundException that may be thrown by the FileReader constructor called within the try/catch block. The second catch statement will catch the IOException that may be thrown by the read method called within the try/catch block. The third catch statement will catch all other exceptions thrown within the try block. For all catch statements the user is notified that the exception has been thrown and the exception is rethrown to the block that called the readFile() method for further processing or possible termination of the program. Note that with Java it is usually good practice to use the getMessage() method of the exception class to provide more information to the user about the exception raised."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tpublic String readFile(String filename) throws FileNotFoundException, IOException, Exception {\n\t\t\tString retString = null;\n\t\t\ttry {\n\t\t\t\t\t// initialize File and FileReader objects\n\t\t\t\t\tFile file = new File(filename);\n\t\t\t\t\tFileReader fr = new FileReader(file);\n\t\t\t\t\t// initialize character buffer\n\t\t\t\t\tlong fLen = file.length();\n\t\t\t\t\tchar [] cBuf = new char[(int) fLen];\n\t\t\t\t\t// read data from file\n\t\t\t\t\tint iRead = fr.read(cBuf, 0, (int) fLen);\n\t\t\t\t\t// close file\n\t\t\t\t\tfr.close();\n\t\t\t\t\tretString = new String(cBuf);\n\t\t\t} catch (FileNotFoundException ex) {\n\t\t\t\tSystem.err.println (\"Error: FileNotFoundException opening the input file: \" + filename );\n\t\t\t\tSystem.err.println (\"\" + ex.getMessage() );\n\t\t\t\tthrow new FileNotFoundException(ex.getMessage());\n\t\t\t} catch (IOException ex) {\n\t\t\t\tSystem.err.println(\"Error: IOException reading the input file.\\n\" + ex.getMessage() );\n\t\t\t\tthrow new IOException(ex);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tSystem.err.println(\"Error: Exception reading the input file.\\n\" + ex.getMessage() );\n\t\t\t\tthrow new Exception(ex);\n\t\t\t}\n\t\t\treturn retString;\n\t}\n```"}]}],"ObservedExamples":[{"Reference":"CVE-2022-21820","Description":"A GPU data center manager detects an error due to a malformed request but does not act on it, leading to memory corruption.","Link":"https://www.cve.org/CVERecord?id=CVE-2022-21820"}],"TaxonomyMappings":[{"TaxonomyName":"CLASP","EntryName":"Improper error handling"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"ERR00-J","EntryName":"Do not suppress or ignore checked exceptions"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP4","EntryName":"Unchecked Status Condition"}],"References":[{"ExternalReferenceID":"REF-18","Authors":["Secure Software, Inc."],"Title":"The CLASP Application Security Process","PublicationYear":"2005","URL":"https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf"},{"ExternalReferenceID":"REF-44","Section":"\"Sin 11: Failure to Handle Errors Correctly.\" Page 183","Authors":["Michael Howard","David LeBlanc","John Viega"],"Title":"24 Deadly Sins of Software Security","Publication":"McGraw-Hill","PublicationYear":"2010"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CLASP","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Relationships, Other_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-03-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-07-27","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Common_Consequences, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-02-18","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Applicable_Platforms, Modes_of_Introduction, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Related_Attack_Patterns, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated References, Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, Relationships, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Demonstrative_Examples","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"},{"Type":"Rename","PreviousEntryName":"Improper Error Handling","Date":"2008-04-11"}]}