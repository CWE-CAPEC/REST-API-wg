{"ID":"1189","Name":"Improper Isolation of Shared Resources on System-on-a-Chip (SoC)","Abstraction":"Base","Structure":"Simple","Status":"Stable","Description":"The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.","ExtendedDescription":"\n\nA System-On-a-Chip (SoC) has a lot of functionality, but it may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"653","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"668","ViewID":"1000"},{"Nature":"PeerOf","CweID":"1331","ViewID":"1000"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"System on Chip","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Access Control"],"Impact":["Bypass Protection Mechanism"],"Note":"If resources being used by a trusted user are shared with an untrusted user, the untrusted user may be able to modify the functionality of the shared resource of the trusted user."},{"Scope":["Integrity"],"Impact":["Quality Degradation"],"Note":"The functionality of the shared resource may be intentionally degraded."}],"DetectionMethods":[{"Method":"Automated Dynamic Analysis","Description":"\n\nPre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\n","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Strategy":"Separation of Privilege","Description":"\n\nWhen sharing resources, avoid mixing agents of varying trust levels.\n\n\nUntrusted agents should not share resources with trusted agents.\n"}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"Consider the following SoC design. The Hardware Root of Trust (HRoT) local SRAM is memory mapped in the core{0-N} address space. The HRoT allows or disallows access to private memory ranges, thus allowing the sram to function as a mailbox for communication between untrusted and trusted HRoT partitions."},{"BodyText":"We assume that the threat is from malicious software in the untrusted domain. We assume this software has access to the core{0-N} memory map and can be running at any privilege level on the untrusted cores. The capability of this threat in this example is communication to and from the mailbox region of SRAM modulated by the hrot_iface. To address this threat, information must not enter or exit the shared region of SRAM through hrot_iface when in secure or privileged mode."}]}],"ObservedExamples":[{"Reference":"CVE-2020-8698","Description":"Processor has improper isolation of shared resources allowing for information disclosure.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-8698"},{"Reference":"CVE-2019-6260","Description":"Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].","Link":"https://www.cve.org/CVERecord?id=CVE-2019-6260"}],"RelatedAttackPatterns":["124"],"References":[{"ExternalReferenceID":"REF-1036","Authors":["Ali Abbasi and Majid Hashemi"],"Title":"Ghost in the PLC Designing an Undetectable Programmable Logic Controller Rootkit via Pin Control Attack","PublicationYear":"2016","URL":"https://www.blackhat.com/docs/eu-16/materials/eu-16-Abbasi-Ghost-In-The-PLC-Designing-An-Undetectable-Programmable-Logic-Controller-Rootkit-wp.pdf"},{"ExternalReferenceID":"REF-1138","Authors":["Stewart Smith"],"Title":"CVE-2019-6260: Gaining control of BMC from the host processor","PublicationYear":"2019","URL":"https://www.flamingspork.com/blog/2019/01/23/cve-2019-6260:-gaining-control-of-bmc-from-the-host-processor/"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi","SubmissionOrganization":"Intel Corporation","SubmissionDate":"2019-10-15","SubmissionVersion":"4.0","SubmissionReleaseDate":"2020-02-24"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Common_Consequences, Description, Name, Potential_Mitigations, Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Description, Observed_Examples, References, Relationships, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Detection_Factors"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes, Relationships"},{"Type":"Contribution","ContributionOrganization":"Tortuga Logic","ContributionDate":"2021-07-16","ContributionComment":"Provided Demonstrative Example for Hardware Root of Trust","ContributionType":"Content"},{"Type":"Contribution","ContributionName":"Hareesh Khattri","ContributionOrganization":"Intel Corporation","ContributionDate":"2021-10-22","ContributionComment":"provided observed example","ContributionType":"Content"},{"Type":"Contribution","ContributionName":"Hareesh Khattri","ContributionOrganization":"Intel Corporation","ContributionDate":"2022-04-18","ContributionComment":"changed detection method","ContributionType":"Content"},{"Type":"Rename","PreviousEntryName":"Improper Isolation of Shared Resources on System-on-Chip (SoC)","Date":"2020-08-20"}]}