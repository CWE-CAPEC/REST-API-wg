{"ID":"413","Name":"Improper Resource Locking","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.","ExtendedDescription":"When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the product. This might violate the product's assumption that the resource will not change, potentially leading to unexpected behaviors.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"667","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Availability"],"Impact":["Modify Application Data","DoS: Instability","DoS: Crash, Exit, or Restart"]}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"Use a non-conflicting privilege scheme."},{"Phase":["Architecture and Design","Implementation"],"Description":"Use synchronization when locking a resource."}],"DemonstrativeExamples":[{"ID":"DX-24","Entries":[{"IntroText":"The following function attempts to acquire a lock in order to perform operations on a shared resource."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tvoid f(pthread_mutex_t *mutex) {\n\t\t\tpthread_mutex_lock(mutex);\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\tpthread_mutex_unlock(mutex);}"},{"BodyText":"However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior."},{"BodyText":"In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels."},{"Nature":"Good","Language":"C","ExampleCode":"```\n\tint f(pthread_mutex_t *mutex) {\n\t\t\tint result;\n\t\t\tresult = pthread_mutex_lock(mutex);\n\t\t\tif (0 != result)\n\t\t\t\treturn result;\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\treturn pthread_mutex_unlock(mutex);}"}]},{"Entries":[{"IntroText":"This Java example shows a simple BankAccount class with deposit and withdraw methods."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic class BankAccount {\n```\n// variable for bank account balance* \n\t\t\tprivate double accountBalance;\n\t\t\t\n\t\t\t\n\t\t\t *// constructor for BankAccount* \n\t\t\tpublic BankAccount() {\n\t\t\t```\n\t\t\t\taccountBalance = 0;\n\t\t\t}\n```\n// method to deposit amount into BankAccount* \n\t\t\tpublic void deposit(double depositAmount) {\n\t\t\t```\n\t\t\t\t\tdouble newBalance = accountBalance + depositAmount;\n\t\t\t\t\taccountBalance = newBalance;\n\t\t\t}\n```\n// method to withdraw amount from BankAccount* \n\t\t\tpublic void withdraw(double withdrawAmount) {\n\t\t\t```\n\t\t\t\t\tdouble newBalance = accountBalance - withdrawAmount;\n\t\t\t\t\taccountBalance = newBalance;\n\t\t\t}\n```\n// other methods for accessing the BankAccount object* \n\t\t\t...}"},{"BodyText":"However, the deposit and withdraw methods have shared access to the account balance private class variable. This can result in a race condition if multiple threads attempt to call the deposit and withdraw methods simultaneously where the account balance is modified by one thread before another thread has completed modifying the account balance. For example, if a thread attempts to withdraw funds using the withdraw method before another thread that is depositing funds using the deposit method completes the deposit then there may not be sufficient funds for the withdraw transaction."},{"BodyText":"To prevent multiple threads from having simultaneous access to the account balance variable the deposit and withdraw methods should be synchronized using the synchronized modifier."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tpublic class BankAccount {\n\t\t\t...\n```\n// synchronized method to deposit amount into BankAccount* \n\t\t\tpublic synchronized void deposit(double depositAmount) {\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n```\n// synchronized method to withdraw amount from BankAccount* \n\t\t\tpublic synchronized void withdraw(double withdrawAmount) {\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n\t\t\t...\n\t}\n```"},{"BodyText":"An alternative solution is to use a lock object to ensure exclusive access to the bank account balance variable. As shown below, the deposit and withdraw methods use the lock object to set a lock to block access to the BankAccount object from other threads until the method has completed updating the bank account balance variable."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tpublic class BankAccount {\n\t\t\t...\n```\n// lock object for thread access to methods* \n\t\t\tprivate ReentrantLock balanceChangeLock;\n\t\t\t\n\t\t\t\n\t\t\t *// condition object to temporarily release lock to other threads* \n\t\t\tprivate Condition sufficientFundsCondition;\n\t\t\t\n\t\t\t\n\t\t\t *// method to deposit amount into BankAccount* \n\t\t\tpublic void deposit(double amount) {\n\t\t\t```\n```\n// set lock to block access to BankAccount from other threads* \n\t\t\t\t\tbalanceChangeLock.lock();\n\t\t\t\t\ttry {\n\t\t\t\t\t```\n\t\t\t\t\t\t\tdouble newBalance = balance + amount;\n\t\t\t\t\t\t\tbalance = newBalance;\n```\n// inform other threads that funds are available* \n\t\t\t\t\t\t\tsufficientFundsCondition.signalAll();\n\t\t\t\t\t\t\t} catch (Exception e) {...}\n\t\t\t\t\tfinally {\n\t\t\t\t\t```\n\t\t\t\t\t\t// unlock lock object\n\t\t\t\t\t\tbalanceChangeLock.unlock();\n\t\t\t\t\t}\n\t\t\t}\n```\n// method to withdraw amount from bank account* \n\t\t\tpublic void withdraw(double amount) {\n\t\t\t```\n```\n// set lock to block access to BankAccount from other threads* \n\t\t\t\t\tbalanceChangeLock.lock();\n\t\t\t\t\ttry {\n\t\t\t\t\t```\n\t\t\t\t\t\t\twhile (balance \u003c amount) {\n```\n// temporarily unblock access* \n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t *// until sufficient funds are available* \n\t\t\t\t\t\t\t\t\tsufficientFundsCondition.await();}\n\t\t\t\t\t\t\tdouble newBalance = balance - amount;\n\t\t\t\t\t\t\tbalance = newBalance;\n\t\t\t\t\t\t\t} catch (Exception e) {...}\n\t\t\t\t\tfinally {\n\t\t\t\t\t```\n\t\t\t\t\t\t// unlock lock object\n\t\t\t\t\t\tbalanceChangeLock.unlock();\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t...\n\t}\n```"}]}],"ObservedExamples":[{"Reference":"CVE-2022-20141","Description":"Chain: an operating system kernel has insufficent resource locking (CWE-413) leading to a use after free (CWE-416).","Link":"https://www.cve.org/CVERecord?id=CVE-2022-20141"}],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"Insufficient Resource Locking"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"VNA00-J","EntryName":"Ensure visibility when accessing shared primitive variables"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"VNA02-J","EntryName":"Ensure that compound operations on shared variables are atomic"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"LCK00-J","EntryName":"Use private final lock objects to synchronize classes that may interact with untrusted code"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP19","EntryName":"Missing Lock"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Potential_Mitigations, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Description, Name"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-12-13","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Demonstrative_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Applicable_Platforms"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Observed_Examples"},{"Type":"Contribution","ContributionName":"Martin Sebor","ContributionOrganization":"Cisco Systems, Inc.","ContributionDate":"2010-04-30","ContributionComment":"Provided Demonstrative Example","ContributionType":"Content"},{"Type":"Rename","PreviousEntryName":"Insufficient Resource Locking","Date":"2010-09-27"}]}