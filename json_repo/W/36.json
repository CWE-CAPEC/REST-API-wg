{"ID":"36","Name":"Absolute Path Traversal","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.","ExtendedDescription":"This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"22","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"22","ViewID":"1305","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"22","ViewID":"1340","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Confidentiality","Availability"],"Impact":["Execute Unauthorized Code or Commands"],"Note":"The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries."},{"Scope":["Integrity"],"Impact":["Modify Files or Directories"],"Note":"The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication."},{"Scope":["Confidentiality"],"Impact":["Read Files or Directories"],"Note":"The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system."},{"Scope":["Availability"],"Impact":["DoS: Crash, Exit, or Restart"],"Note":"The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product."}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"DemonstrativeExamples":[{"ID":"DX-18","Entries":[{"IntroText":"In the example below, the path to a dictionary file is read from a system property and used to initialize a File object."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tString filename = System.getProperty(\"com.domain.application.dictionaryFile\");\n\tFile dictionaryFile = new File(filename);\n```"},{"BodyText":"However, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory."}]},{"ID":"DX-159","Entries":[{"IntroText":"This script intends to read a user-supplied file from the current directory. The user inputs the relative path to the file and the script uses Python's os.path.join() function to combine the path to the current working directory with the provided path to the specified file. This results in an absolute path to the desired file. If the file does not exist when the script attempts to read it, an error is printed to the user."},{"Nature":"Bad","Language":"Python","ExampleCode":"```\n\t import os\n\t import sys\n\t def main():\n\t\t filename = sys.argv[1]\n\t\t path = os.path.join(os.getcwd(), filename)\n\t\t try:\n\t\t\t with open(path, 'r') as f:\n\t\t\t\t file_data = f.read()\n\t\t except FileNotFoundError as e:\n\t\t\t print(\"Error - file not found\")\n\t main() \n```"},{"BodyText":"However, if the user supplies an absolute path, the os.path.join() function will discard the path to the current working directory and use only the absolute path provided. For example, if the current working directory is /home/user/documents, but the user inputs /etc/passwd, os.path.join() will use only /etc/passwd, as it is considered an absolute path. In the above scenario, this would cause the script to access and read the /etc/passwd file."},{"Nature":"Good","Language":"Python","ExampleCode":"```\n\t import os\n\t import sys\n\t def main():\n\t\t filename = sys.argv[1]\n\t\t path = os.path.normpath(f\"{os.getcwd()}{os.sep}{filename}\")\n\t\t if path.startswith(\"/home/cwe/documents/\"):\n\t\t\t try:\n\t\t\t\t with open(path, 'r') as f:\n\t\t\t\t\t file_data = f.read()\n\t\t\t except FileNotFoundError as e:\n\t\t\t\t print(\"Error - file not found\")\n\t main() \n```"},{"BodyText":"The constructed path string uses os.sep to add the appropriate separation character for the given operating system (e.g. '\\' or '/') and the call to os.path.normpath() removes any additional slashes that may have been entered - this may occur particularly when using a Windows path. The path is checked against an expected directory (/home/cwe/documents); otherwise, an attacker could provide relative path sequences like \"..\" to cause normpath() to generate paths that are outside the intended directory (CWE-23). By putting the pieces of the path string together in this fashion, the script avoids a call to os.path.join() and any potential issues that might arise if an absolute path is entered. With this version of the script, if the current working directory is /home/cwe/documents, and the user inputs /etc/passwd, the resulting path will be /home/cwe/documents/etc/passwd. The user is therefore contained within the current working directory as intended."}]}],"ObservedExamples":[{"Reference":"CVE-2022-31503","Description":"Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.","Link":"https://www.cve.org/CVERecord?id=CVE-2022-31503"},{"Reference":"CVE-2002-1345","Description":"Multiple FTP clients write arbitrary files via absolute paths in server responses","Link":"https://www.cve.org/CVERecord?id=CVE-2002-1345"},{"Reference":"CVE-2001-1269","Description":"ZIP file extractor allows full path","Link":"https://www.cve.org/CVERecord?id=CVE-2001-1269"},{"Reference":"CVE-2002-1818","Description":"Path traversal using absolute pathname","Link":"https://www.cve.org/CVERecord?id=CVE-2002-1818"},{"Reference":"CVE-2002-1913","Description":"Path traversal using absolute pathname","Link":"https://www.cve.org/CVERecord?id=CVE-2002-1913"},{"Reference":"CVE-2005-2147","Description":"Path traversal using absolute pathname","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2147"},{"Reference":"CVE-2000-0614","Description":"Arbitrary files may be overwritten via compressed attachments that specify absolute path names for the decompressed output.","Link":"https://www.cve.org/CVERecord?id=CVE-2000-0614"},{"Reference":"CVE-1999-1263","Description":"Mail client allows remote attackers to overwrite arbitrary files via an e-mail message containing a uuencoded attachment that specifies the full pathname for the file to be modified.","Link":"https://www.cve.org/CVERecord?id=CVE-1999-1263"},{"Reference":"CVE-2003-0753","Description":"Remote attackers can read arbitrary files via a full pathname to the target file in config parameter.","Link":"https://www.cve.org/CVERecord?id=CVE-2003-0753"},{"Reference":"CVE-2002-1525","Description":"Remote attackers can read arbitrary files via an absolute pathname.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-1525"},{"Reference":"CVE-2001-0038","Description":"Remote attackers can read arbitrary files by specifying the drive letter in the requested URL.","Link":"https://www.cve.org/CVERecord?id=CVE-2001-0038"},{"Reference":"CVE-2001-0255","Description":"FTP server allows remote attackers to list arbitrary directories by using the \"ls\" command and including the drive letter name (e.g. C:) in the requested pathname.","Link":"https://www.cve.org/CVERecord?id=CVE-2001-0255"},{"Reference":"CVE-2001-0933","Description":"FTP server allows remote attackers to list the contents of arbitrary drives via a ls command that includes the drive letter as an argument.","Link":"https://www.cve.org/CVERecord?id=CVE-2001-0933"},{"Reference":"CVE-2002-0466","Description":"Server allows remote attackers to browse arbitrary directories via a full pathname in the arguments to certain dynamic pages.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-0466"},{"Reference":"CVE-2002-1483","Description":"Remote attackers can read arbitrary files via an HTTP request whose argument is a filename of the form \"C:\" (Drive letter), \"//absolute/path\", or \"..\" .","Link":"https://www.cve.org/CVERecord?id=CVE-2002-1483"},{"Reference":"CVE-2004-2488","Description":"FTP server read/access arbitrary files using \"C:\\\" filenames","Link":"https://www.cve.org/CVERecord?id=CVE-2004-2488"},{"Reference":"CVE-2001-0687","Description":"FTP server allows a remote attacker to retrieve privileged web server system information by specifying arbitrary paths in the UNC format (\\\\computername\\sharename).","Link":"https://www.cve.org/CVERecord?id=CVE-2001-0687"}],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"Absolute Path Traversal"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP16","EntryName":"Path Traversal"}],"RelatedAttackPatterns":["597"],"References":[{"ExternalReferenceID":"REF-62","Section":"Chapter 9, \"Filenames and Paths\", Page 503","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"},{"ExternalReferenceID":"REF-1448","Authors":["Cybersecurity and Infrastructure Security Agency"],"Title":"Secure by Design Alert: Eliminating Directory Traversal Vulnerabilities in Software","PublicationYear":"2024","PublicationMonth":"05","PublicationDay":"02","URL":"https://www.cisa.gov/resources-tools/resources/secure-design-alert-eliminating-directory-traversal-vulnerabilities-software","URLDate":"2024-07-14"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Sean Eidemiller","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"added/updated demonstrative examples"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-10-14","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Demonstrative_Examples, Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-01-19","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Applicable_Platforms"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Common_Consequences, Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Demonstrative_Examples, Detection_Factors, Relationships, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-07-16","ModificationComment":"updated References","ModificationVersion":"4.15","ModificationReleaseDate":"2024-07-16"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-11-19","ModificationComment":"updated Demonstrative_Examples","ModificationVersion":"4.16","ModificationReleaseDate":"2024-11-19"}]}