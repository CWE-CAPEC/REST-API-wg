{"ID":"749","Name":"Exposed Dangerous Method or Function","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.","ExtendedDescription":"\n\nThis weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on.\n\n\nThe exposure can occur in a few different ways:\n\n\n  - The function/method was never intended to be exposed to outside actors.\n\n  - The function/method was only intended to be accessible to a limited set of actors, such as Internet-based access from a single web site.\n\n","LikelihoodOfExploit":"Low","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"284","ViewID":"1000","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Confidentiality","Availability","Access Control","Other"],"Impact":["Gain Privileges or Assume Identity","Read Application Data","Modify Application Data","Execute Unauthorized Code or Commands","Other"],"Note":"Exposing critical functionality essentially provides an attacker with the privilege level of the exposed functionality. This could result in the modification or exposure of sensitive data or possibly even execution of arbitrary code."}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities."},{"Phase":["Architecture and Design","Implementation"],"Strategy":"Attack Surface Reduction","Description":"\n\nIdentify all exposed functionality. Explicitly list all functionality that must be exposed to some user or set of users. Identify which functionality may be:\n\n\n  - accessible to all users\n\n  - restricted to a small set of privileged users\n\n  - prevented from being directly accessible at all\n\nEnsure that the implemented code follows these expectations. This includes setting the appropriate access modifiers where applicable (public, private, protected, etc.) or not marking ActiveX controls safe-for-scripting."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"In the following Java example the method removeDatabase will delete the database with the name specified in the input parameter."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic void removeDatabase(String databaseName) {\n\t\t\ttry {\n\t\t\t\t\tStatement stmt = conn.createStatement();\n\t\t\t\t\tstmt.execute(\"DROP DATABASE \" + databaseName);\n\t\t\t} catch (SQLException ex) {...}\n\t}\n```"},{"BodyText":"The method in this example is declared public and therefore is exposed to any class in the application. Deleting a database should be considered a critical operation within an application and access to this potentially dangerous method should be restricted. Within Java this can be accomplished simply by declaring the method private thereby exposing it only to the enclosing class as in the following example."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tprivate void removeDatabase(String databaseName) {\n\t\t\ttry {\n\t\t\t\t\tStatement stmt = conn.createStatement();\n\t\t\t\t\tstmt.execute(\"DROP DATABASE \" + databaseName);\n\t\t\t} catch (SQLException ex) {...}\n\t\t\t}\n```"}]},{"ID":"DX-109","Entries":[{"IntroText":"These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:"},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n```\n// Android* \n\t@Override\n\tpublic boolean shouldOverrideUrlLoading(WebView view, String url){\n\t```\n\t\t\tif (url.substring(0,14).equalsIgnoreCase(\"examplescheme:\")){\n\t\t\t\tif(url.substring(14,25).equalsIgnoreCase(\"getUserInfo\")){\n\t\t\t\t\twriteDataToView(view, UserData);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t}\n```"},{"Nature":"Bad","Language":"Objective-C","ExampleCode":"```\n```\n// iOS* \n\t-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType\n\t{\n\t```\n\t\t\tNSURL *URL = [exRequest URL];\n\t\t\tif ([[URL scheme] isEqualToString:@\"exampleScheme\"])\n\t\t\t{\n\t\t\t\t\tNSString *functionString = [URL resourceSpecifier];\n\t\t\t\t\tif ([functionString hasPrefix:@\"specialFunction\"])\n\t\t\t\t\t{\n```\n// Make data available back in webview.* \n\t\t\t\t\t\t\tUIWebView *webView = [self writeDataToView:[URL query]];}\n\t\t\t\t\treturn NO;}\n\t\t\treturn YES;}"},{"BodyText":"A call into native code can then be initiated by passing parameters within the URL:"},{"Nature":"Attack","Language":"JavaScript","ExampleCode":"```\n\twindow.location = examplescheme://method?parameter=value\n```"},{"BodyText":"Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site."}]},{"Entries":[{"IntroText":"This application uses a WebView to display websites, and creates a Javascript interface to a Java object to allow enhanced functionality on a trusted website:"},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic class WebViewGUI extends Activity {\n\t\t\tWebView mainWebView;\n\t\t\tpublic void onCreate(Bundle savedInstanceState) {\n\t\t\t\tsuper.onCreate(savedInstanceState);\n\t\t\t\tmainWebView = new WebView(this);\n\t\t\t\tmainWebView.getSettings().setJavaScriptEnabled(true);\n\t\t\t\tmainWebView.addJavascriptInterface(new JavaScriptInterface(), \"userInfoObject\");\n\t\t\t\tmainWebView.loadUrl(\"file:///android_asset/www/index.html\");\n\t\t\t\tsetContentView(mainWebView);\n\t\t\t}\n\t\t\tfinal class JavaScriptInterface {\n\t\t\t\t\tJavaScriptInterface () {}\n\t\t\t\t\tpublic String getUserInfo() {\n\t\t\t\t\t\treturn currentUser.Info();\n\t\t\t\t\t}\n\t\t\t}\n\t}\n```"},{"BodyText":"Before Android 4.2 all methods, including inherited ones, are exposed to Javascript when using addJavascriptInterface(). This means that a malicious website loaded within this WebView can use reflection to acquire a reference to arbitrary Java objects. This will allow the website code to perform any action the parent application is authorized to."},{"BodyText":"For example, if the application has permission to send text messages:"},{"Nature":"Attack","Language":"JavaScript","ExampleCode":"```\n\t\u003cscript\u003e\n\t\tuserInfoObject.getClass().forName('android.telephony.SmsManager').getMethod('getDefault',null).sendTextMessage(attackNumber, null, attackMessage, null, null);\n\t\u003c/script\u003e\n```"},{"BodyText":"This malicious script can use the userInfoObject object to load the SmsManager object and send arbitrary text messages to any recipient."}]},{"Entries":[{"IntroText":"After Android 4.2, only methods annotated with @JavascriptInterface are available in JavaScript, protecting usage of getClass() by default, as in this example:"},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tfinal class JavaScriptInterface {\n\t\t\tJavaScriptInterface () { }\n\t\t\t@JavascriptInterface\n\t\t\tpublic String getUserInfo() {\n\t\t\t\treturn currentUser.Info();\n\t\t\t}\n\t}\n```"},{"BodyText":"This code is not vulnerable to the above attack, but still may expose user info to malicious pages loaded in the WebView. Even malicious iframes loaded within a trusted page may access the exposed interface:"},{"Nature":"Attack","Language":"JavaScript","ExampleCode":"```\n\t\u003cscript\u003e\n\t\tvar info = window.userInfoObject.getUserInfo();\n\t\tsendUserInfo(info);\n\t\u003c/script\u003e\n```"},{"BodyText":"This malicious code within an iframe is able to access the interface object and steal the user's data."}]}],"ObservedExamples":[{"Reference":"CVE-2007-6382","Description":"arbitrary Java code execution via exposed method","Link":"https://www.cve.org/CVERecord?id=CVE-2007-6382"},{"Reference":"CVE-2007-1112","Description":"security tool ActiveX control allows download or upload of files","Link":"https://www.cve.org/CVERecord?id=CVE-2007-1112"}],"RelatedAttackPatterns":["500"],"References":[{"ExternalReferenceID":"REF-503","Authors":["Microsoft"],"Title":"Developing Secure ActiveX Controls","PublicationYear":"2005","PublicationMonth":"04","PublicationDay":"13","URL":"https://learn.microsoft.com/en-us/previous-versions//ms533046(v=vs.85)?redirectedfrom=MSDN","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-510","Authors":["Microsoft"],"Title":"How to stop an ActiveX control from running in Internet Explorer","URL":"https://support.microsoft.com/en-us/help/240797/how-to-stop-an-activex-control-from-running-in-internet-explorer","URLDate":"2023-04-07"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Research Gap","Note":"Under-reported and under-studied. This weakness could appear in any technology, language, or framework that allows the programmer to provide a functional interface to external parties, but it is not heavily reported. In 2007, CVE began showing a notable increase in reports of exposed method vulnerabilities in ActiveX applications, as well as IOCTL access to OS-level resources. These weaknesses have been documented for Java applications in various secure programming sources, but there are few reports in CVE, which suggests limited awareness in most parts of the vulnerability research community."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2008-11-24","SubmissionVersion":"1.1","SubmissionReleaseDate":"2008-11-24"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-01-12","ModificationComment":"updated Name"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-07-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-12-28","ModificationComment":"updated Applicable_Platforms, Likelihood_of_Exploit"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Common_Consequences, Demonstrative_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-04-05","ModificationComment":"updated Demonstrative_Examples, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-02-18","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Likelihood_of_Exploit, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description, Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Rename","PreviousEntryName":"Exposed Insecure Method or Function","Date":"2009-01-12"}]}