{"ID":"80","Name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","Abstraction":"Variant","Structure":"Simple","Status":"Incomplete","Description":"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"\u003c\", \"\u003e\", and \"\u0026\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.","ExtendedDescription":"This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user.","LikelihoodOfExploit":"High","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"79","ViewID":"1000","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Confidentiality","Integrity","Availability"],"Impact":["Read Application Data","Execute Unauthorized Code or Commands"]}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended."},{"MitigationID":"MIT-30.1","Phase":["Implementation"],"Strategy":"Output Encoding","Description":"\n\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\n\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\n"},{"MitigationID":"MIT-43","Phase":["Implementation"],"Description":"With Struts, write all data from form beans with the bean's filter attribute set to true."},{"MitigationID":"MIT-31","Phase":["Implementation"],"Strategy":"Attack Surface Reduction","Description":"To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.","Effectiveness":"Defense in Depth"}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"In the following example, a guestbook comment isn't properly encoded, filtered, or otherwise neutralized for script-related tags before being displayed in a client browser."},{"Nature":"Bad","Language":"JSP","ExampleCode":"```\n\t\u003c% for (Iterator i = guestbook.iterator(); i.hasNext(); ) {\n\t\tEntry e = (Entry) i.next(); %\u003e\n\t\t\u003cp\u003eEntry #\u003c%= e.getId() %\u003e\u003c/p\u003e\n\t\t\u003cp\u003e\u003c%= e.getText() %\u003e\u003c/p\u003e\n\t\t\u003c%\n\t\t} %\u003e\n```"}]}],"ObservedExamples":[{"Reference":"CVE-2002-0938","Description":"XSS in parameter in a link.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-0938"},{"Reference":"CVE-2002-1495","Description":"XSS in web-based email product via attachment filenames.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-1495"},{"Reference":"CVE-2003-1136","Description":"HTML injection in posted message.","Link":"https://www.cve.org/CVERecord?id=CVE-2003-1136"},{"Reference":"CVE-2004-2171","Description":"XSS not quoted in error page.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-2171"}],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"Basic XSS"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP24","EntryName":"Tainted input to command"}],"RelatedAttackPatterns":["18","193","32","86"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Sean Eidemiller","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"added/updated demonstrative examples"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationOrganization":"KDM Analytics","ModificationDate":"2008-08-01","ModificationComment":"added/updated white box definitions"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Relationships, Taxonomy_Mappings, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-10-14","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Demonstrative_Examples, Description, Name"},{"Type":"Modification","ModificationName":"KDM Analytics","ModificationDate":"2009-07-17","ModificationComment":"Improved the White_Box_Definition"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-07-27","ModificationComment":"updated White_Box_Definitions"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Demonstrative_Examples, Description, Name, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-03-29","ModificationComment":"updated Description, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-05-03","ModificationComment":"updated Potential_Mitigations, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Relationships, White_Box_Definitions"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Rename","PreviousEntryName":"Basic XSS","Date":"2008-04-11"},{"Type":"Rename","PreviousEntryName":"Failure to Sanitize Script-Related HTML Tags in a Web Page (Basic XSS)","Date":"2009-05-27"},{"Type":"Rename","PreviousEntryName":"Improper Sanitization of Script-Related HTML Tags in a Web Page (Basic XSS)","Date":"2010-06-21"}]}