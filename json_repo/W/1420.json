{"ID":"1420","Name":"Exposure of Sensitive Information during Transient Execution","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"A processor event or prediction may allow incorrect operations (or correct operations with incorrect data) to execute transiently, potentially exposing data over a covert channel.","ExtendedDescription":"\n\nWhen operations execute but do not commit to the processor's architectural state, this is commonly referred to as transient execution. This behavior can occur when the processor mis-predicts an outcome (such as a branch target), or when a processor event (such as an exception or microcode assist, etc.) is handled after younger operations have already executed. Operations that execute transiently may exhibit observable discrepancies (CWE-203) in covert channels [REF-1400] such as data caches. Observable discrepancies of this kind can be detected and analyzed using timing or power analysis techniques, which may allow an attacker to infer information about the operations that executed transiently. For example, the attacker may be able to infer confidential data that was accessed or used by those operations.\n\n\nTransient execution weaknesses may be exploited using one of two methods. In the first method, the attacker generates a code sequence that exposes data through a covert channel when it is executed transiently (the attacker must also be able to trigger transient execution). Some transient execution weaknesses can only expose data that is accessible within the attacker's processor context. For example, an attacker executing code in a software sandbox may be able to use a transient execution weakness to expose data within the same address space, but outside of the attacker's sandbox. Other transient execution weaknesses can expose data that is architecturally inaccessible, that is, data protected by hardware-enforced boundaries such as page tables or privilege rings. These weaknesses are the subject of CWE-1421.\n\n\nIn the second exploitation method, the attacker first identifies a code sequence in a victim program that, when executed transiently, can expose data that is architecturally accessible within the victim's processor context. For instance, the attacker may search the victim program for code sequences that resemble a bounds-check bypass sequence (see Demonstrative Example 1). If the attacker can trigger a mis-prediction of the conditional branch and influence the index of the out-of-bounds array access, then the attacker may be able to infer the value of out-of-bounds data by monitoring observable discrepancies in a covert channel.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"669","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"Not Technology-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design","Note":"This weakness can be introduced when a computing unit (such as a CPU, GPU, accelerator, or any other processor) uses out-of-order execution, speculation, or any other microarchitectural feature that can allow microarchitectural operations to execute without committing to architectural state."},{"Phase":"Implementation","Note":"This weakness can be introduced when sandboxes or managed runtimes are not properly isolated by using hardware-enforced boundaries. Developers of sandbox or managed runtime software should exercise caution when relying on software techniques (such as bounds checking) to prevent code in one sandbox from accessing confidential data in another sandbox. For example, an attacker sandbox may be able to trigger a processor event or mis-prediction in a manner that allows it to transiently read a victim sandbox's private data."}],"CommonConsequences":[{"Scope":["Confidentiality"],"Impact":["Read Memory"],"Likelihood":["Medium"]}],"DetectionMethods":[{"Method":"Manual Analysis","Description":"\n\nThis weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by exhaustively analyzing a processor's machine clear (or nuke) conditions ([REF-1427]).\n","Effectiveness":"Moderate","EffectivenessNotes":"\n\nHardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.\n\n\nManual analysis may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage.\n"},{"Method":"Fuzzing","Description":"\n\nAcademic researchers have demonstrated that this weakness can be detected in hardware using software fuzzing tools that treat the underlying hardware as a black box ([REF-1428]).\n","Effectiveness":"Opportunistic","EffectivenessNotes":"\n\nFuzzing may not reveal all weaknesses in a processor specification and should be combined with other detection methods to improve coverage.\n"},{"Method":"Fuzzing","Description":"\n\nAcademic researchers have demonstrated that this weakness can be detected in software using software fuzzing tools ([REF-1429]).\n","Effectiveness":"Opportunistic","EffectivenessNotes":"\n\nAt the time of this writing, publicly available software fuzzing tools can only detect a subset of transient execution weaknesses in software (for example, [REF-1429] can only detect instances of Spectre v1) and may produce false positives.\n"},{"Method":"Automated Static Analysis","Description":"\n\nA variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\n","Effectiveness":"Limited","EffectivenessNotes":"\n\nAt the time of this writing, publicly available software static analysis tools can only detect a subset of transient execution weaknesses in software and may produce false positives.\n"},{"Method":"Automated Analysis","Description":"\n\nSoftware vendors can release tools that detect presence of known weaknesses on a processor. For example, some of these tools can attempt to transiently execute a vulnerable code sequence and detect whether code successfully leaks data in a manner consistent with the weakness under test. Alternatively, some hardware vendors provide enumeration for the presence of a weakness (or lack of a weakness). These enumeration bits can be checked and reported by system software. For example, Linux supports these checks for many commodity processors:\n\n\n$ cat /proc/cpuinfo | grep bugs | head -n 1\n\n\nbugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed\n","Effectiveness":"High","EffectivenessNotes":"\n\nThis method can be useful for detecting whether a processor is affected by known weaknesses, but it may not be useful for detecting unknown weaknesses.\n"}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.","Effectiveness":"Limited","EffectivenessNotes":"\n\nThis technique has many pitfalls. For example, InvisiSpec was an early attempt to mitigate this weakness by blocking \"micro-architectural covert and side channels through the multiprocessor data cache hierarchy due to speculative loads\" [REF-1417]. Commodity processors and SoCs have many covert and side channels that exist outside of the data cache hierarchy. Even when some of these channels are blocked, others (such as execution ports [REF-1418]) may allow an attacker to infer confidential data. Mitigation strategies that attempt to prevent transient execution from causing observable discrepancies also have other pitfalls, for example, see [REF-1419].\n"},{"Phase":["Requirements"],"Description":"\n\nProcessor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.\n","Effectiveness":"Moderate","EffectivenessNotes":"\n\nInstructions or features that constrain transient execution or suppress its side effects may impact performance.\n"},{"Phase":["Requirements"],"Description":"\n\nProcessor designers may expose registers (for example, control registers or model-specific registers) that allow privileged and/or user software to disable specific predictors or other hardware features that can cause confidential data to be exposed during transient execution.\n","Effectiveness":"Limited","EffectivenessNotes":"\n\nDisabling specific predictors or other hardware features may result in significant performance overhead.\n"},{"Phase":["Requirements"],"Description":"\n\nProcessor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.\n","Effectiveness":"Defense in Depth","EffectivenessNotes":"\n\nSpecific software algorithms can be used by an attacker to compensate for a lack of a high-resolution time source [REF-1420].\n"},{"Phase":["Build and Compilation"],"Description":"\n\nIsolate sandboxes or managed runtimes in separate address spaces (separate processes). For examples, see [REF-1421].\n","Effectiveness":"High"},{"Phase":["Build and Compilation"],"Description":"\n\nInclude serialization instructions (for example, LFENCE) that prevent processor events or mis-predictions prior to the serialization instruction from causing transient execution after the serialization instruction. For some weaknesses, a serialization instruction can also prevent a processor event or a mis-prediction from occurring after the serialization instruction (for example, CVE-2018-3639 can allow a processor to predict that a load will not depend on an older store; a serialization instruction between the store and the load may allow the store to update memory and prevent the prediction from happening at all).\n","Effectiveness":"Moderate","EffectivenessNotes":"\n\nWhen used to comprehensively mitigate a transient execution weakness (for example, by inserting an LFENCE after every instruction in a program), serialization instructions can introduce significant performance overhead. On the other hand, when used to mitigate only a relatively small number of high-risk code sequences, serialization instructions may have a low or negligible impact on performance.\n"},{"Phase":["Build and Compilation"],"Description":"\n\nUse control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.\n","Effectiveness":"Moderate","EffectivenessNotes":"\n\nSome CFI techniques may not be able to constrain transient execution, even though they are effective at constraining architectural execution. Or they may be able to provide some additional protection against a transient execution weakness, but without comprehensively mitigating the weakness. For example, Clang-CFI provides strong architectural CFI properties and can make some transient execution weaknesses more difficult to exploit [REF-1398].\n"},{"Phase":["Build and Compilation"],"Description":"\n\nIf the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated, and instead generate an alternate sequence of instructions that is not affected by the weakness. One prominent example of this mitigation is retpoline ([REF-1414]).\n","Effectiveness":"Limited","EffectivenessNotes":"\n\nThis technique may only be effective for software that is compiled with this mitigation. For some transient execution weaknesses, this technique may not be sufficient to protect software that is compiled without the affected instruction(s). For example, see CWE-1421.\n"},{"Phase":["Build and Compilation"],"Description":"\n\nUse software techniques that can mitigate the consequences of transient execution. For example, address masking can be used in some circumstances to prevent out-of-bounds transient reads.\n","Effectiveness":"Limited","EffectivenessNotes":"\n\nAddress masking and related software mitigation techniques have been used to harden specific code sequences that could potentially be exploited via transient execution. For example, the Linux kernel makes limited use of manually inserted address masks to mitigate bounds-check bypass [REF-1390]. Compiler-based techniques have also been used to automatically harden software [REF-1425].\n"},{"Phase":["Build and Compilation"],"Description":"\n\nUse software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.\n","Effectiveness":"Incidental","EffectivenessNotes":"\n\nSome transient execution weaknesses can be exploited even if a single instruction is executed transiently after a processor event or mis-prediction. This mitigation strategy has many other pitfalls that prevent it from eliminating this weakness entirely. For example, see [REF-1389].\n"},{"Phase":["Documentation"],"Description":"\n\nIf a hardware feature can allow incorrect operations (or correct operations with incorrect data) to execute transiently, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.\n","Effectiveness":"High"}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"Secure programs perform bounds checking before accessing an array if the source of the array index is provided by an untrusted source such as user input. In the code below, data from array1 will not be accessed if x is out of bounds. The following code snippet is from [REF-1415]:"},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tif (x \u003c array1_size)\n\t\ty = array2[array1[x] * 4096];\n```"},{"BodyText":"However, if this code executes on a processor that performs conditional branch prediction the outcome of the if statement could be mis-predicted and the access on the next line will occur with a value of x that can point to an out-of-bounds location (within the program's memory).\n\n\nEven though the processor does not commit the architectural effects of the mis-predicted branch, the memory accesses alter data cache state, which is not rolled back after the branch is resolved. The cache state can reveal array1[x] thereby providing a mechanism to recover the data value located at address array1 + x."}]},{"Entries":[{"IntroText":"Some managed runtimes or just-in-time (JIT) compilers may overwrite recently executed code with new code. When the instruction pointer enters the new code, the processor may inadvertently execute the stale code that had been overwritten. This can happen, for instance, when the processor issues a store that overwrites a sequence of code, but the processor fetches and executes the (stale) code before the store updates memory. Similar to the first example, the processor does not commit the stale code's architectural effects, though microarchitectural side effects can persist. Hence, confidential information accessed or used by the stale code may be inferred via an observable discrepancy in a covert channel. This vulnerability is described in more detail in [REF-1427]."}]}],"ObservedExamples":[{"Reference":"CVE-2017-5753","Description":"Microarchitectural conditional branch predictors may allow operations to execute transiently after a misprediction, potentially exposing data over a covert channel.","Link":"https://www.cve.org/CVERecord?id=CVE-2017-5753"},{"Reference":"CVE-2021-0089","Description":"A machine clear triggered by self-modifying code may allow incorrect operations to execute transiently, potentially exposing data over a covert channel.","Link":"https://www.cve.org/CVERecord?id=CVE-2021-0089"},{"Reference":"CVE-2022-0002","Description":"Microarchitectural indirect branch predictors may allow incorrect operations to execute transiently after a misprediction, potentially exposing data over a covert channel.","Link":"https://www.cve.org/CVERecord?id=CVE-2022-0002"}],"References":[{"ExternalReferenceID":"REF-1389","Authors":["Alyssa Milburn","Ke Sun","Henrique Kawakami"],"Title":"You Cannot Always Win the Race: Analyzing the LFENCE/JMP Mitigation for Branch Target Injection","PublicationYear":"2022","PublicationMonth":"03","PublicationDay":"08","URL":"https://arxiv.org/abs/2203.04277","URLDate":"2024-02-22"},{"ExternalReferenceID":"REF-1417","Authors":["Mengjia Yan","Jiho Choi","Dimitrios Skarlatos","Adam Morrison","Christopher W. Fletcher","Josep Torrella"],"Title":"InvisiSpec: making speculative execution invisible in the cache hierarchy.","PublicationYear":"2019","PublicationMonth":"05","URL":"http://iacoma.cs.uiuc.edu/iacoma-papers/micro18.pdf","URLDate":"2024-02-14"},{"ExternalReferenceID":"REF-1418","Authors":["Alejandro Cabrera Aldaya","Billy Bob Brumley","Sohaib ul Hassan","Cesar Pereida García","Nicola Tuveri"],"Title":"Port Contention for Fun and Profit","PublicationYear":"2019","PublicationMonth":"05","URL":"https://eprint.iacr.org/2018/1060.pdf","URLDate":"2024-02-14"},{"ExternalReferenceID":"REF-1419","Authors":["Mohammad Behnia","Prateek Sahu","Riccardo Paccagnella","Jiyong Yu","Zirui Zhao","Xiang Zou","Thomas Unterluggauer","Josep Torrellas","Carlos Rozas","Adam Morrison","Frank Mckeen","Fangfei Liu","Ron Gabor","Christopher W. Fletcher","Abhishek Basak","Alaa Alameldeen"],"Title":"Speculative Interference Attacks: Breaking Invisible Speculation Schemes","PublicationYear":"2021","PublicationMonth":"04","URL":"https://arxiv.org/abs/2007.11818","URLDate":"2024-02-14"},{"ExternalReferenceID":"REF-1420","Authors":["Ross Mcilroy","Jaroslav Sevcik","Tobias Tebbi","Ben L. Titzer","Toon Verwaest"],"Title":"Spectre is here to stay: An analysis of side-channels and speculative execution","PublicationYear":"2019","PublicationMonth":"02","PublicationDay":"14","URL":"https://arxiv.org/pdf/1902.05178.pdf","URLDate":"2024-02-14"},{"ExternalReferenceID":"REF-1421","Authors":["Intel Corporation"],"Title":"Managed Runtime Speculative Execution Side Channel Mitigations","PublicationYear":"2018","PublicationMonth":"01","PublicationDay":"03","URL":"https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/runtime-speculative-side-channel-mitigations.html","URLDate":"2024-02-14"},{"ExternalReferenceID":"REF-1398","Authors":["The Clang Team"],"Title":"Control Flow Integrity","URL":"https://clang.llvm.org/docs/ControlFlowIntegrity.html","URLDate":"2024-02-13"},{"ExternalReferenceID":"REF-1414","Authors":["Intel Corporation"],"Title":"Retpoline: A Branch Target Injection Mitigation","PublicationYear":"2022","PublicationMonth":"08","PublicationDay":"22","URL":"https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/retpoline-branch-target-injection-mitigation.html","URLDate":"2023-02-13"},{"ExternalReferenceID":"REF-1390","Authors":["The kernel development community"],"Title":"Speculation","PublicationYear":"2020","PublicationMonth":"08","PublicationDay":"16","URL":"https://docs.kernel.org/6.6/staging/speculation.html","URLDate":"2024-02-04"},{"ExternalReferenceID":"REF-1425","Authors":["Chandler Carruth"],"Title":"Speculative Load Hardening","URL":"https://llvm.org/docs/SpeculativeLoadHardening.html","URLDate":"2024-02-14"},{"ExternalReferenceID":"REF-1427","Authors":["Hany Ragab","Enrico Barberis","Herbert Bos","Cristiano Giuffrida"],"Title":"Rage Against the Machine Clear: A Systematic Analysis of Machine Clears and Their Implications for Transient Execution Attacks","PublicationYear":"2021","PublicationMonth":"08","URL":"https://www.usenix.org/system/files/sec21-ragab.pdf","URLDate":"2024-02-14"},{"ExternalReferenceID":"REF-1428","Authors":["Oleksii Oleksenko","Marco Guarnieri","Boris Köpf","Mark Silberstein"],"Title":"Hide and Seek with Spectres: Efficient discovery of speculative information leaks with random testing","PublicationYear":"2023","PublicationMonth":"01","PublicationDay":"18","URL":"https://arxiv.org/pdf/2301.07642.pdf","URLDate":"2024-02-14"},{"ExternalReferenceID":"REF-1429","Authors":["Oleksii Oleksenko","Bohdan Trach","Mark Silberstein","Christof Fetzer"],"Title":"SpecFuzz: Bringing Spectre-type vulnerabilities to the surface","PublicationYear":"2020","PublicationMonth":"08","URL":"https://www.usenix.org/system/files/sec20-oleksenko.pdf","URLDate":"2024-02-14"},{"ExternalReferenceID":"REF-1415","Authors":["Paul Kocher","Jann Horn","Anders Fogh","Daniel Genkin","Daniel Gruss","Werner Haas","Mike Hamburg","Moritz Lipp","Stefan Mangard","Thomas Prescher","Michael Schwarz","Yuval Yarom"],"Title":"Spectre Attacks: Exploiting Speculative Execution","PublicationYear":"2019","PublicationMonth":"05","URL":"https://spectreattack.com/spectre.pdf","URLDate":"2024-02-14"},{"ExternalReferenceID":"REF-1400","Authors":["Intel Corporation"],"Title":"Refined Speculative Execution Terminology","PublicationYear":"2022","PublicationMonth":"03","PublicationDay":"11","URL":"https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/best-practices/refined-speculative-execution-terminology.html","URLDate":"2024-02-13"}],"MappingNotes":{"Usage":"Allowed-with-Review","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"\n\nA vulnerability should only map to CWE-1420 if it cannot map to any of CWE-1420's child weaknesses. Follow this diagram:\n\n","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"Scott D. Constable","SubmissionOrganization":"Intel Corporation","SubmissionDate":"2023-09-19","SubmissionVersion":"4.14","SubmissionReleaseDate":"2024-02-29"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-07-16","ModificationComment":"updated Mapping_Notes","ModificationVersion":"4.15","ModificationReleaseDate":"2024-07-16"},{"Type":"Contribution","ContributionName":"David Kaplan","ContributionOrganization":"AMD","ContributionDate":"2024-01-22","ContributionComment":"Member of Microarchitectural Weaknesses Working Group","ContributionType":"Content","ContributionVersion":"4.14","ContributionReleaseDate":"2024-02-29"},{"Type":"Contribution","ContributionName":"Rafael Dossantos, Abraham Fernandez Rubio, Alric Althoff, Lyndon Fawcett","ContributionOrganization":"Arm","ContributionDate":"2024-01-22","ContributionComment":"Members of Microarchitectural Weaknesses Working Group","ContributionType":"Content","ContributionVersion":"4.14","ContributionReleaseDate":"2024-02-29"},{"Type":"Contribution","ContributionName":"Jason Oberg","ContributionOrganization":"Cycuity","ContributionDate":"2024-01-22","ContributionComment":"Member of Microarchitectural Weaknesses Working Group","ContributionType":"Content","ContributionVersion":"4.14","ContributionReleaseDate":"2024-02-29"},{"Type":"Contribution","ContributionName":"Priya B. Iyer","ContributionOrganization":"Intel Corporation","ContributionDate":"2024-01-22","ContributionComment":"Member of Microarchitectural Weaknesses Working Group","ContributionType":"Content","ContributionVersion":"4.14","ContributionReleaseDate":"2024-02-29"},{"Type":"Contribution","ContributionName":"Nicole Fern","ContributionOrganization":"Riscure","ContributionDate":"2024-01-22","ContributionComment":"Member of Microarchitectural Weaknesses Working Group","ContributionType":"Content","ContributionVersion":"4.14","ContributionReleaseDate":"2024-02-29"}]}