{"ID":"762","Name":"Mismatched Memory Management Routines","Abstraction":"Variant","Structure":"Simple","Status":"Incomplete","Description":"The product attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.","ExtendedDescription":"\n\nThis weakness can be generally described as mismatching memory management routines, such as:\n\n\n  - The memory was allocated on the stack (automatically), but it was deallocated using the memory management routine free() (CWE-590), which is intended for explicitly allocated heap memory.\n\n  - The memory was allocated explicitly using one set of memory management functions, and deallocated using a different set. For example, memory might be allocated with malloc() in C++ instead of the new operator, and then deallocated with the delete operator.\n\nWhen the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed.","LikelihoodOfExploit":"Low","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"763","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"404","ViewID":"1340","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Undetermined"},{"Type":"Language","Name":"C++","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Availability","Confidentiality"],"Impact":["Modify Memory","DoS: Crash, Exit, or Restart","Execute Unauthorized Code or Commands"]}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free()."},{"MitigationID":"MIT-41","Phase":["Implementation"],"Strategy":"Libraries or Frameworks","Description":"\n\nChoose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.\n\n\nFor example, glibc in Linux provides protection against free of invalid pointers.\n\n\nWhen using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].\n\n\nTo help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.\n"},{"MitigationID":"MIT-4.6","Phase":["Architecture and Design"],"Strategy":"Libraries or Frameworks","Description":"\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, glibc in Linux provides protection against free of invalid pointers.\n"},{"Phase":["Architecture and Design"],"Description":"Use a language that provides abstractions for memory allocation and deallocation."},{"Phase":["Testing"],"Description":"Use a tool that dynamically detects memory management problems, such as valgrind."}],"DemonstrativeExamples":[{"ID":"DX-80","Entries":[{"IntroText":"This example allocates a BarObj object using the new operator in C++, however, the programmer then deallocates the object using free(), which may lead to unexpected behavior."},{"Nature":"Bad","Language":"C++","ExampleCode":"```\n\tvoid foo(){\n\t\t\tBarObj *ptr = new BarObj()\n```\n/* do some work with ptr here */* \n\t\t\t\n\t\t\t...\n\t\t\t\n\t\t\tfree(ptr);}"},{"BodyText":"Instead, the programmer should have either created the object with one of the malloc family functions, or else deleted the object with the delete operator."},{"Nature":"Good","Language":"C++","ExampleCode":"```\n\tvoid foo(){\n\t\t\tBarObj *ptr = new BarObj()\n```\n/* do some work with ptr here */* \n\t\t\t\n\t\t\t...\n\t\t\t\n\t\t\tdelete ptr;}"}]},{"ID":"DX-85","Entries":[{"IntroText":"In this example, the program does not use matching functions such as malloc/free, new/delete, and new[]/delete[] to allocate/deallocate the resource."},{"Nature":"Bad","Language":"C++","ExampleCode":"```\n\tclass A {\n\t\tvoid foo();\n\t};\n\tvoid A::foo(){\n\t\tint *ptr;\n\t\tptr = (int*)malloc(sizeof(int));\n\t\tdelete ptr;\n\t}\n```"}]},{"ID":"DX-86","Entries":[{"IntroText":"In this example, the program calls the delete[] function on non-heap memory."},{"Nature":"Bad","Language":"C++","ExampleCode":"```\n\tclass A{\n\t\tvoid foo(bool);\n\t};\n\tvoid A::foo(bool heap) {\n\t\tint localArray[2] = {\n\t\t\t11,22\n\t\t};\n\t\tint *p = localArray;\n\t\tif (heap){\n\t\t\tp = new int[2];\n\t\t}\n\t\tdelete[] p;\n\t}\n```"}]}],"AffectedResources":["Memory"],"TaxonomyMappings":[{"TaxonomyName":"CERT C Secure Coding","EntryID":"WIN30-C","EntryName":"Properly pair allocation and deallocation functions","MappingFit":"Exact"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP12","EntryName":"Faulty Memory Release"}],"References":[{"ExternalReferenceID":"REF-657","Title":"boost C++ Library Smart Pointers","URL":"https://www.boost.org/doc/libs/1_38_0/libs/smart_ptr/smart_ptr.htm","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-480","Title":"Valgrind","URL":"http://valgrind.org/"},{"ExternalReferenceID":"REF-391","Authors":["iOS Developer Library"],"Title":"Transitioning to ARC Release Notes","PublicationYear":"2013","PublicationMonth":"08","PublicationDay":"08","URL":"https://developer.apple.com/library/archive/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html","URLDate":"2023-04-07"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Applicable Platform","Note":"\n\nThis weakness is possible in any programming language that allows manual management of memory.\n"}],"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2009-05-08","SubmissionVersion":"1.4","SubmissionReleaseDate":"2009-05-27"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-12-28","ModificationComment":"updated Applicable_Platforms, Likelihood_of_Exploit"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Description, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Demonstrative_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-02-18","ModificationComment":"updated Demonstrative_Examples, Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Applicable_Platforms, References, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Contribution","ContributionName":"Martin Sebor","ContributionOrganization":"Cisco Systems, Inc.","ContributionDate":"2010-04-30","ContributionComment":"Provided improvement to existing Mitigation","ContributionType":"Feedback"}]}