{"ID":"1209","Name":"Failure to Disable Reserved Bits","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design.   However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.","ExtendedDescription":"\n\nReserved bits are labeled as such so they can be allocated for a later purpose. They are not to do anything in the current design. However, designers might want to use these bits to debug or control/configure a future capability to help minimize time to market (TTM). If the logic being controlled by these bits is still enabled in production, an adversary could use the logic to induce unwanted/unsupported behavior in the hardware.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"710","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"System on Chip","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design","Note":"The Designer and Implementer have to make a conscious choice to do this"},{"Phase":"Implementation","Note":"The Designer and Implementer have to make a conscious choice to do this"},{"Phase":"Documentation","Note":"If documentation labels anything \"for future use\", \"reserved\", or the like, such labeling could indicate to an attacker a potential attack point"}],"CommonConsequences":[{"Scope":["Confidentiality","Integrity","Availability","Access Control","Accountability","Authentication","Authorization","Non-Repudiation"],"Impact":["Varies by Context"],"Note":"This type of weakness all depends on the capabilities of the logic being controlled or configured by the reserved bits."}],"PotentialMitigations":[{"Phase":["Architecture and Design","Implementation"],"Description":"\n\nInclude a feature to disable reserved bits.\n"},{"Phase":["Integration"],"Description":"\n\nAny writes to these reserve bits are blocked (e.g., ignored, access-protected, etc.), or an exception can be asserted.\n"}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"Assume a hardware Intellectual Property (IP) has address space 0x0-0x0F for its configuration registers, with the last one labeled reserved (i.e. 0x0F). Therefore inside the Finite State Machine (FSM), the code is as follows:"},{"Nature":"Bad","Language":"Verilog","ExampleCode":"reg gpio_out = 0; //gpio should remain low for normal operation\n\n case (register_address)\n\n```\n\t 4'b1111 : //0x0F\n\t\t begin\n\t\t\t gpio_out = 1;\n\t\t end\n```"},{"BodyText":"An adversary may perform writes to reserved address space in hopes of changing the behavior of the hardware. In the code above, the GPIO pin should remain low for normal operation. However, it can be asserted by accessing the reserved address space (0x0F). This may be a concern if the GPIO state is being used as an indicator of health (e.g. if asserted the hardware may respond by shutting down or resetting the system, which may not be the correct action the system should perform).\n\n\nIn the code below, the condition \"register_address = 0X0F\" is commented out, and a default is provided that will catch any values of register_address not explicitly accounted for and take no action with regards to gpio_out. This means that an attacker who is able to write 0X0F to register_address will not enable any undocumented \"features\" in the process."},{"Nature":"Good","Language":"Verilog","ExampleCode":"reg gpio_out = 0; //gpio should remain low for normal operation\n\n case (register_address)\n\n```\n\t //4'b1111 : //0x0F\n\t default: gpio_out = gpio_out;\n```"}]}],"RelatedAttackPatterns":["121"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"Brent Sherman","SubmissionOrganization":"Intel Corporation","SubmissionDate":"2020-02-06","SubmissionVersion":"4.0","SubmissionReleaseDate":"2020-02-24"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}