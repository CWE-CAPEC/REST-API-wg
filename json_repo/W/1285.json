{"ID":"1285","Name":"Improper Validation of Specified Index, Position, or Offset in Input","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.","ExtendedDescription":"\n\nOften, indexable resources such as memory buffers or files can be accessed using a specific position, index, or offset, such as an index for an array or a position for a file. When untrusted input is not properly validated before it is used as an index, attackers could access (or attempt to access) unauthorized portions of these resources. This could be used to cause buffer overflows, excessive resource allocation, or trigger unexpected failures. \n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"20","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Often"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Other"],"Impact":["Varies by Context"]}],"PotentialMitigations":[{"MitigationID":"MIT-5","Phase":["Implementation"],"Strategy":"Input Validation","Description":"\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n","Effectiveness":"High"}],"DemonstrativeExamples":[{"ID":"DX-134","Entries":[{"IntroText":"The following example retrieves the sizes of messages for a pop3 mail server. The message sizes are retrieved from a socket that returns in a buffer the message number and the message size, the message number (num) and size (size) are extracted from the buffer and the message size is placed into an array using the message number for the array index."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n```\n/* capture the sizes of all messages */* \n\tint getsizes(int sock, int count, int *sizes) {\n\t```\n\t\t\t...\n\t\t\tchar buf[BUFFER_SIZE];\n\t\t\tint ok;\n\t\t\tint num, size;\n```\n// read values from socket and added to sizes array* \n\t\t\twhile ((ok = gen_recv(sock, buf, sizeof(buf))) == 0)\n\t\t\t{\n\t\t\t```\n```\n// continue read from socket until buf only contains '.'* \n\t\t\t\t\tif (DOTLINE(buf))\n\t\t\t\t\t```\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if (sscanf(buf, \"%d %d\", \u0026num, \u0026size) == 2)\n\t\t\t\t\t\tsizes[num - 1] = size;\n\t\t\t}\n\t\t\t\t...\n\t}\n```"},{"BodyText":"In this example the message number retrieved from the buffer could be a value that is outside the allowable range of indices for the array and could possibly be a negative number. Without proper validation of the value to be used for the array index an array overflow could occur and could potentially lead to unauthorized access to memory addresses and system crashes. The value of the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code."},{"Nature":"Good","Language":"C","ExampleCode":"```\n```\n/* capture the sizes of all messages */* \n\tint getsizes(int sock, int count, int *sizes) {\n\t```\n\t\t\t...\n\t\t\tchar buf[BUFFER_SIZE];\n\t\t\tint ok;\n\t\t\tint num, size;\n```\n// read values from socket and added to sizes array* \n\t\t\twhile ((ok = gen_recv(sock, buf, sizeof(buf))) == 0)\n\t\t\t{\n\t\t\t```\n```\n// continue read from socket until buf only contains '.'* \n\t\t\t\t\tif (DOTLINE(buf))\n\t\t\t\t\t```\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if (sscanf(buf, \"%d %d\", \u0026num, \u0026size) == 2) {\n\t\t\t\t\t\t\tif (num \u003e 0 \u0026\u0026 num \u003c= (unsigned)count)\n\t\t\t\t\t\t\t\tsizes[num - 1] = size;\n\t\t\t\t\t\t\telse\n```\n/* warn about possible attempt to induce buffer overflow */* \n\t\t\t\t\t\t\t\t\treport(stderr, \"Warning: ignoring bogus data for message sizes returned by server.\\n\");}}\n\t\t\t```\n\t\t\t\t...\n\t}\n```"}]},{"ID":"DX-133","Entries":[{"IntroText":"In the following example the method displayProductSummary is called from a Web service servlet to retrieve product summary information for display to the user. The servlet obtains the integer value of the product number from the user and passes it to the displayProductSummary method. The displayProductSummary method passes the integer value of the product number to the getProductSummary method which obtains the product summary from the array object containing the project summaries using the integer value of the product number as the array index."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n```\n// Method called from servlet to obtain product information* \n\tpublic String displayProductSummary(int index) {\n\t\n\t```\n\t\t\tString productSummary = new String(\"\");\n\t\t\ttry {\n\t\t\t\tString productSummary = getProductSummary(index);\n\t\t\t} catch (Exception ex) {...}\n\t\t\treturn productSummary;\n\t}\n\tpublic String getProductSummary(int index) {\n\t\treturn products[index];\n\t}\n```"},{"BodyText":"In this example the integer value used as the array index that is provided by the user may be outside the allowable range of indices for the array which may provide unexpected results or cause the application to fail. The integer value used for the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n```\n// Method called from servlet to obtain product information* \n\tpublic String displayProductSummary(int index) {\n\t\n\t```\n\t\t\tString productSummary = new String(\"\");\n\t\t\ttry {\n\t\t\t\tString productSummary = getProductSummary(index);\n\t\t\t} catch (Exception ex) {...}\n\t\t\treturn productSummary;\n\t}\n\tpublic String getProductSummary(int index) {\n\t\t\tString productSummary = \"\";\n\t\t\tif ((index \u003e= 0) \u0026\u0026 (index \u003c MAX_PRODUCTS)) {\n\t\t\t\tproductSummary = products[index];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.err.println(\"index is out of bounds\");\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\treturn productSummary;\n\t}\n```"},{"BodyText":"An alternative in Java would be to use one of the collection objects such as ArrayList that will automatically generate an exception if an attempt is made to access an array index that is out of bounds."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tArrayList productArray = new ArrayList(MAX_PRODUCTS);\n\t...\n\ttry {\n\t\tproductSummary = (String) productArray.get(index);\n\t} catch (IndexOutOfBoundsException ex) {...}\n```"}]},{"ID":"DX-90","Entries":[{"IntroText":"The following example asks a user for an offset into an array to select an item."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tint main (int argc, char **argv) {\n\t\tchar *items[] = {\"boat\", \"car\", \"truck\", \"train\"};\n\t\tint index = GetUntrustedOffset();\n\t\tprintf(\"User selected %s\\n\", items[index-1]);\n\t}\n```"},{"BodyText":"The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126)."}]}],"ObservedExamples":[{"Reference":"CVE-2005-0369","Description":"large ID in packet used as array index","Link":"https://www.cve.org/CVERecord?id=CVE-2005-0369"},{"Reference":"CVE-2001-1009","Description":"negative array index as argument to POP LIST command","Link":"https://www.cve.org/CVERecord?id=CVE-2001-1009"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Maintenance","Note":"This entry is still under development and will continue to see updates and content improvements."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2020-06-24","SubmissionVersion":"4.1","SubmissionReleaseDate":"2020-02-24"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}