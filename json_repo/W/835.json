{"ID":"835","Name":"Loop with Unreachable Exit Condition ('Infinite Loop')","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.","ExtendedDescription":"If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"834","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"834","ViewID":"1003","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"CommonConsequences":[{"Scope":["Availability"],"Impact":["DoS: Resource Consumption (CPU)","DoS: Resource Consumption (Memory)","DoS: Amplification"],"Note":"An infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"In the following code the method processMessagesFromServer attempts to establish a connection to a server and read and process messages from the server. The method uses a do/while loop to continue trying to establish the connection to the server when an attempt fails."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tint processMessagesFromServer(char *hostaddr, int port) {\n\t\t\t...\n\t\t\tint servsock;\n\t\t\tint connected;\n\t\t\tstruct sockaddr_in servaddr;\n```\n// create socket to connect to server* \n\t\t\tservsock = socket( AF_INET, SOCK_STREAM, 0);\n\t\t\tmemset( \u0026servaddr, 0, sizeof(servaddr));\n\t\t\tservaddr.sin_family = AF_INET;\n\t\t\tservaddr.sin_port = htons(port);\n\t\t\tservaddr.sin_addr.s_addr = inet_addr(hostaddr);\n\t\t\t\n\t\t\tdo {\n\t\t\t```\n```\n// establish connection to server* \n\t\t\t\t\tconnected = connect(servsock, (struct sockaddr *)\u0026servaddr, sizeof(servaddr));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// if connected then read and process messages from server* \n\t\t\t\t\tif (connected \u003e -1) {\n\t\t\t\t\t```\n```\n// read and process messages* \n\t\t\t\t\t\t\t...}\n\t\t\t\t\t\n\t\t\t\n\t\t\t *// keep trying to establish connection to the server* \n\t\t\t} while (connected \u003c 0);\n\t\t\t\n\t\t\t\n\t\t\t *// close socket and return success or failure* \n\t\t\t...}"},{"BodyText":"However, this will create an infinite loop if the server does not respond. This infinite loop will consume system resources and can be used to create a denial of service attack. To resolve this a counter should be used to limit the number of attempts to establish a connection to the server, as in the following code."},{"Nature":"Good","Language":"C","ExampleCode":"```\n\tint processMessagesFromServer(char *hostaddr, int port) {\n\t\t\t...\n```\n// initialize number of attempts counter* \n\t\t\tint count = 0;\n\t\t\tdo {\n\t\t\t```\n```\n// establish connection to server* \n\t\t\t\t\tconnected = connect(servsock, (struct sockaddr *)\u0026servaddr, sizeof(servaddr));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// increment counter* \n\t\t\t\t\tcount++;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// if connected then read and process messages from server* \n\t\t\t\t\tif (connected \u003e -1) {\n\t\t\t\t\t```\n```\n// read and process messages* \n\t\t\t\t\t\t\t...}\n\t\t\t\t\t\n\t\t\t\n\t\t\t *// keep trying to establish connection to the server* \n\t\t\t\n\t\t\t\n\t\t\t *// up to a maximum number of attempts* \n\t\t\t} while (connected \u003c 0 \u0026\u0026 count \u003c MAX_ATTEMPTS);\n\t\t\t\n\t\t\t\n\t\t\t *// close socket and return success or failure* \n\t\t\t...}"}]},{"ID":"DX-205","Entries":[{"IntroText":"For this example, the method isReorderNeeded is part of a bookstore application that determines if a particular book needs to be reordered based on the current inventory count and the rate at which the book is being sold."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic boolean isReorderNeeded(String bookISBN, int rateSold) {\n\t\t\tboolean isReorder = false;\n\t\t\tint minimumCount = 10;\n\t\t\tint days = 0;\n```\n// get inventory count for book* \n\t\t\tint inventoryCount = inventory.getIventoryCount(bookISBN);\n\t\t\t\n\t\t\t\n\t\t\t *// find number of days until inventory count reaches minimum* \n\t\t\twhile (inventoryCount \u003e minimumCount) {\n\t\t\t```\n\t\t\t\t\tinventoryCount = inventoryCount - rateSold;\n\t\t\t\t\tdays++;\n\t\t\t}\n```\n// if number of days within reorder timeframe* \n\t\t\t\n\t\t\t\n\t\t\t *// set reorder return boolean to true* \n\t\t\tif (days \u003e 0 \u0026\u0026 days \u003c 5) {\n\t\t\t```\n\t\t\t\tisReorder = true;\n\t\t\t}\n\t\t\treturn isReorder;\n\t}\n```"},{"BodyText":"However, the while loop will become an infinite loop if the rateSold input parameter has a value of zero since the inventoryCount will never fall below the minimumCount. In this case the input parameter should be validated to ensure that a value of zero does not cause an infinite loop, as in the following code."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tpublic boolean isReorderNeeded(String bookISBN, int rateSold) {\n\t\t\t...\n```\n// validate rateSold variable* \n\t\t\tif (rateSold \u003c 1) {\n\t\t\t```\n\t\t\t\treturn isReorder;\n\t\t\t}\n\t\t\t...\n\t}\n```"}]}],"ObservedExamples":[{"Reference":"CVE-2022-22224","Description":"Chain: an operating system does not properly process malformed Open Shortest Path First (OSPF) Type/Length/Value Identifiers (TLV) (CWE-703), which can cause the process to enter an infinite loop (CWE-835)","Link":"https://www.cve.org/CVERecord?id=CVE-2022-22224"},{"Reference":"CVE-2022-25304","Description":"A Python machine communication platform did not account for receiving a malformed packet with a null size, causing the receiving function to never update the message buffer and be caught in an infinite loop.","Link":"https://www.cve.org/CVERecord?id=CVE-2022-25304"},{"Reference":"CVE-2011-1027","Description":"Chain: off-by-one error (CWE-193) leads to infinite loop (CWE-835) using invalid hex-encoded characters.","Link":"https://www.cve.org/CVERecord?id=CVE-2011-1027"},{"Reference":"CVE-2011-1142","Description":"Chain: self-referential values in recursive definitions lead to infinite loop.","Link":"https://www.cve.org/CVERecord?id=CVE-2011-1142"},{"Reference":"CVE-2011-1002","Description":"NULL UDP packet is never cleared from a queue, leading to infinite loop.","Link":"https://www.cve.org/CVERecord?id=CVE-2011-1002"},{"Reference":"CVE-2006-6499","Description":"Chain: web browser crashes due to infinite loop - \"bad looping logic [that relies on] floating point math [CWE-1339] to exit the loop [CWE-835]\"","Link":"https://www.cve.org/CVERecord?id=CVE-2006-6499"},{"Reference":"CVE-2010-4476","Description":"Floating point conversion routine cycles back and forth between two different values.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-4476"},{"Reference":"CVE-2010-4645","Description":"Floating point conversion routine cycles back and forth between two different values.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-4645"},{"Reference":"CVE-2010-2534","Description":"Chain: improperly clearing a pointer in a linked list leads to infinite loop.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-2534"},{"Reference":"CVE-2013-1591","Description":"Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.","Link":"https://www.cve.org/CVERecord?id=CVE-2013-1591"},{"Reference":"CVE-2008-3688","Description":"Chain: A denial of service may be caused by an uninitialized variable (CWE-457) allowing an infinite loop (CWE-835) resulting from a connection to an unresponsive server.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-3688"}],"TaxonomyMappings":[{"TaxonomyName":"OMG ASCSM","EntryID":"ASCSM-CWE-835"}],"References":[{"ExternalReferenceID":"REF-62","Section":"Chapter 7, \"Looping Constructs\", Page 327","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"},{"ExternalReferenceID":"REF-962","Section":"ASCSM-CWE-835","Authors":["Object Management Group (OMG)"],"Title":"Automated Source Code Security Measure (ASCSM)","PublicationYear":"2016","PublicationMonth":"01","URL":"http://www.omg.org/spec/ASCSM/1.0/"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2011-03-22","SubmissionVersion":"1.12","SubmissionReleaseDate":"2011-03-30"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description, Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Demonstrative_Examples","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"}]}