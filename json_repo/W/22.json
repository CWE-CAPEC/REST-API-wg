{"ID":"22","Name":"Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","Abstraction":"Base","Structure":"Simple","Status":"Stable","Diagram":"/data/images/CWE-22-Diagram.png","Description":"The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.","ExtendedDescription":"\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n","LikelihoodOfExploit":"High","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"706","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"706","ViewID":"1003","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"668","ViewID":"1000"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"},{"Ordinality":"Resultant"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"AlternateTerms":[{"Term":"Directory traversal"},{"Term":"Path traversal","Description":"\"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused."}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Confidentiality","Availability"],"Impact":["Execute Unauthorized Code or Commands"],"Note":"The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries."},{"Scope":["Integrity"],"Impact":["Modify Files or Directories"],"Note":"The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication."},{"Scope":["Confidentiality"],"Impact":["Read Files or Directories"],"Note":"The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system."},{"Scope":["Availability"],"Impact":["DoS: Crash, Exit, or Restart"],"Note":"The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of protection mechanisms such as authentication, it has the potential to lock out product users."}],"DetectionMethods":[{"Method":"Automated Static Analysis","Description":"Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.","Effectiveness":"High"},{"Method":"Manual Static Analysis","Description":"Manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.","Effectiveness":"High"},{"Method":"Automated Static Analysis - Binary or Bytecode","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis","Effectiveness":"High"},{"Method":"Manual Static Analysis - Binary or Bytecode","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities \u0026 anomalies","Effectiveness":"SOAR Partial"},{"Method":"Dynamic Analysis with Automated Results Interpretation","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners","Effectiveness":"High"},{"Method":"Dynamic Analysis with Manual Results Interpretation","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer","Effectiveness":"High"},{"Method":"Manual Static Analysis - Source Code","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source","Effectiveness":"High"},{"Method":"Automated Static Analysis - Source Code","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer","Effectiveness":"High"},{"Method":"Architecture or Design Review","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"MitigationID":"MIT-5.1","Phase":["Implementation"],"Strategy":"Input Validation","Description":"\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n"},{"MitigationID":"MIT-15","Phase":["Architecture and Design"],"Description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."},{"MitigationID":"MIT-20.1","Phase":["Implementation"],"Strategy":"Input Validation","Description":"\n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes:\n\n\n  - realpath() in C\n\n  - getCanonicalPath() in Java\n\n  - GetFullPath() in ASP.NET\n\n  - realpath() or abs_path() in Perl\n\n  - realpath() in PHP\n\n"},{"MitigationID":"MIT-4","Phase":["Architecture and Design"],"Strategy":"Libraries or Frameworks","Description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid."},{"MitigationID":"MIT-29","Phase":["Operation"],"Strategy":"Firewall","Description":"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","Effectiveness":"Moderate","EffectivenessNotes":"An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."},{"MitigationID":"MIT-17","Phase":["Architecture and Design","Operation"],"Strategy":"Environment Hardening","Description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."},{"MitigationID":"MIT-21.1","Phase":["Architecture and Design"],"Strategy":"Enforcement by Conversion","Description":"\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\n\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\n"},{"MitigationID":"MIT-22","Phase":["Architecture and Design","Operation"],"Strategy":"Sandbox or Jail","Description":"\n\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n","Effectiveness":"Limited","EffectivenessNotes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."},{"MitigationID":"MIT-34","Phase":["Architecture and Design","Operation"],"Strategy":"Attack Surface Reduction","Description":"\n\nStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\n\n\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\n"},{"MitigationID":"MIT-39","Phase":["Implementation"],"Description":"\n\nEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\n\n\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\n\n\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\n\nIn the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.\n"},{"MitigationID":"MIT-16","Phase":["Operation","Implementation"],"Strategy":"Environment Hardening","Description":"When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."}],"DemonstrativeExamples":[{"ID":"DX-27","Entries":[{"IntroText":"The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory."},{"Nature":"Bad","Language":"Perl","ExampleCode":"```\n\tmy $dataPath = \"/users/cwe/profiles\";\n\tmy $username = param(\"user\");\n\tmy $profilePath = $dataPath . \"/\" . $username;\n\topen(my $fh, \"\u003c\", $profilePath) || ExitError(\"profile read error: $profilePath\");\n\tprint \"\u003cul\u003e\\n\";\n\twhile (\u003c$fh\u003e) {\n\t\tprint \"\u003cli\u003e$_\u003c/li\u003e\\n\";\n\t}\n\tprint \"\u003c/ul\u003e\\n\";\n```"},{"BodyText":"While the programmer intends to access files such as \"/users/cwe/profiles/alice\" or \"/users/cwe/profiles/bob\", there is no verification of the incoming user parameter. An attacker could provide a string such as:"},{"Nature":"Attack","ExampleCode":"```\n\t../../../etc/passwd\n```"},{"BodyText":"The program would generate a profile pathname like this:"},{"Nature":"Result","ExampleCode":"```\n\t/users/cwe/profiles/../../../etc/passwd\n```"},{"BodyText":"When the file is opened, the operating system resolves the \"../\" during path canonicalization and actually accesses this file:"},{"Nature":"Result","ExampleCode":"```\n\t/etc/passwd\n```"},{"BodyText":"As a result, the attacker could read the entire text of the password file."},{"BodyText":"Notice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined."}]},{"ID":"DX-18","Entries":[{"IntroText":"In the example below, the path to a dictionary file is read from a system property and used to initialize a File object."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tString filename = System.getProperty(\"com.domain.application.dictionaryFile\");\n\tFile dictionaryFile = new File(filename);\n```"},{"BodyText":"However, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory."}]},{"ID":"DX-2","Entries":[{"IntroText":"The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path."},{"Nature":"Bad","Language":"Perl","ExampleCode":"```\n\tmy $Username = GetUntrustedInput();\n\t$Username =~ s/\\.\\.\\///;\n\tmy $filename = \"/home/user/\" . $Username;\n\tReadAndSendFile($filename);\n```"},{"BodyText":"Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as:"},{"Nature":"Attack","ExampleCode":"```\n\t../../../etc/passwd\n```"},{"BodyText":"will have the first \"../\" stripped, resulting in:"},{"Nature":"Result","ExampleCode":"```\n\t../../etc/passwd\n```"},{"BodyText":"This value is then concatenated with the /home/user/ directory:"},{"Nature":"Result","ExampleCode":"```\n\t/home/user/../../etc/passwd\n```"},{"BodyText":"which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23)."}]},{"Entries":[{"IntroText":"The following code attempts to validate a given input path by checking it against an allowlist and once validated delete the given file. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\"."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tString path = getInputPath();\n\tif (path.startsWith(\"/safe_dir/\"))\n\t{\n\t\tFile f = new File(path);\n\t\tf.delete()\n\t}\n```"},{"BodyText":"An attacker could provide an input such as this:"},{"Nature":"Attack","ExampleCode":"```\n\t/safe_dir/../important.dat\n```"},{"BodyText":"The software assumes that the path is valid because it starts with the \"/safe_path/\" sequence, but the \"../\" sequence will cause the program to delete the important.dat file in the parent directory"}]},{"ID":"DX-22","Entries":[{"IntroText":"The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet."},{"Nature":"Good","Language":"HTML","ExampleCode":"```\n\t\u003cform action=\"FileUploadServlet\" method=\"post\" enctype=\"multipart/form-data\"\u003e\n\tChoose a file to upload:\n\t\u003cinput type=\"file\" name=\"filename\"/\u003e\n\t\u003cbr/\u003e\n\t\u003cinput type=\"submit\" name=\"submit\" value=\"Submit\"/\u003e\n\t\u003c/form\u003e\n```"},{"BodyText":"When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic class FileUploadServlet extends HttpServlet {\n\t\t\t...\n\t\t\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\t\t\tresponse.setContentType(\"text/html\");\n\t\t\t\t\tPrintWriter out = response.getWriter();\n\t\t\t\t\tString contentType = request.getContentType();\n\t\t\t\t\t// the starting position of the boundary header\n\t\t\t\t\tint ind = contentType.indexOf(\"boundary=\");\n\t\t\t\t\tString boundary = contentType.substring(ind+9);\n\t\t\t\t\tString pLine = new String();\n\t\t\t\t\tString uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value\n\t\t\t\t\t// verify that content type is multipart form data\n\t\t\t\t\tif (contentType != null \u0026\u0026 contentType.indexOf(\"multipart/form-data\") != -1) {\n\t\t\t\t\t\t\t// extract the filename from the Http header\n\t\t\t\t\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\tpLine = br.readLine();\n\t\t\t\t\t\t\tString filename = pLine.substring(pLine.lastIndexOf(\"\\\\\"), pLine.lastIndexOf(\"\\\"\"));\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t// output the file to the local upload directory\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));\n\t\t\t\t\t\t\t\t\tfor (String line; (line=br.readLine())!=null; ) {\n\t\t\t\t\t\t\t\t\t\tif (line.indexOf(boundary) == -1) {\n\t\t\t\t\t\t\t\t\t\t\tbw.write(line);\n\t\t\t\t\t\t\t\t\t\t\tbw.newLine();\n\t\t\t\t\t\t\t\t\t\t\tbw.flush();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} //end of for loop\n\t\t\t\t\t\t\t\t\tbw.close();\n\t\t\t\t\t\t\t} catch (IOException ex) {...}\n\t\t\t\t\t\t\t// output successful upload response HTML page\n\t\t\t\t\t}\n\t\t\t\t\t// output unsuccessful upload response HTML page\n\t\t\t\t\telse\n\t\t\t\t\t{...}\n\t\t\t}\n\t\t\t\t...\n\t}\n```"},{"BodyText":"This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code."},{"BodyText":"Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use \"../\" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash."}]},{"ID":"DX-159","Entries":[{"IntroText":"This script intends to read a user-supplied file from the current directory. The user inputs the relative path to the file and the script uses Python's os.path.join() function to combine the path to the current working directory with the provided path to the specified file. This results in an absolute path to the desired file. If the file does not exist when the script attempts to read it, an error is printed to the user."},{"Nature":"Bad","Language":"Python","ExampleCode":"```\n\t import os\n\t import sys\n\t def main():\n\t\t filename = sys.argv[1]\n\t\t path = os.path.join(os.getcwd(), filename)\n\t\t try:\n\t\t\t with open(path, 'r') as f:\n\t\t\t\t file_data = f.read()\n\t\t except FileNotFoundError as e:\n\t\t\t print(\"Error - file not found\")\n\t main() \n```"},{"BodyText":"However, if the user supplies an absolute path, the os.path.join() function will discard the path to the current working directory and use only the absolute path provided. For example, if the current working directory is /home/user/documents, but the user inputs /etc/passwd, os.path.join() will use only /etc/passwd, as it is considered an absolute path. In the above scenario, this would cause the script to access and read the /etc/passwd file."},{"Nature":"Good","Language":"Python","ExampleCode":"```\n\t import os\n\t import sys\n\t def main():\n\t\t filename = sys.argv[1]\n\t\t path = os.path.normpath(f\"{os.getcwd()}{os.sep}{filename}\")\n\t\t if path.startswith(\"/home/cwe/documents/\"):\n\t\t\t try:\n\t\t\t\t with open(path, 'r') as f:\n\t\t\t\t\t file_data = f.read()\n\t\t\t except FileNotFoundError as e:\n\t\t\t\t print(\"Error - file not found\")\n\t main() \n```"},{"BodyText":"The constructed path string uses os.sep to add the appropriate separation character for the given operating system (e.g. '\\' or '/') and the call to os.path.normpath() removes any additional slashes that may have been entered - this may occur particularly when using a Windows path. The path is checked against an expected directory (/home/cwe/documents); otherwise, an attacker could provide relative path sequences like \"..\" to cause normpath() to generate paths that are outside the intended directory (CWE-23). By putting the pieces of the path string together in this fashion, the script avoids a call to os.path.join() and any potential issues that might arise if an absolute path is entered. With this version of the script, if the current working directory is /home/cwe/documents, and the user inputs /etc/passwd, the resulting path will be /home/cwe/documents/etc/passwd. The user is therefore contained within the current working directory as intended."}]}],"ObservedExamples":[{"Reference":"CVE-2024-37032","Description":"Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama","Link":"https://www.cve.org/CVERecord?id=CVE-2024-37032"},{"Reference":"CVE-2024-4315","Description":"Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.","Link":"https://www.cve.org/CVERecord?id=CVE-2024-4315"},{"Reference":"CVE-2022-45918","Description":"Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)","Link":"https://www.cve.org/CVERecord?id=CVE-2022-45918"},{"Reference":"CVE-2019-20916","Description":"Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"","Link":"https://www.cve.org/CVERecord?id=CVE-2019-20916"},{"Reference":"CVE-2022-31503","Description":"Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.","Link":"https://www.cve.org/CVERecord?id=CVE-2022-31503"},{"Reference":"CVE-2022-24877","Description":"directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file","Link":"https://www.cve.org/CVERecord?id=CVE-2022-24877"},{"Reference":"CVE-2021-21972","Description":"Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2021-21972"},{"Reference":"CVE-2020-4053","Description":"a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive (\"Zip slip\") to copy a file outside the intended directory","Link":"https://www.cve.org/CVERecord?id=CVE-2020-4053"},{"Reference":"CVE-2020-3452","Description":"Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-3452"},{"Reference":"CVE-2019-10743","Description":"Go-based archive library allows extraction of files to locations outside of the target folder with \"../\" path traversal sequences in filenames in a zip file, aka \"Zip Slip\"","Link":"https://www.cve.org/CVERecord?id=CVE-2019-10743"},{"Reference":"CVE-2010-0467","Description":"Newsletter module allows reading arbitrary files using \"../\" sequences.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-0467"},{"Reference":"CVE-2006-7079","Description":"Chain: PHP app uses extract for register_globals compatibility layer (CWE-621), enabling path traversal (CWE-22)","Link":"https://www.cve.org/CVERecord?id=CVE-2006-7079"},{"Reference":"CVE-2009-4194","Description":"FTP server allows deletion of arbitrary files using \"..\" in the DELE command.","Link":"https://www.cve.org/CVERecord?id=CVE-2009-4194"},{"Reference":"CVE-2009-4053","Description":"FTP server allows creation of arbitrary directories using \"..\" in the MKD command.","Link":"https://www.cve.org/CVERecord?id=CVE-2009-4053"},{"Reference":"CVE-2009-0244","Description":"FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using \"..\" sequences.","Link":"https://www.cve.org/CVERecord?id=CVE-2009-0244"},{"Reference":"CVE-2009-4013","Description":"Software package maintenance program allows overwriting arbitrary files using \"../\" sequences.","Link":"https://www.cve.org/CVERecord?id=CVE-2009-4013"},{"Reference":"CVE-2009-4449","Description":"Bulletin board allows attackers to determine the existence of files using the avatar.","Link":"https://www.cve.org/CVERecord?id=CVE-2009-4449"},{"Reference":"CVE-2009-4581","Description":"PHP program allows arbitrary code execution using \"..\" in filenames that are fed to the include() function.","Link":"https://www.cve.org/CVERecord?id=CVE-2009-4581"},{"Reference":"CVE-2010-0012","Description":"Overwrite of files using a .. in a Torrent file.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-0012"},{"Reference":"CVE-2010-0013","Description":"Chat program allows overwriting files using a custom smiley request.","Link":"https://www.cve.org/CVERecord?id=CVE-2010-0013"},{"Reference":"CVE-2008-5748","Description":"Chain: external control of values for user's desired language and theme enables path traversal.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-5748"},{"Reference":"CVE-2009-1936","Description":"Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.","Link":"https://www.cve.org/CVERecord?id=CVE-2009-1936"}],"FunctionalAreas":["File Processing"],"AffectedResources":["File or Directory"],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"Path Traversal"},{"TaxonomyName":"OWASP Top Ten 2007","EntryID":"A4","EntryName":"Insecure Direct Object Reference","MappingFit":"CWE More Specific"},{"TaxonomyName":"OWASP Top Ten 2004","EntryID":"A2","EntryName":"Broken Access Control","MappingFit":"CWE More Specific"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"FIO02-C","EntryName":"Canonicalize path names originating from untrusted sources"},{"TaxonomyName":"SEI CERT Perl Coding Standard","EntryID":"IDS00-PL","EntryName":"Canonicalize path names before validating them","MappingFit":"Exact"},{"TaxonomyName":"WASC","EntryID":"33","EntryName":"Path Traversal"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP16","EntryName":"Path Traversal"},{"TaxonomyName":"OMG ASCSM","EntryID":"ASCSM-CWE-22"}],"RelatedAttackPatterns":["126","64","76","78","79"],"References":[{"ExternalReferenceID":"REF-7","Section":"Chapter 11, \"Directory Traversal and Using Parent Paths (..)\" Page 370","Authors":["Michael Howard","David LeBlanc"],"Title":"Writing Secure Code","Edition":"2nd Edition","PublicationYear":"2002","PublicationMonth":"12","PublicationDay":"04","Publisher":"Microsoft Press","URL":"https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223"},{"ExternalReferenceID":"REF-45","Authors":["OWASP"],"Title":"OWASP Enterprise Security API (ESAPI) Project","URL":"http://www.owasp.org/index.php/ESAPI"},{"ExternalReferenceID":"REF-185","Authors":["OWASP"],"Title":"Testing for Path Traversal (OWASP-AZ-001)","URL":"http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)"},{"ExternalReferenceID":"REF-186","Authors":["Johannes Ullrich"],"Title":"Top 25 Series - Rank 7 - Path Traversal","PublicationYear":"2010","PublicationMonth":"03","PublicationDay":"09","Publisher":"SANS Software Security Institute","URL":"https://www.sans.org/blog/top-25-series-rank-7-path-traversal/","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-76","Authors":["Sean Barnum","Michael Gegick"],"Title":"Least Privilege","PublicationYear":"2005","PublicationMonth":"09","PublicationDay":"14","URL":"https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-62","Section":"Chapter 9, \"Filenames and Paths\", Page 503","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"},{"ExternalReferenceID":"REF-962","Section":"ASCSM-CWE-22","Authors":["Object Management Group (OMG)"],"Title":"Automated Source Code Security Measure (ASCSM)","PublicationYear":"2016","PublicationMonth":"01","URL":"http://www.omg.org/spec/ASCSM/1.0/"},{"ExternalReferenceID":"REF-1448","Authors":["Cybersecurity and Infrastructure Security Agency"],"Title":"Secure by Design Alert: Eliminating Directory Traversal Vulnerabilities in Software","PublicationYear":"2024","PublicationMonth":"05","PublicationDay":"02","URL":"https://www.cisa.gov/resources-tools/resources/secure-design-alert-eliminating-directory-traversal-vulnerabilities-software","URLDate":"2024-07-14"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Other","Note":"In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction."},{"Type":"Relationship","Note":"Pathname equivalence can be regarded as a type of canonicalization error."},{"Type":"Relationship","Note":"Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not)."},{"Type":"Terminology","Note":"\n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n"},{"Type":"Research Gap","Note":"Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap."},{"Type":"Research Gap","Note":"\n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n"}],"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Potential_Mitigations, Time_of_Introduction"},{"Type":"Modification","ModificationOrganization":"Veracode","ModificationDate":"2008-08-15","ModificationComment":"Suggested OWASP Top Ten 2004 mapping"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Alternate_Terms, Relationships, Other_Notes, Relationship_Notes, Relevant_Properties, Taxonomy_Mappings, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-10-14","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-07-27","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings, Terminology_Notes, Time_of_Introduction, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-12-13","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-03-29","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Demonstrative_Examples, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2013-02-21","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2013-07-17","ModificationComment":"updated Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-06-23","ModificationComment":"updated Other_Notes, Research_Gaps"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Detection_Factors, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-01-19","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-05-03","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Affected_Resources, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Relevant_Properties, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2018-03-27","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Related_Attack_Patterns, Relationships, Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-09-19","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Potential_Mitigations, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Demonstrative_Examples, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Potential_Mitigations, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Observed_Examples, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Common_Consequences, Description, Detection_Factors"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Demonstrative_Examples, References, Relationships, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-07-16","ModificationComment":"updated Common_Consequences, Description, Diagram, Observed_Examples, Other_Notes, References","ModificationVersion":"4.15","ModificationReleaseDate":"2024-07-16"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-11-19","ModificationComment":"updated Demonstrative_Examples, Relationships","ModificationVersion":"4.16","ModificationReleaseDate":"2024-11-19"},{"Type":"Contribution","ContributionName":"Nick Johnston","ContributionDate":"2022-07-11","ContributionComment":"Identified weakness in Perl demonstrative example","ContributionType":"Feedback"},{"Type":"Contribution","ContributionName":"Abhi Balakrishnan","ContributionDate":"2024-02-29","ContributionComment":"Provided diagram to improve CWE usability","ContributionType":"Content","ContributionVersion":"4.15","ContributionReleaseDate":"2024-07-16"},{"Type":"Contribution","ContributionName":"Drew Buttner","ContributionOrganization":"MITRE","ContributionDate":"2024-11-01","ContributionComment":"Identified weakness in \"good code\" for Python demonstrative example","ContributionType":"Feedback"},{"Type":"Rename","PreviousEntryName":"Path Traversal","Date":"2010-02-16"}]}