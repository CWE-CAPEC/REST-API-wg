{"ID":"1426","Name":"Improper Validation of Generative AI Output","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The product invokes a generative AI/ML\n\t\t\tcomponent whose behaviors and outputs cannot be directly\n\t\t\tcontrolled, but the product does not validate or\n\t\t\tinsufficiently validates the outputs to ensure that they\n\t\t\talign with the intended security, content, or privacy\n\t\t\tpolicy.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"707","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Name":"AI/ML","Prevalence":"Undetermined"},{"Type":"Technology","Class":"Not Technology-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design","Note":"\n\nDevelopers may rely heavily on protection mechanisms such as input filtering and model alignment, assuming they are more effective than they actually are.\n"},{"Phase":"Implementation","Note":"\n\nDevelopers may rely heavily on protection mechanisms such as input filtering and model alignment, assuming they are more effective than they actually are.\n"}],"CommonConsequences":[{"Scope":["Integrity"],"Impact":["Execute Unauthorized Code or Commands","Varies by Context"],"Note":"\n\nIn an agent-oriented setting, output could be used to cause unpredictable agent invocation, i.e., to control or influence agents that might be invoked from the output. The impact varies depending on the access that is granted to the tools, such as creating a database or writing files.\n"}],"DetectionMethods":[{"Method":"Dynamic Analysis with Manual Results Interpretation","Description":"Use known techniques for prompt injection and other attacks, and adjust the attacks to be more specific to the model or system."},{"Method":"Dynamic Analysis with Automated Results Interpretation","Description":"Use known techniques for prompt injection and other attacks, and adjust the attacks to be more specific to the model or system."},{"Method":"Architecture or Design Review","Description":"Review of the product design can be effective, but it works best in conjunction with dynamic analysis."}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"Since the output from a generative AI component (such as an LLM) cannot be trusted, ensure that it operates in an untrusted or non-privileged space."},{"Phase":["Operation"],"Description":"Use \"semantic comparators,\" which are mechanisms that provide semantic comparison to identify objects that might appear different but are semantically similar."},{"Phase":["Operation"],"Description":"\n\nUse components that operate externally to the system to monitor the output and act as a moderator. These components are called different terms, such as supervisors or guardrails.\n"},{"Phase":["Build and Compilation"],"Description":"\n\nDuring model training, use an appropriate variety of good and bad examples to guide preferred outputs.\n"}],"ObservedExamples":[{"Reference":"CVE-2024-3402","Description":"chain: GUI for ChatGPT API performs input validation but does not properly \"sanitize\" or validate model output data (CWE-1426), leading to XSS (CWE-79).","Link":"https://www.cve.org/CVERecord?id=CVE-2024-3402"}],"References":[{"ExternalReferenceID":"REF-1441","Authors":["OWASP"],"Title":"LLM02: Insecure Output Handling","PublicationYear":"2024","PublicationMonth":"03","PublicationDay":"21","URL":"https://genai.owasp.org/llmrisk/llm02-insecure-output-handling/","URLDate":"2024-07-11"},{"ExternalReferenceID":"REF-1442","Authors":["Cohere","Guardrails AI"],"Title":"Validating Outputs","PublicationYear":"2023","PublicationMonth":"09","PublicationDay":"13","URL":"https://cohere.com/blog/validating-llm-outputs","URLDate":"2024-07-11"},{"ExternalReferenceID":"REF-1443","Authors":["Traian Rebedea","Razvan Dinu","Makesh Sreedhar","Christopher Parisien","Jonathan Cohen"],"Title":"NeMo Guardrails: A Toolkit for Controllable and Safe LLM Applications with Programmable Rails","PublicationYear":"2023","PublicationMonth":"12","URL":"https://aclanthology.org/2023.emnlp-demo.40/","URLDate":"2024-07-11"},{"ExternalReferenceID":"REF-1444","Authors":["Snyk"],"Title":"Insecure output handling in LLMs","URL":"https://learn.snyk.io/lesson/insecure-input-handling/","URLDate":"2024-07-11"},{"ExternalReferenceID":"REF-1445","Authors":["Yi Dong","Ronghui Mu","Gaojie Jin","Yi Qi","Jinwei Hu","Xingyu Zhao","Jie Meng","Wenjie Ruan","Xiaowei Huang"],"Title":"Building Guardrails for Large Language Models","PublicationYear":"2024","PublicationMonth":"05","PublicationDay":"29","URL":"https://arxiv.org/pdf/2402.01822","URLDate":"2024-07-11"}],"MappingNotes":{"Usage":"Discouraged","Rationale":"There is potential for this CWE entry to be modified in the future for further clarification as the research community continues to better understand weaknesses in this domain.","Comments":"\n\nThis CWE entry is only related to \"validation\" of output and might be used mistakenly for other kinds of output-related weaknesses. Careful attention should be paid to whether this CWE should be used for vulnerabilities related to \"prompt injection,\" which is an attack that works against many different weaknesses. See Maintenance Notes and Research Gaps. Analysts should closely investigate the root cause to ensure it is not ultimately due to other well-known weaknesses. The following suggestions are not comprehensive.\n","Reasons":["Potential Major Changes","Frequent Misinterpretation"],"Suggestions":[{"CweID":"77","Comment":"Command Injection. Use this CWE for most cases of 'prompt injection' attacks in which additional prompts are added to input to, or output from, the model. If OS command injection, consider CWE-78."},{"CweID":"94","Comment":"Code Injection. Use this CWE for cases in which output from genAI components is directly fed into components that parse and execute code."},{"CweID":"116","Comment":"Improper Encoding or Escaping of Output. Use this CWE when the product is expected to encode or escape genAI outputs."}]},"Notes":[{"Type":"Research Gap","Note":"This entry is related to AI/ML, which is not well understood from a weakness perspective. Typically, for new/emerging technologies including AI/ML, early vulnerability discovery and research does not focus on root cause analysis (i.e., weakness identification). For AI/ML, the recent focus has been on attacks and exploitation methods, technical impacts, and mitigations. As a result, closer research or focused efforts by SMEs is necessary to understand the underlying weaknesses. Diverse and dynamic terminology and rapidly-evolving technology further complicate understanding. Finally, there might not be enough real-world examples with sufficient details from which weakness patterns may be discovered. For example, many real-world vulnerabilities related to \"prompt injection\" appear to be related to typical injection-style attacks in which the only difference is that the \"input\" to the vulnerable component comes from model output instead of direct adversary input, similar to \"second-order SQL injection\" attacks."},{"Type":"Maintenance","Note":"This entry was created by members of the CWE AI Working Group during June and July 2024. The CWE Project Lead, CWE Technical Lead, AI WG co-chairs, and many WG members decided that for purposes of timeliness, it would be more helpful to the CWE community to publish the new entry in CWE 4.15 quickly and add to it in subsequent versions."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"Members of the CWE AI WG","SubmissionOrganization":"CWE Artificial Intelligence (AI) Working Group (WG)","SubmissionDate":"2024-07-02","SubmissionVersion":"4.15","SubmissionReleaseDate":"2024-07-16"}]}