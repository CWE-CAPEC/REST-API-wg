{"ID":"494","Name":"Download of Code Without Integrity Check","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.","ExtendedDescription":"An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.","LikelihoodOfExploit":"Medium","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"345","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"669","ViewID":"1000"},{"Nature":"ChildOf","CweID":"669","ViewID":"1003","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design","Note":"OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Availability","Confidentiality","Other"],"Impact":["Execute Unauthorized Code or Commands","Alter Execution Logic","Other"],"Note":"Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users."}],"DetectionMethods":[{"DetectionMethodID":"DM-7.4","Method":"Manual Analysis","Description":"\n\nThis weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\n\nSpecifically, manual static analysis is typically required to find the behavior that triggers the download of code, and to determine whether integrity-checking methods are in use.\n","EffectivenessNotes":"These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."},{"DetectionMethodID":"DM-11","Method":"Black Box","Description":"\n\nUse monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.\n\n\nAttach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.\n"},{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"MitigationID":"MIT-42","Phase":["Implementation"],"Description":"Perform proper forward and reverse DNS lookups to detect DNS spoofing.","EffectivenessNotes":"This is only a partial solution since it will not prevent your code from being modified on the hosting site or in transit."},{"Phase":["Architecture and Design","Operation"],"Description":"\n\nEncrypt the code with a reliable encryption scheme before transmitting.\n\n\nThis will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site.\n"},{"MitigationID":"MIT-4","Phase":["Architecture and Design"],"Strategy":"Libraries or Frameworks","Description":"\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nSpeficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code.\n\n\n  - When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.\n\n  - Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].\n\n"},{"MitigationID":"MIT-17","Phase":["Architecture and Design","Operation"],"Strategy":"Environment Hardening","Description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."},{"MitigationID":"MIT-22","Phase":["Architecture and Design","Operation"],"Strategy":"Sandbox or Jail","Description":"\n\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n","Effectiveness":"Limited","EffectivenessNotes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"This example loads an external class from a local subdirectory."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tURL[] classURLs= new URL[]{\n\t\tnew URL(\"file:subdir/\")\n\t};\n\tURLClassLoader loader = new URLClassLoader(classURLs);\n\tClass loadedClass = Class.forName(\"loadMe\", true, loader);\n```"},{"BodyText":"This code does not ensure that the class loaded is the intended one, for example by verifying the class's checksum. An attacker may be able to modify the class file to execute malicious code."}]},{"ID":"DX-219","Entries":[{"IntroText":"This code includes an external script to get database credentials, then authenticates a user against the database, allowing access to the application."},{"Nature":"Bad","Language":"PHP","ExampleCode":"```\n```\n//assume the password is already encrypted, avoiding CWE-312* \n\t\n\tfunction authenticate($username,$password){\n\t```\n\t\tinclude(\"http://external.example.com/dbInfo.php\");\n```\n//dbInfo.php makes $dbhost, $dbuser, $dbpass, $dbname available* \n\t\tmysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql');\n\t\tmysql_select_db($dbname);\n\t\t$query = 'Select * from users where username='.$username.' And password='.$password;\n\t\t$result = mysql_query($query);\n\t\t\n\t\tif(mysql_numrows($result) == 1){\n\t\t```\n\t\t\tmysql_close();\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\tmysql_close();\n\t\t\treturn false;\n\t\t}\n\t}\n```"},{"BodyText":"This code does not verify that the external domain accessed is the intended one. An attacker may somehow cause the external domain name to resolve to an attack server, which would provide the information for a false database. The attacker may then steal the usernames and encrypted passwords from real user login attempts, or simply allow themself to access the application without a real user account."},{"BodyText":"This example is also vulnerable to an Adversary-in-the-Middle AITM (CWE-300) attack."}]}],"ObservedExamples":[{"Reference":"CVE-2019-9534","Description":"Satellite phone does not validate its firmware image.","Link":"https://www.cve.org/CVERecord?id=CVE-2019-9534"},{"Reference":"CVE-2021-22909","Description":"Chain: router's firmware update procedure uses curl with \"-k\" (insecure) option that disables certificate validation (CWE-295), allowing adversary-in-the-middle (AITM) compromise with a malicious firmware image (CWE-494).","Link":"https://www.cve.org/CVERecord?id=CVE-2021-22909"},{"Reference":"CVE-2008-3438","Description":"OS does not verify authenticity of its own updates.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-3438"},{"Reference":"CVE-2008-3324","Description":"online poker client does not verify authenticity of its own updates.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-3324"},{"Reference":"CVE-2001-1125","Description":"anti-virus product does not verify automatic updates for itself.","Link":"https://www.cve.org/CVERecord?id=CVE-2001-1125"},{"Reference":"CVE-2002-0671","Description":"VOIP phone downloads applications from web sites without verifying integrity.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-0671"}],"TaxonomyMappings":[{"TaxonomyName":"CLASP","EntryName":"Invoking untrusted mobile code"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"SEC06-J","EntryName":"Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP27","EntryName":"Tainted input to environment"}],"RelatedAttackPatterns":["184","185","186","187","533","538","657","662","691","692","693","695"],"References":[{"ExternalReferenceID":"REF-454","Authors":["Microsoft"],"Title":"Introduction to Code Signing","URL":"http://msdn.microsoft.com/en-us/library/ms537361(VS.85).aspx"},{"ExternalReferenceID":"REF-455","Authors":["Microsoft"],"Title":"Authenticode","URL":"http://msdn.microsoft.com/en-us/library/ms537359(v=VS.85).aspx"},{"ExternalReferenceID":"REF-456","Authors":["Apple"],"Title":"Code Signing Guide","Publication":"Apple Developer Connection","PublicationYear":"2008","PublicationMonth":"11","PublicationDay":"19","URL":"https://web.archive.org/web/20080724215143/http://developer.apple.com/documentation/Security/Conceptual/CodeSigningGuide/Introduction/chapter_1_section_1.html","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-457","Authors":["Anthony Bellissimo","John Burgess","Kevin Fu"],"Title":"Secure Software Updates: Disappointments and New Challenges","URL":"http://prisms.cs.umass.edu/~kevinfu/papers/secureupdates-hotsec06.pdf"},{"ExternalReferenceID":"REF-44","Section":"\"Sin 18: The Sins of Mobile Code.\" Page 267","Authors":["Michael Howard","David LeBlanc","John Viega"],"Title":"24 Deadly Sins of Software Security","Publication":"McGraw-Hill","PublicationYear":"2010"},{"ExternalReferenceID":"REF-459","Authors":["Johannes Ullrich"],"Title":"Top 25 Series - Rank 20 - Download of Code Without Integrity Check","PublicationYear":"2010","PublicationMonth":"04","PublicationDay":"05","Publisher":"SANS Software Security Institute","URL":"https://www.sans.org/blog/top-25-series-rank-20-download-of-code-without-integrity-check/","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-76","Authors":["Sean Barnum","Michael Gegick"],"Title":"Least Privilege","PublicationYear":"2005","PublicationMonth":"09","PublicationDay":"14","URL":"https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-18","Authors":["Secure Software, Inc."],"Title":"The CLASP Application Security Process","PublicationYear":"2005","URL":"https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Research Gap","Note":"This is critical for mobile code, but it is likely to become more and more common as developers continue to adopt automated, network-based product distributions and upgrades. Software-as-a-Service (SaaS) might introduce additional subtleties. Common exploitation scenarios may include ad server compromises and bad upgrades."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"CLASP","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Relationships, Other_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-01-12","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Description, Name, Other_Notes, Potential_Mitigations, References, Relationships, Research_Gaps, Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-03-10","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-07-27","ModificationComment":"updated Description, Observed_Examples, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Detection_Factors, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-04-05","ModificationComment":"updated Applicable_Platforms"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Common_Consequences, Detection_Factors, Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-12-13","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-03-29","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Modes_of_Introduction, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Demonstrative_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated References, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated References, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Demonstrative_Examples, Relationships","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"},{"Type":"Rename","PreviousEntryName":"Mobile Code: Invoking Untrusted Mobile Code","Date":"2008-04-11"},{"Type":"Rename","PreviousEntryName":"Download of Untrusted Mobile Code Without Integrity Check","Date":"2009-01-12"}]}