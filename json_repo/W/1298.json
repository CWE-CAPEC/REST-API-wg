{"ID":"1298","Name":"Hardware Logic Contains Race Conditions","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"A race condition in the hardware logic results in undermining security guarantees of the system.","ExtendedDescription":"\n\nA race condition in logic circuits typically occurs when a logic gate gets inputs from signals that have traversed different paths while originating from the same source. Such inputs to the gate can change at slightly different times in response to a change in the source signal. This results in a timing error or a glitch (temporary or permanent) that causes the output to change to an unwanted state before settling back to the desired state. If such timing errors occur in access control logic or finite state machines that are implemented in security sensitive flows, an attacker might exploit them to circumvent existing protections.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"362","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"Verilog","Prevalence":"Undetermined"},{"Type":"Language","Name":"VHDL","Prevalence":"Undetermined"},{"Type":"Technology","Class":"System on Chip","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Access Control"],"Impact":["Bypass Protection Mechanism","Gain Privileges or Assume Identity","Alter Execution Logic"]}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"Adopting design practices that encourage designers to recognize and eliminate race conditions, such as Karnaugh maps, could result in the decrease in occurrences of race conditions."},{"Phase":["Implementation"],"Description":"Logic redundancy can be implemented along security critical paths to prevent race conditions. To avoid metastability, it is a good practice in general to default to a secure state in which access is not given to untrusted agents."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"The code below shows a 2x1 multiplexor using logic gates. Though the code shown below results in the minimum gate solution, it is disjoint and causes glitches."},{"Nature":"Bad","Language":"Verilog","ExampleCode":"// 2x1 Multiplexor using logic-gates\n\n module glitchEx(\n\n```\n\t input wire in0, in1, sel,\n\t output wire z\n );\n wire not_sel;\n wire and_out1, and_out2;\n assign not_sel = ~sel;\n assign and_out1 = not_sel \u0026 in0;\n assign and_out2 = sel \u0026 in1;\n // Buggy line of code:\n assign z = and_out1 | and_out2; // glitch in signal z\n endmodule\n```"},{"BodyText":"The buggy line of code, commented above, results in signal 'z' periodically changing to an unwanted state. Thus, any logic that references signal 'z' may access it at a time when it is in this unwanted state. This line should be replaced with the line shown below in the Good Code Snippet which results in signal 'z' remaining in a continuous, known, state. Reference for the above code, along with waveforms for simulation can be found in the references below."},{"Nature":"Good","Language":"Verilog","ExampleCode":"assign z \u003c= and_out1 or and_out2 or (in0 and in1);"},{"BodyText":"This line of code removes the glitch in signal z."}]},{"Entries":[{"IntroText":"The example code is taken from the DMA (Direct Memory Access) module of the buggy OpenPiton SoC of HACK@DAC'21. The DMA contains a finite-state machine (FSM) for accessing the permissions using the physical memory protection (PMP) unit.\n\n\nPMP provides secure regions of physical memory against unauthorized access. It allows an operating system or a hypervisor to define a series of physical memory regions and then set permissions for those regions, such as read, write, and execute permissions. When a user tries to access a protected memory area (e.g., through DMA), PMP checks the access of a PMP address (e.g., pmpaddr_i) against its configuration (pmpcfg_i). If the access violates the defined permissions (e.g., CTRL_ABORT), the PMP can trigger a fault or an interrupt. This access check is implemented in the pmp parametrized module in the below code snippet. The below code assumes that the state of the pmpaddr_i and pmpcfg_i signals will not change during the different DMA states (i.e., CTRL_IDLE to CTRL_DONE) while processing a DMA request (via dma_ctrl_reg). The DMA state machine is implemented using a case statement (not shown in the code snippet)."},{"Nature":"Bad","Language":"Verilog","ExampleCode":"module dma # (...)(...);\n ...\n\n```\n\t input [7:0] [16-1:0] pmpcfg_i;\n\t input logic [16-1:0][53:0] pmpaddr_i;\n\t ...\n\t //// Save the input command\n\t always @ (posedge clk_i or negedge rst_ni)\n\t\t begin: save_inputs\n\t\t if (!rst_ni)\n\t\t\t begin\n\t\t\t ...\n\t\t\t end\n\t\t else\n\t\t\t begin\n\t\t\t\t if (dma_ctrl_reg == CTRL_IDLE || dma_ctrl_reg == CTRL_DONE)\n\t\t\t\t begin\n\t\t\t\t ...\n\t\t\t\t end\n\t\t\t end\n\t\t end // save_inputs\n\t\t ...\n\t\t // Load/store PMP check\n\t\t pmp #(\n\t\t\t .XLEN ( 64 ),\n\t\t\t .PMP_LEN ( 54 ),\n\t\t\t .NR_ENTRIES ( 16 )\n\t\t ) i_pmp_data (\n\t\t\t .addr_i ( pmp_addr_reg ),\n\t\t\t .priv_lvl_i ( riscv::PRIV_LVL_U ),\n\t\t\t .access_type_i ( pmp_access_type_reg ),\n\t\t\t // Configuration\n\t\t\t .conf_addr_i ( \n```\npmpaddr_i**  ),\n\t\t\t .conf_i ( \n\t\t\t **pmpcfg_i**  ),\n\t\t\t .allow_o ( pmp_data_allow )\n\t\t\t );\n\t\t endmodule"},{"BodyText":"However, the above code [REF-1394] allows the values of pmpaddr_i and pmpcfg_i to be changed through DMA's input ports. This causes a race condition and will enable attackers to access sensitive addresses that the configuration is not associated with.\n\n\nAttackers can initialize the DMA access process (CTRL_IDLE) using pmpcfg_i for a non-privileged PMP address (pmpaddr_i). Then during the loading state (CTRL_LOAD), attackers can replace the non-privileged address in pmpaddr_i with a privileged address without the requisite authorized access configuration.\n\n\nTo fix this issue (see [REF-1395]), the value of the pmpaddr_i and pmpcfg_i signals should be stored in local registers (pmpaddr_reg and pmpcfg_reg at the start of the DMA access process and the pmp module should reference those registers instead of the signals directly. The values of the registers can only be updated at the start (CTRL_IDLE) or the end (CTRL_DONE) of the DMA access process, which prevents attackers from changing the PMP address in the middle of the DMA access process."},{"Nature":"Good","Language":"Verilog","ExampleCode":"module dma # (...)(...);\n ...\n\n```\n\t input [7:0] [16-1:0] pmpcfg_i; \n\t input logic [16-1:0][53:0] pmpaddr_i;\n\t ...\n```\nreg [7:0] [16-1:0] pmpcfg_reg;** \n\t\n\t **reg [16-1:0][53:0] pmpaddr_reg;** \n\t ...\n\t //// Save the input command\n\t always @ (posedge clk_i or negedge rst_ni)\n\t\n\t```\n\t\t begin: save_inputs\n\t\t if (!rst_ni)\n\t\t\t begin\n\t\t\t ...\n```\npmpaddr_reg \u003c= 'b0 ;** \n\t\t\t\n\t\t\t **pmpcfg_reg \u003c= 'b0 ;** \n\t\t\t end\n\t\t\t else \n\t\t\n\t\t```\n\t\t\t begin\n\t\t\t\t if (dma_ctrl_reg == CTRL_IDLE || dma_ctrl_reg == CTRL_DONE) \n\t\t\t\t begin\n\t\t\t\t ...\n```\npmpaddr_reg \u003c= pmpaddr_i;** \n\t\t\t\t\n\t\t\t\t **pmpcfg_reg \u003c= pmpcfg_i;** \n\t\t\t\t end\n\t\t\t\t end \n\t\t\t end // save_inputs\n\t\t ...\n\t\t // Load/store PMP check\n\t\t pmp #(\n\t\t\n\t\t```\n\t\t\t .XLEN ( 64 ),\n\t\t\t .PMP_LEN ( 54 ),\n\t\t\t .NR_ENTRIES ( 16 )\n\t\t ) i_pmp_data (\n\t\t\t .addr_i ( pmp_addr_reg ),\n\t\t\t .priv_lvl_i ( riscv::PRIV_LVL_U ), // we intend to apply filter on\n\t\t\t // DMA always, so choose the least privilege .access_type_i ( pmp_access_type_reg ),\n\t\t\t // Configuration\n\t\t\t .conf_addr_i ( \n```\npmpaddr_reg**  ),\n\t\t\t .conf_i ( \n\t\t\t **pmpcfg_reg**  ),\n\t\t\t .allow_o ( pmp_data_allow )\n\t\t\t );\n\t\t endmodule"}]}],"RelatedAttackPatterns":["26"],"References":[{"ExternalReferenceID":"REF-1115","Authors":["Meher Krishna Patel"],"Title":"FPGA designs with Verilog (section 7.4 Glitches)","URL":"https://verilogguide.readthedocs.io/en/latest/verilog/fsm.html"},{"ExternalReferenceID":"REF-1116","Authors":["Clifford E. Cummings"],"Title":"Non-Blocking Assignments in Verilog Synthesis, Coding Styles that Kill!","PublicationYear":"2000","URL":"http://www.sunburst-design.com/papers/CummingsSNUG2000SJ_NBA.pdf"},{"ExternalReferenceID":"REF-1394","Title":"dma.sv","PublicationYear":"2021","URL":"https://github.com/HACK-EVENT/hackatdac21/blob/main/piton/design/chip/tile/ariane/src/dma/dma.sv","URLDate":"2024-02-09"},{"ExternalReferenceID":"REF-1395","Title":"Fix for dma.sv","PublicationYear":"2021","URL":"https://github.com/HACK-EVENT/hackatdac21/blob/cwe_1298_in_dma/piton/design/chip/tile/ariane/src/dma/dma.sv","URLDate":"2024-02-09"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi","SubmissionOrganization":"Intel Corporation","SubmissionDate":"2020-02-10","SubmissionVersion":"4.2","SubmissionReleaseDate":"2020-08-20"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Demonstrative_Examples, References","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"},{"Type":"Contribution","ContributionName":"Chen Chen, Rahul Kande, Jeyavijayan Rajendran","ContributionOrganization":"Texas A\u0026M University","ContributionDate":"2023-11-29","ContributionComment":"suggested demonstrative example","ContributionType":"Content"},{"Type":"Contribution","ContributionName":"Shaza Zeitouni, Mohamadreza Rostami, Ahmad-Reza Sadeghi","ContributionOrganization":"Technical University of Darmstadt","ContributionDate":"2023-11-29","ContributionComment":"suggested demonstrative example","ContributionType":"Content"}]}