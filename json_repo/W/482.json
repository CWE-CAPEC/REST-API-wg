{"ID":"482","Name":"Comparing instead of Assigning","Abstraction":"Variant","Structure":"Simple","Status":"Draft","Description":"The code uses an operator for comparison when the intention was to perform an assignment.","ExtendedDescription":"In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused.","LikelihoodOfExploit":"Low","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"480","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Undetermined"},{"Type":"Language","Name":"C++","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation","Note":"This bug primarily originates from a typo."}],"CommonConsequences":[{"Scope":["Availability","Integrity"],"Impact":["Unexpected State"],"Note":"The assignment will not take place, which should cause obvious program execution problems."}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Testing"],"Description":"Many IDEs and static analysis products will detect this problem."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"The following example demonstrates the weakness."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tvoid called(int foo) {\n\t\tfoo==1;\n\t\tif (foo==1) System.out.println(\"foo\\n\");\n\t}\n\tint main() {\n\t\t\tcalled(2);\n\t\t\treturn 0;\n\t}\n```"}]},{"ID":"DX-103","Entries":[{"IntroText":"The following C/C++ example shows a simple implementation of a stack that includes methods for adding and removing integer values from the stack. The example uses pointers to add and remove integer values to the stack array variable."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\t#define SIZE 50\n\tint *tos, *p1, stack[SIZE];\n\tvoid push(int i) {\n\t\t\tp1++;\n\t\t\tif(p1==(tos+SIZE)) {\n```\n// Print stack overflow error message and exit* \n\t\t\t\t\t}\n\t\t\t*p1 == i;}\n\t\n\tint pop(void) {\n\t```\n\t\t\tif(p1==tos) {\n```\n// Print stack underflow error message and exit* \n\t\t\t\t\t}\n\t\t\tp1--;\n\t\t\treturn *(p1+1);}\n\t\n\tint main(int argc, char *argv[]) {\n\t```\n```\n// initialize tos and p1 to point to the top of stack* \n\t\t\ttos = stack;\n\t\t\tp1 = stack;\n\t\t\t\n\t\t\t *// code to add and remove items from stack* \n\t\t\t...\n\t\t\treturn 0;}"},{"BodyText":"The push method includes an expression to assign the integer value to the location in the stack pointed to by the pointer variable."},{"BodyText":"However, this expression uses the comparison operator \"==\" rather than the assignment operator \"=\". The result of using the comparison operator instead of the assignment operator causes erroneous values to be entered into the stack and can cause unexpected results."}]}],"TaxonomyMappings":[{"TaxonomyName":"CLASP","EntryName":"Comparing instead of assigning"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP2","EntryName":"Unused Entities"}],"References":[{"ExternalReferenceID":"REF-18","Authors":["Secure Software, Inc."],"Title":"The CLASP Application Security Process","PublicationYear":"2005","URL":"https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf"},{"ExternalReferenceID":"REF-62","Section":"Chapter 6, \"Typos\", Page 289","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CLASP","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Applicable_Platforms, Description, Relationships, Other_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-07-27","ModificationComment":"updated Common_Consequences, Modes_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-10-29","ModificationComment":"updated Other_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Demonstrative_Examples, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-01-19","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Demonstrative_Examples, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}