{"ID":"197","Name":"Numeric Truncation Error","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.","ExtendedDescription":"When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.","LikelihoodOfExploit":"Low","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"681","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"681","ViewID":"1305","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"681","ViewID":"1340","Ordinal":"Primary"},{"Nature":"CanAlsoBe","CweID":"195","ViewID":"1000"},{"Nature":"CanAlsoBe","CweID":"196","ViewID":"1000"},{"Nature":"CanAlsoBe","CweID":"192","ViewID":"1000"},{"Nature":"CanAlsoBe","CweID":"194","ViewID":"1000"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Undetermined"},{"Type":"Language","Name":"C++","Prevalence":"Undetermined"},{"Type":"Language","Name":"Java","Prevalence":"Undetermined"},{"Type":"Language","Name":"C#","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity"],"Impact":["Modify Memory"],"Note":"The true value of the data is lost and corrupted data is used."}],"DetectionMethods":[{"DetectionMethodID":"DM-13","Method":"Fuzzing","Description":"Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.","Effectiveness":"High"},{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"This example, while not exploitable, shows the possible mangling of values associated with truncation errors:"},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tint intPrimitive;\n\tshort shortPrimitive;\n\tintPrimitive = (int)(~((int)0) ^ (1 \u003c\u003c (sizeof(int)*8-1)));\n\tshortPrimitive = intPrimitive;\n\tprintf(\"Int MAXINT: %d\\nShort MAXINT: %d\\n\", intPrimitive, shortPrimitive);\n```"},{"BodyText":"The above code, when compiled and run on certain systems, returns the following output:"},{"Nature":"Result","ExampleCode":"```\n\tInt MAXINT: 2147483647\n\tShort MAXINT: -1\n```"},{"BodyText":"This problem may be exploitable when the truncated value is used as an array index, which can happen implicitly when 64-bit values are used as indexes, as they are truncated to 32 bits."}]},{"Entries":[{"IntroText":"In the following Java example, the method updateSalesForProduct is part of a business application class that updates the sales information for a particular product. The method receives as arguments the product ID and the integer amount sold. The product ID is used to retrieve the total product count from an inventory object which returns the count as an integer. Before calling the method of the sales object to update the sales count the integer values are converted to The primitive type short since the method requires short type for the method arguments."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\t...\n```\n// update sales database for number of product sold with product ID* \n\tpublic void updateSalesForProduct(String productID, int amountSold) {\n\t```\n```\n// get the total number of products in inventory database* \n\t\t\tint productCount = inventory.getProductCount(productID);\n\t\t\t\n\t\t\t *// convert integer values to short, the method for the* \n\t\t\t\n\t\t\t\n\t\t\t *// sales object requires the parameters to be of type short* \n\t\t\tshort count = (short) productCount;\n\t\t\tshort sold = (short) amountSold;\n\t\t\t\n\t\t\t *// update sales database for product* \n\t\t\tsales.updateSalesCount(productID, count, sold);}\n\t..."},{"BodyText":"However, a numeric truncation error can occur if the integer values are higher than the maximum value allowed for the primitive type short. This can cause unexpected results or loss or corruption of data. In this case the sales database may be corrupted with incorrect data. Explicit casting from a from a larger size primitive type to a smaller size primitive type should be prevented. The following example an if statement is added to validate that the integer values less than the maximum value for the primitive type short before the explicit cast and the call to the sales method."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\t...\n```\n// update sales database for number of product sold with product ID* \n\tpublic void updateSalesForProduct(String productID, int amountSold) {\n\t```\n```\n// get the total number of products in inventory database* \n\t\t\tint productCount = inventory.getProductCount(productID);\n\t\t\t\n\t\t\t *// make sure that integer numbers are not greater than* \n\t\t\t\n\t\t\t\n\t\t\t *// maximum value for type short before converting* \n\t\t\tif ((productCount \u003c Short.MAX_VALUE) \u0026\u0026 (amountSold \u003c Short.MAX_VALUE)) {\n\t\t\t```\n```\n// convert integer values to short, the method for the* \n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// sales object requires the parameters to be of type short* \n\t\t\t\t\tshort count = (short) productCount;\n\t\t\t\t\tshort sold = (short) amountSold;\n\t\t\t\t\t\n\t\t\t\t\t *// update sales database for product* \n\t\t\t\t\tsales.updateSalesCount(productID, count, sold);\n\t\t\telse {\n\t\t\t\n\t\t\t *// throw exception or perform other processing* \n\t\t\t\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n\t}\n\t...\n```"}]}],"ObservedExamples":[{"Reference":"CVE-2020-17087","Description":"Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-17087"},{"Reference":"CVE-2009-0231","Description":"Integer truncation of length value leads to heap-based buffer overflow.","Link":"https://www.cve.org/CVERecord?id=CVE-2009-0231"},{"Reference":"CVE-2008-3282","Description":"Size of a particular type changes for 64-bit platforms, leading to an integer truncation in document processor causes incorrect index to be generated.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-3282"}],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"Numeric truncation error"},{"TaxonomyName":"CLASP","EntryName":"Truncation error"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"FIO34-C","EntryName":"Distinguish between characters read from a file and EOF or WEOF","MappingFit":"CWE More Abstract"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"FLP34-C","EntryName":"Ensure that floating point conversions are within range of the new type","MappingFit":"CWE More Abstract"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"INT02-C","EntryName":"Understand integer conversion rules"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"INT05-C","EntryName":"Do not use input functions to convert character data if they cannot handle all possible inputs"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"INT31-C","EntryName":"Ensure that integer conversions do not result in lost or misinterpreted data","MappingFit":"CWE More Abstract"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"NUM12-J","EntryName":"Ensure conversions of numeric types to narrower types do not result in lost or misinterpreted data"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP1","EntryName":"Glitch in computation"}],"References":[{"ExternalReferenceID":"REF-62","Section":"Chapter 6, \"Truncation\", Page 259","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Research Gap","Note":"This weakness has traditionally been under-studied and under-reported, although vulnerabilities in popular software have been published in 2008 and 2009."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-07-27","ModificationComment":"updated Description, Observed_Examples, Other_Notes, Research_Gaps"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-12-13","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}