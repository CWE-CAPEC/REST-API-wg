{"ID":"89","Name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","Abstraction":"Base","Structure":"Simple","Status":"Stable","Diagram":"/data/images/CWE-89-Diagram.png","Description":"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.","LikelihoodOfExploit":"High","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"943","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"74","ViewID":"1003","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Name":"Database Server","Prevalence":"Undetermined"}],"AlternateTerms":[{"Term":"SQL injection","Description":"a common attack-oriented phrase"},{"Term":"SQLi","Description":"a common abbreviation for \"SQL injection\""}],"ModesOfIntroduction":[{"Phase":"Implementation","Note":"REALIZATION: This weakness is caused during implementation of an architectural security tactic."},{"Phase":"Implementation","Note":"This weakness typically appears in data-rich applications that save user inputs in a database."}],"CommonConsequences":[{"Scope":["Confidentiality","Integrity","Availability"],"Impact":["Execute Unauthorized Code or Commands"],"Note":"Adversaries could execute system commands, typically by changing the SQL statement to redirect output to a file that can then be executed."},{"Scope":["Confidentiality"],"Impact":["Read Application Data"],"Note":"Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities."},{"Scope":["Authentication"],"Impact":["Gain Privileges or Assume Identity","Bypass Protection Mechanism"],"Note":"If poor SQL commands are used to check user names and passwords or perform other kinds of authentication, it may be possible to connect to the product as another user with no previous knowledge of the password."},{"Scope":["Access Control"],"Impact":["Bypass Protection Mechanism"],"Note":"If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability."},{"Scope":["Integrity"],"Impact":["Modify Application Data"],"Note":"Just as it may be possible to read sensitive information, it is also possible to modify or even delete this information with a SQL injection attack."}],"DetectionMethods":[{"DetectionMethodID":"DM-1","Method":"Automated Static Analysis","Description":"\n\nThis weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.\n\n\nAutomated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes.\n\n\nAutomated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.\n","EffectivenessNotes":"This is not a perfect solution, since 100% accuracy and coverage are not feasible."},{"DetectionMethodID":"DM-2","Method":"Automated Dynamic Analysis","Description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.","Effectiveness":"Moderate"},{"DetectionMethodID":"DM-9","Method":"Manual Analysis","Description":"Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large."},{"Method":"Automated Static Analysis - Binary or Bytecode","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis","Effectiveness":"High"},{"Method":"Dynamic Analysis with Automated Results Interpretation","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tDatabase Scanners\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner","Effectiveness":"High"},{"Method":"Dynamic Analysis with Manual Results Interpretation","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer","Effectiveness":"SOAR Partial"},{"Method":"Manual Static Analysis - Source Code","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source","Effectiveness":"High"},{"Method":"Automated Static Analysis - Source Code","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer","Effectiveness":"High"},{"Method":"Architecture or Design Review","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"MitigationID":"MIT-4","Phase":["Architecture and Design"],"Strategy":"Libraries or Frameworks","Description":"\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.\n"},{"MitigationID":"MIT-27","Phase":["Architecture and Design"],"Strategy":"Parameterization","Description":"\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\n\nProcess SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]\n"},{"MitigationID":"MIT-17","Phase":["Architecture and Design","Operation"],"Strategy":"Environment Hardening","Description":"\n\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\n\nSpecifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.\n"},{"MitigationID":"MIT-15","Phase":["Architecture and Design"],"Description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."},{"MitigationID":"MIT-28","Phase":["Implementation"],"Strategy":"Output Encoding","Description":"\n\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\n\nInstead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.\n"},{"MitigationID":"MIT-5","Phase":["Implementation"],"Strategy":"Input Validation","Description":"\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.\n\n\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name \"O'Reilly\" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.\n\n\nWhen feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.\n"},{"MitigationID":"MIT-21","Phase":["Architecture and Design"],"Strategy":"Enforcement by Conversion","Description":"When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."},{"MitigationID":"MIT-39","Phase":["Implementation"],"Description":"\n\nEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\n\n\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\n\n\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\n\nIn the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.\n"},{"MitigationID":"MIT-29","Phase":["Operation"],"Strategy":"Firewall","Description":"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","Effectiveness":"Moderate","EffectivenessNotes":"An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."},{"MitigationID":"MIT-16","Phase":["Operation","Implementation"],"Strategy":"Environment Hardening","Description":"When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"In 2008, a large number of web servers were compromised using the same SQL injection attack string. This single string worked against many different programs. The SQL injection was then used to modify the web sites to serve malicious code."}]},{"ID":"DX-209","Entries":[{"IntroText":"The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user."},{"Nature":"Bad","Language":"C#","ExampleCode":"```\n\t...\n\tstring userName = ctx.getAuthenticatedUserName();\n\tstring query = \"SELECT * FROM items WHERE owner = '\" + userName + \"' AND itemname = '\" + ItemName.Text + \"'\";\n\tsda = new SqlDataAdapter(query, conn);\n\tDataTable dt = new DataTable();\n\tsda.Fill(dt);\n\t...\n```"},{"BodyText":"The query that this code intends to execute follows:"},{"Nature":"Informative","ExampleCode":"```\n\tSELECT * FROM items WHERE owner = \u003cuserName\u003e AND itemname = \u003citemName\u003e;\n```"},{"BodyText":"However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string:"},{"Nature":"Attack","ExampleCode":"```\n\tname' OR 'a'='a\n```"},{"BodyText":"for itemName, then the query becomes the following:"},{"Nature":"Attack","ExampleCode":"```\n\tSELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';\n```"},{"BodyText":"The addition of the:"},{"Nature":"Attack","ExampleCode":"```\n\tOR 'a'='a\n```"},{"BodyText":"condition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:"},{"Nature":"Attack","ExampleCode":"```\n\tSELECT * FROM items;\n```"},{"BodyText":"This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner."}]},{"Entries":[{"IntroText":"This example examines the effects of a different malicious value passed to the query constructed and executed in the previous example."},{"BodyText":"If an attacker with the user name wiley enters the string:"},{"Nature":"Attack","ExampleCode":"```\n\tname'; DELETE FROM items; --\n```"},{"BodyText":"for itemName, then the query becomes the following two queries:"},{"Nature":"Attack","Language":"SQL","ExampleCode":"```\n\tSELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';\n\tDELETE FROM items;\n```\n--'*"},{"BodyText":"Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database."},{"BodyText":"Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in the previous example."},{"BodyText":"If an attacker enters the string"},{"Nature":"Attack","ExampleCode":"```\n\tname'; DELETE FROM items; SELECT * FROM items WHERE 'a'='a\n```"},{"BodyText":"Then the following three valid statements will be created:"},{"Nature":"Attack","ExampleCode":"```\n\tSELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';\n\tDELETE FROM items;\n\tSELECT * FROM items WHERE 'a'='a';\n```"},{"BodyText":"One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allowlist of safe values or identify and escape a denylist of potentially malicious values. Allowlists can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, denylisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:"},{"BodyText":"- Target fields that are not quoted\n\n  - Find ways to bypass the need for certain escaped meta-characters\n\n  - Use stored procedures to hide the injected meta-characters."},{"BodyText":"Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks."},{"BodyText":"Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they do not protect against many others. For example, the following PL/SQL procedure is vulnerable to the same SQL injection attack shown in the first example."},{"Nature":"Bad","ExampleCode":"```\n\tprocedure get_item ( itm_cv IN OUT ItmCurTyp, usr in varchar2, itm in varchar2)\n\tis open itm_cv for\n\t' SELECT * FROM items WHERE ' || 'owner = '|| usr || ' AND itemname = ' || itm || ';\n\tend get_item;\n```"},{"BodyText":"Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks."}]},{"Entries":[{"IntroText":"MS SQL has a built in function that enables shell command execution. An SQL injection in such a context could be disastrous. For example, a query of the form:"},{"Nature":"Bad","ExampleCode":"```\n\tSELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='$user_input' ORDER BY PRICE\n```"},{"BodyText":"Where $user_input is taken from an untrusted source."},{"BodyText":"If the user provides the string:"},{"Nature":"Attack","ExampleCode":"```\n\t'; exec master..xp_cmdshell 'dir' --\n```"},{"BodyText":"The query will take the following form:"},{"Nature":"Attack","ExampleCode":"```\n\tSELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=''; exec master..xp_cmdshell 'dir' --' ORDER BY PRICE\n```"},{"BodyText":"Now, this query can be broken down into:"},{"BodyText":"1. a first SQL query: SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='';\n\n  1. a second SQL query, which executes the dir command in the shell: exec master..xp_cmdshell 'dir'\n\n  1. an MS SQL comment: --' ORDER BY PRICE"},{"BodyText":"As can be seen, the malicious input changes the semantics of the query into a query, a shell command execution and a comment."}]},{"Entries":[{"IntroText":"This code intends to print a message summary given the message ID."},{"Nature":"Bad","Language":"PHP","ExampleCode":"```\n\t$id = $_COOKIE[\"mid\"];\n\tmysql_query(\"SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'\");\n```"},{"BodyText":"The programmer may have skipped any input validation on $id under the assumption that attackers cannot modify the cookie. However, this is easy to do with custom client code or even in the web browser."},{"BodyText":"While $id is wrapped in single quotes in the call to mysql_query(), an attacker could simply change the incoming mid cookie to:"},{"Nature":"Attack","ExampleCode":"```\n\t1432' or '1' = '1\n```"},{"BodyText":"This would produce the resulting query:"},{"Nature":"Result","ExampleCode":"```\n\tSELECT MessageID, Subject FROM messages WHERE MessageID = '1432' or '1' = '1'\n```"},{"BodyText":"Not only will this retrieve message number 1432, it will retrieve all other messages."},{"BodyText":"In this case, the programmer could apply a simple modification to the code to eliminate the SQL injection:"},{"Nature":"Good","Language":"PHP","ExampleCode":"```\n\t$id = intval($_COOKIE[\"mid\"]);\n\tmysql_query(\"SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'\");\n```"},{"BodyText":"However, if this code is intended to support multiple users with different message boxes, the code might also need an access control check (CWE-285) to ensure that the application user has the permission to see that message."}]},{"Entries":[{"IntroText":"This example attempts to take a last name provided by a user and enter it into a database."},{"Nature":"Bad","Language":"Perl","ExampleCode":"```\n\t$userKey = getUserID();\n\t$name = getUserInput();\n```\n# ensure only letters, hyphens and apostrophe are allowed* \n\t$name = allowList($name, \"^a-zA-z'-$\");\n\t$query = \"INSERT INTO last_names VALUES('$userKey', '$name')\";"},{"BodyText":"While the programmer applies an allowlist to the user input, it has shortcomings. First of all, the user is still allowed to provide hyphens, which are used as comment structures in SQL. If a user specifies \"--\" then the remainder of the statement will be treated as a comment, which may bypass security logic. Furthermore, the allowlist permits the apostrophe, which is also a data / command separator in SQL. If a user supplies a name with an apostrophe, they may be able to alter the structure of the whole statement and even change control flow of the program, possibly accessing or modifying confidential information. In this situation, both the hyphen and apostrophe are legitimate characters for a last name and permitting them is required. Instead, a programmer may want to use a prepared statement or apply an encoding routine to the input to prevent any data / directive misinterpretations."}]}],"ObservedExamples":[{"Reference":"CVE-2023-32530","Description":"SQL injection in security product dashboard using crafted certificate fields","Link":"https://www.cve.org/CVERecord?id=CVE-2023-32530"},{"Reference":"CVE-2021-42258","Description":"SQL injection in time and billing software, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2021-42258"},{"Reference":"CVE-2021-27101","Description":"SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2021-27101"},{"Reference":"CVE-2020-12271","Description":"SQL injection in firewall product's admin interface or user portal, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-12271"},{"Reference":"CVE-2019-3792","Description":"An automation system written in Go contains an API that is vulnerable to SQL injection allowing the attacker to read privileged data.","Link":"https://www.cve.org/CVERecord?id=CVE-2019-3792"},{"Reference":"CVE-2004-0366","Description":"chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0366"},{"Reference":"CVE-2008-2790","Description":"SQL injection through an ID that was supposed to be numeric.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-2790"},{"Reference":"CVE-2008-2223","Description":"SQL injection through an ID that was supposed to be numeric.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-2223"},{"Reference":"CVE-2007-6602","Description":"SQL injection via user name.","Link":"https://www.cve.org/CVERecord?id=CVE-2007-6602"},{"Reference":"CVE-2008-5817","Description":"SQL injection via user name or password fields.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-5817"},{"Reference":"CVE-2003-0377","Description":"SQL injection in security product, using a crafted group name.","Link":"https://www.cve.org/CVERecord?id=CVE-2003-0377"},{"Reference":"CVE-2008-2380","Description":"SQL injection in authentication library.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-2380"},{"Reference":"CVE-2017-11508","Description":"SQL injection in vulnerability management and reporting tool, using a crafted password.","Link":"https://www.cve.org/CVERecord?id=CVE-2017-11508"}],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"SQL injection"},{"TaxonomyName":"7 Pernicious Kingdoms","EntryName":"SQL Injection"},{"TaxonomyName":"CLASP","EntryName":"SQL injection"},{"TaxonomyName":"OWASP Top Ten 2007","EntryID":"A2","EntryName":"Injection Flaws","MappingFit":"CWE More Specific"},{"TaxonomyName":"OWASP Top Ten 2004","EntryID":"A1","EntryName":"Unvalidated Input","MappingFit":"CWE More Specific"},{"TaxonomyName":"OWASP Top Ten 2004","EntryID":"A6","EntryName":"Injection Flaws","MappingFit":"CWE More Specific"},{"TaxonomyName":"WASC","EntryID":"19","EntryName":"SQL Injection"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP24","EntryName":"Tainted input to command"},{"TaxonomyName":"OMG ASCSM","EntryID":"ASCSM-CWE-89"},{"TaxonomyName":"SEI CERT Oracle Coding Standard for Java","EntryID":"IDS00-J","EntryName":"Prevent SQL injection","MappingFit":"Exact"}],"RelatedAttackPatterns":["108","109","110","470","66","7"],"References":[{"ExternalReferenceID":"REF-44","Section":"\"Sin 1: SQL Injection.\" Page 3","Authors":["Michael Howard","David LeBlanc","John Viega"],"Title":"24 Deadly Sins of Software Security","Publication":"McGraw-Hill","PublicationYear":"2010"},{"ExternalReferenceID":"REF-7","Section":"Chapter 12, \"Database Input Issues\" Page 397","Authors":["Michael Howard","David LeBlanc"],"Title":"Writing Secure Code","Edition":"2nd Edition","PublicationYear":"2002","PublicationMonth":"12","PublicationDay":"04","Publisher":"Microsoft Press","URL":"https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223"},{"ExternalReferenceID":"REF-867","Authors":["OWASP"],"Title":"SQL Injection Prevention Cheat Sheet","URL":"http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet"},{"ExternalReferenceID":"REF-868","Authors":["Steven Friedl"],"Title":"SQL Injection Attacks by Example","PublicationYear":"2007","PublicationMonth":"10","PublicationDay":"10","URL":"http://www.unixwiz.net/techtips/sql-injection.html"},{"ExternalReferenceID":"REF-869","Authors":["Ferruh Mavituna"],"Title":"SQL Injection Cheat Sheet","PublicationYear":"2007","PublicationMonth":"03","PublicationDay":"15","URL":"https://web.archive.org/web/20080126180244/http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-870","Authors":["David Litchfield","Chris Anley","John Heasman","Bill Grindlay"],"Title":"The Database Hacker's Handbook: Defending Database Servers","PublicationYear":"2005","PublicationMonth":"07","PublicationDay":"14","Publisher":"Wiley"},{"ExternalReferenceID":"REF-871","Authors":["David Litchfield"],"Title":"The Oracle Hacker's Handbook: Hacking and Defending Oracle","PublicationYear":"2007","PublicationMonth":"01","PublicationDay":"30","Publisher":"Wiley"},{"ExternalReferenceID":"REF-872","Authors":["Microsoft"],"Title":"SQL Injection","PublicationYear":"2008","PublicationMonth":"12","URL":"https://learn.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms161953(v=sql.105)?redirectedfrom=MSDN","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-873","Authors":["Microsoft Security Vulnerability Research \u0026 Defense"],"Title":"SQL Injection Attack","URL":"https://msrc.microsoft.com/blog/2008/05/sql-injection-attack/","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-874","Authors":["Michael Howard"],"Title":"Giving SQL Injection the Respect it Deserves","PublicationYear":"2008","PublicationMonth":"05","PublicationDay":"15","URL":"https://learn.microsoft.com/en-us/archive/blogs/michael_howard/giving-sql-injection-the-respect-it-deserves","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-875","Authors":["Frank Kim"],"Title":"Top 25 Series - Rank 2 - SQL Injection","PublicationYear":"2010","PublicationMonth":"03","PublicationDay":"01","Publisher":"SANS Software Security Institute","URL":"https://www.sans.org/blog/top-25-series-rank-2-sql-injection/","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-76","Authors":["Sean Barnum","Michael Gegick"],"Title":"Least Privilege","PublicationYear":"2005","PublicationMonth":"09","PublicationDay":"14","URL":"https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-62","Section":"Chapter 8, \"SQL Queries\", Page 431","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"},{"ExternalReferenceID":"REF-62","Section":"Chapter 17, \"SQL Injection\", Page 1061","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"},{"ExternalReferenceID":"REF-962","Section":"ASCSM-CWE-89","Authors":["Object Management Group (OMG)"],"Title":"Automated Source Code Security Measure (ASCSM)","PublicationYear":"2016","PublicationMonth":"01","URL":"http://www.omg.org/spec/ASCSM/1.0/"},{"ExternalReferenceID":"REF-1447","Authors":["Cybersecurity and Infrastructure Security Agency"],"Title":"Secure by Design Alert: Eliminating SQL Injection Vulnerabilities in Software","PublicationYear":"2024","PublicationMonth":"03","PublicationDay":"25","URL":"https://www.cisa.gov/resources-tools/resources/secure-design-alert-eliminating-sql-injection-vulnerabilities-software","URLDate":"2024-07-14"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Relationship","Note":"SQL injection can be resultant from special character mismanagement, MAID, or denylist/allowlist problems. It can be primary to authentication errors."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction","ModificationVersion":"1.0","ModificationReleaseDate":"2008-09-09"},{"Type":"Modification","ModificationOrganization":"KDM Analytics","ModificationDate":"2008-08-01","ModificationComment":"added/updated white box definitions","ModificationVersion":"1.0","ModificationReleaseDate":"2008-09-09"},{"Type":"Modification","ModificationOrganization":"Veracode","ModificationDate":"2008-08-15","ModificationComment":"Suggested OWASP Top Ten 2004 mapping","ModificationVersion":"1.0","ModificationReleaseDate":"2008-09-09"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Modes_of_Introduction, Name, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-10-14","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-01-12","ModificationComment":"updated Demonstrative_Examples, Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-03-10","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Demonstrative_Examples, Name, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"KDM Analytics","ModificationDate":"2009-07-17","ModificationComment":"Improved the White_Box_Definition"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-07-27","ModificationComment":"updated Description, Name, White_Box_Definitions"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-12-28","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-04-05","ModificationComment":"updated Demonstrative_Examples, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Name, Potential_Mitigations, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-03-29","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Potential_Mitigations, References, Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2013-07-17","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-06-23","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Detection_Factors, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-05-03","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Applicable_Platforms, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Likelihood_of_Exploit, Modes_of_Introduction, Observed_Examples, References, Relationships, White_Box_Definitions"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2018-03-27","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-09-19","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Potential_Mitigations, Relationships, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Demonstrative_Examples, Potential_Mitigations, Relationship_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Potential_Mitigations, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Observed_Examples, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Demonstrative_Examples, Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated References, Relationships, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Demonstrative_Examples, Observed_Examples","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-07-16","ModificationComment":"updated Alternate_Terms, Common_Consequences, Description, Diagram, References","ModificationVersion":"4.15","ModificationReleaseDate":"2024-07-16"},{"Type":"Contribution","ContributionName":"Abhi Balakrishnan","ContributionDate":"2024-02-29","ContributionComment":"Provided diagram to improve CWE usability","ContributionType":"Content","ContributionVersion":"4.15","ContributionReleaseDate":"2024-07-16"},{"Type":"Rename","PreviousEntryName":"SQL Injection","Date":"2008-04-11"},{"Type":"Rename","PreviousEntryName":"Failure to Sanitize Data into SQL Queries (aka 'SQL Injection')","Date":"2008-09-09"},{"Type":"Rename","PreviousEntryName":"Failure to Sanitize Data within SQL Queries (aka 'SQL Injection')","Date":"2009-01-12"},{"Type":"Rename","PreviousEntryName":"Failure to Preserve SQL Query Structure (aka 'SQL Injection')","Date":"2009-05-27"},{"Type":"Rename","PreviousEntryName":"Failure to Preserve SQL Query Structure ('SQL Injection')","Date":"2009-07-27"},{"Type":"Rename","PreviousEntryName":"Improper Sanitization of Special Elements used in an SQL Command ('SQL Injection')","Date":"2010-06-21"}]}