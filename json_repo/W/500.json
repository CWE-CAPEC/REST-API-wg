{"ID":"500","Name":"Public Static Field Not Marked Final","Abstraction":"Variant","Structure":"Simple","Status":"Draft","Description":"An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.","ExtendedDescription":"Public static variables can be read without an accessor and changed without a mutator by any classes in the application.","LikelihoodOfExploit":"High","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"493","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C++","Prevalence":"Undetermined"},{"Type":"Language","Name":"Java","Prevalence":"Undetermined"}],"BackgroundDetails":["When a field is declared public but not final, the field can be read and written to by arbitrary Java code."],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity"],"Impact":["Modify Application Data"],"Note":"The object could potentially be tampered with."},{"Scope":["Confidentiality"],"Impact":["Read Application Data"],"Note":"The object could potentially allow the object to be read."}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"Clearly identify the scope for all critical data elements, including whether they should be regarded as static."},{"Phase":["Implementation"],"Description":"\n\nMake any static fields private and constant.\n\n\nA constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n"}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"The following examples use of a public static String variable to contain the name of a property/configuration file for the application."},{"Nature":"Bad","Language":"C++","ExampleCode":"```\n\tclass SomeAppClass {\n\t\t\tpublic:\n\t\t\t\tstatic string appPropertiesConfigFile = \"app/properties.config\";\n\t\t\t...\n\t}\n```"},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic class SomeAppClass {\n\t\t\tpublic static String appPropertiesFile = \"app/Application.properties\";\n\t\t\t...\n\t}\n```"},{"BodyText":"Having a public static variable that is not marked final (constant) may allow the variable to the altered in a way not intended by the application. In this example the String variable can be modified to indicate a different on nonexistent properties file which could cause the application to crash or caused unexpected behavior."},{"Nature":"Good","Language":"C++","ExampleCode":"```\n\tclass SomeAppClass {\n\t\t\tpublic:\n\t\t\t\tstatic const string appPropertiesConfigFile = \"app/properties.config\";\n\t\t\t...\n\t}\n```"},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tpublic class SomeAppClass {\n\t\t\tpublic static final String appPropertiesFile = \"app/Application.properties\";\n\t\t\t...\n\t}\n```"}]}],"TaxonomyMappings":[{"TaxonomyName":"CLASP","EntryName":"Overflow of static internal buffer"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"OBJ10-J","EntryName":"Do not use public static nonfinal variables"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP28","EntryName":"Unexpected access points"}],"References":[{"ExternalReferenceID":"REF-18","Authors":["Secure Software, Inc."],"Title":"The CLASP Application Security Process","PublicationYear":"2005","URL":"https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf","URLDate":"2024-11-17"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CLASP","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationOrganization":"KDM Analytics","ModificationDate":"2008-08-01","ModificationComment":"added/updated white box definitions"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-05","ModificationComment":"Significant clarification of this entry, and improved examples."},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Background_Details, Demonstrative_Examples, Description, Name, Other_Notes, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Demonstrative_Examples, Description, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated White_Box_Definitions"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Rename","PreviousEntryName":"Overflow of Static Internal Buffer","Date":"2008-04-11"},{"Type":"Rename","PreviousEntryName":"Static Field Not Marked Final","Date":"2008-11-24"}]}