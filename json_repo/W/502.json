{"ID":"502","Name":"Deserialization of Untrusted Data","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.","ExtendedDescription":"\n\nIt is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.\n\n\nData that is untrusted can not be trusted to be well-formed.\n\n\nWhen developers place no restrictions on \"gadget chains,\" or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.\n","LikelihoodOfExploit":"Medium","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"913","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"913","ViewID":"1003","Ordinal":"Primary"},{"Nature":"PeerOf","CweID":"915","ViewID":"1000"}],"ApplicablePlatforms":[{"Type":"Language","Name":"Java","Prevalence":"Undetermined"},{"Type":"Language","Name":"Ruby","Prevalence":"Undetermined"},{"Type":"Language","Name":"PHP","Prevalence":"Undetermined"},{"Type":"Language","Name":"Python","Prevalence":"Undetermined"},{"Type":"Language","Name":"JavaScript","Prevalence":"Undetermined"},{"Type":"Technology","Class":"ICS/OT","Prevalence":"Often"}],"BackgroundDetails":["Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred (\"serialization\"), then extracting the serialized data to reconstruct the original object (\"deserialization\")."],"AlternateTerms":[{"Term":"Marshaling, Unmarshaling","Description":"Marshaling and unmarshaling are effectively synonyms for serialization and deserialization, respectively."},{"Term":"Pickling, Unpickling","Description":"In Python, the \"pickle\" functionality is used to perform serialization and deserialization."},{"Term":"PHP Object Injection","Description":"Some PHP application researchers use this term when attacking unsafe use of the unserialize() function; but it is also used for CWE-915."}],"ModesOfIntroduction":[{"Phase":"Architecture and Design","Note":"OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity"],"Impact":["Modify Application Data","Unexpected State"],"Note":"Attackers can modify unexpected objects or data that was assumed to be safe from modification."},{"Scope":["Availability"],"Impact":["DoS: Resource Consumption (CPU)"],"Note":"If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate."},{"Scope":["Other"],"Impact":["Varies by Context"],"Note":"The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation."}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Architecture and Design","Implementation"],"Description":"If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified."},{"Phase":["Implementation"],"Description":"When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe."},{"Phase":["Implementation"],"Description":"Explicitly define a final object() to prevent deserialization."},{"Phase":["Architecture and Design","Implementation"],"Description":"\n\nMake fields transient to protect them from deserialization.\n\n\nAn attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.\n"},{"Phase":["Implementation"],"Description":"Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"This code snippet deserializes an object from a file and uses it as a UI button:"},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\ttry {\n\t\tFile file = new File(\"object.obj\");\n\t\tObjectInputStream in = new ObjectInputStream(new FileInputStream(file));\n\t\tjavax.swing.JButton button = (javax.swing.JButton) in.readObject();\n\t\tin.close();\n\t}\n```"},{"BodyText":"This code does not attempt to verify the source or contents of the file before deserializing it. An attacker may be able to replace the intended file with a file that contains arbitrary malicious code which will be executed when the button is pressed."},{"BodyText":"To mitigate this, explicitly define final readObject() to prevent deserialization. An example of this is:"},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tprivate final void readObject(ObjectInputStream in) throws java.io.IOException {\n\tthrow new java.io.IOException(\"Cannot be deserialized\"); }\n```"}]},{"Entries":[{"IntroText":"In Python, the Pickle library handles the serialization and deserialization processes. In this example derived from [REF-467], the code receives and parses data, and afterwards tries to authenticate a user based on validating a token."},{"Nature":"Bad","Language":"Python","ExampleCode":"```\n\ttry {\n\t\t\tclass ExampleProtocol(protocol.Protocol):\n\t\t\tdef dataReceived(self, data):\n\t\t\t# Code that would be here would parse the incoming data\n\t\t\t# After receiving headers, call confirmAuth() to authenticate\n\t\t\tdef confirmAuth(self, headers):\n\t\t\ttry:\n\t\t\ttoken = cPickle.loads(base64.b64decode(headers['AuthToken']))\n\t\t\tif not check_hmac(token['signature'], token['data'], getSecretKey()):\n\t\t\traise AuthFail\n\t\t\tself.secure_data = token['data']\n\t\t\texcept:\n\t\t\traise AuthFail\n\t}\n```"},{"BodyText":"Unfortunately, the code does not verify that the incoming data is legitimate. An attacker can construct a illegitimate, serialized object \"AuthToken\" that instantiates one of Python's subprocesses to execute arbitrary commands. For instance,the attacker could construct a pickle that leverages Python's subprocess module, which spawns new processes and includes a number of arguments for various uses. Since Pickle allows objects to define the process for how they should be unpickled, the attacker can direct the unpickle process to call Popen in the subprocess module and execute /bin/sh."}]}],"ObservedExamples":[{"Reference":"CVE-2019-12799","Description":"chain: bypass of untrusted deserialization issue (CWE-502) by using an assumed-trusted class (CWE-183)","Link":"https://www.cve.org/CVERecord?id=CVE-2019-12799"},{"Reference":"CVE-2015-8103","Description":"Deserialization issue in commonly-used Java library allows remote execution.","Link":"https://www.cve.org/CVERecord?id=CVE-2015-8103"},{"Reference":"CVE-2015-4852","Description":"Deserialization issue in commonly-used Java library allows remote execution.","Link":"https://www.cve.org/CVERecord?id=CVE-2015-4852"},{"Reference":"CVE-2013-1465","Description":"Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.","Link":"https://www.cve.org/CVERecord?id=CVE-2013-1465"},{"Reference":"CVE-2012-3527","Description":"Use of PHP unserialize function on untrusted input in content management system might allow code execution.","Link":"https://www.cve.org/CVERecord?id=CVE-2012-3527"},{"Reference":"CVE-2012-0911","Description":"Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.","Link":"https://www.cve.org/CVERecord?id=CVE-2012-0911"},{"Reference":"CVE-2012-0911","Description":"Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.","Link":"https://www.cve.org/CVERecord?id=CVE-2012-0911"},{"Reference":"CVE-2011-2520","Description":"Python script allows local users to execute code via pickled data.","Link":"https://www.cve.org/CVERecord?id=CVE-2011-2520"},{"Reference":"CVE-2012-4406","Description":"Unsafe deserialization using pickle in a Python script.","Link":"https://www.cve.org/CVERecord?id=CVE-2012-4406"},{"Reference":"CVE-2003-0791","Description":"Web browser allows execution of native methods via a crafted string to a JavaScript function that deserializes the string.","Link":"https://www.cve.org/CVERecord?id=CVE-2003-0791"}],"TaxonomyMappings":[{"TaxonomyName":"CLASP","EntryName":"Deserialization of untrusted data"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"SER01-J","EntryName":"Do not deviate from the proper signatures of serialization methods"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"SER03-J","EntryName":"Do not serialize unencrypted, sensitive data"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"SER06-J","EntryName":"Make defensive copies of private mutable components during deserialization"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"SER08-J","EntryName":"Do not use the default serialized form for implementation defined invariants"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP25","EntryName":"Tainted input to variable"}],"RelatedAttackPatterns":["586"],"References":[{"ExternalReferenceID":"REF-18","Authors":["Secure Software, Inc."],"Title":"The CLASP Application Security Process","PublicationYear":"2005","URL":"https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf"},{"ExternalReferenceID":"REF-461","Authors":["Matthias Kaiser"],"Title":"Exploiting Deserialization Vulnerabilities in Java","PublicationYear":"2015","PublicationMonth":"10","PublicationDay":"28","URL":"https://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-462","Authors":["Sam Thomas"],"Title":"PHP unserialization vulnerabilities: What are we missing?","PublicationYear":"2015","PublicationMonth":"08","PublicationDay":"27","URL":"https://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-463","Authors":["Gabriel Lawrence","Chris Frohoff"],"Title":"Marshalling Pickles: How deserializing objects can ruin your day","PublicationYear":"2015","PublicationMonth":"01","PublicationDay":"28","URL":"https://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-464","Authors":["Heine Deelstra"],"Title":"Unserializing user-supplied data, a bad idea","PublicationYear":"2010","PublicationMonth":"08","PublicationDay":"25","URL":"https://drupalsun.com/heine/2010/08/25/unserializing-user-supplied-data-bad-idea","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-465","Authors":["Manish S. Saindane"],"Title":"Black Hat EU 2010 - Attacking Java Serialized Communication","PublicationYear":"2010","PublicationMonth":"04","PublicationDay":"26","URL":"https://www.slideshare.net/msaindane/black-hat-eu-2010-attacking-java-serialized-communication","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-466","Authors":["Nadia Alramli"],"Title":"Why Python Pickle is Insecure","PublicationYear":"2009","PublicationMonth":"09","PublicationDay":"09","URL":"http://michael-rushanan.blogspot.com/2012/10/why-python-pickle-is-insecure.html","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-467","Authors":["Nelson Elhage"],"Title":"Exploiting misuse of Python's \"pickle\"","PublicationYear":"2011","PublicationMonth":"03","PublicationDay":"20","URL":"https://blog.nelhage.com/2011/03/exploiting-pickle/"},{"ExternalReferenceID":"REF-468","Authors":["Chris Frohoff"],"Title":"Deserialize My Shorts: Or How I Learned to Start Worrying and Hate Java Object Deserialization","PublicationYear":"2016","PublicationMonth":"03","PublicationDay":"21","URL":"https://speakerdeck.com/frohoff/owasp-sd-deserialize-my-shorts-or-how-i-learned-to-start-worrying-and-hate-java-object-deserialization","URLDate":"2023-04-07"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Maintenance","Note":"The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"CLASP","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-10-29","ModificationComment":"updated Description, Other_Notes, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2013-02-21","ModificationComment":"updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Observed_Examples, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-05-03","ModificationComment":"updated Applicable_Platforms, Demonstrative_Examples, Description, Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Modes_of_Introduction, Potential_Mitigations, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2018-03-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-09-19","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Observed_Examples, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Alternate_Terms, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Applicable_Platforms"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes, Relationships"}]}