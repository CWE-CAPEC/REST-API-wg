{"ID":"1342","Name":"Information Exposure through Microarchitectural State after Transient Execution","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.","ExtendedDescription":"\n\nIn many processor architectures an exception, mis-speculation, or microcode assist results in a flush operation to clear results that are no longer required. This action prevents these results from influencing architectural state that is intended to be visible from software. However, traces of this transient execution may remain in microarchitectural buffers, resulting in a change in microarchitectural state that can expose sensitive information to an attacker using side-channel analysis. For example, Load Value Injection (LVI) [REF-1202] can exploit direct injection of erroneous values into intermediate load and store buffers.\n\n\nSeveral conditions may need to be fulfilled for a successful attack:\n\n\n  1. incorrect transient execution that results in remanence of sensitive information;\n\n  1. attacker has the ability to provoke microarchitectural exceptions;\n\n  1. operations and structures in victim code that can be exploited must be identified.\n\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"226","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"226","ViewID":"1194","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Workstation","Prevalence":"Undetermined"},{"Type":"Architecture","Name":"x86","Prevalence":"Undetermined"},{"Type":"Architecture","Name":"ARM","Prevalence":"Undetermined"},{"Type":"Architecture","Name":"Other","Prevalence":"Undetermined"},{"Type":"Technology","Class":"Not Technology-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"System on Chip","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Requirements"}],"CommonConsequences":[{"Scope":["Confidentiality","Integrity"],"Impact":["Modify Memory","Read Memory","Execute Unauthorized Code or Commands"],"Likelihood":["Medium"]}],"PotentialMitigations":[{"Phase":["Architecture and Design","Requirements"],"Description":"Hardware ensures that no illegal data flows from faulting micro-ops exists at the microarchitectural level.","Effectiveness":"High","EffectivenessNotes":"Being implemented in silicon it is expected to fully address the known weaknesses with limited performance impact."},{"Phase":["Build and Compilation"],"Description":"Include instructions that explicitly remove traces of unneeded computations from software interactions with microarchitectural elements e.g. lfence, sfence, mfence, clflush.","Effectiveness":"High","EffectivenessNotes":"This effectively forces the processor to complete each memory access before moving on to the next operation. This may have a large performance impact."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"Faulting loads in a victim domain may trigger incorrect transient forwarding, which leaves secret-dependent traces in the microarchitectural state. Consider this example from [REF-1203]."},{"BodyText":"Consider the code gadget:"},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\t void call_victim(size_t untrusted_arg) {\n\t\t *arg_copy = untrusted_arg;\n\t\t array[**trusted_ptr * 4096];\n\t } \n```"},{"BodyText":"A processor with this weakness will store the value of untrusted_arg (which may be provided by an attacker) to the stack, which is trusted memory. Additionally, this store operation will save this value in some microarchitectural buffer, e.g. the store queue.\n\n\nIn this code gadget, trusted_ptr is dereferenced while the attacker forces a page fault. The faulting load causes the processor to mis-speculate by forwarding untrusted_arg as the (speculative) load result. The processor then uses untrusted_arg for the pointer dereference. After the fault has been handled and the load has been re-issued with the correct argument, secret-dependent information stored at the address of trusted_ptr remains in microarchitectural state and can be extracted by an attacker using a code gadget."}]}],"ObservedExamples":[{"Reference":"CVE-2020-0551","Description":"Load value injection in some processors utilizing speculative execution may allow an authenticated user to enable information disclosure via a side-channel with local access.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-0551"}],"RelatedAttackPatterns":["696"],"References":[{"ExternalReferenceID":"REF-1202","Authors":["Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina Minkin, Daniel Genkin, Yuval Yarom, Berk Sunar, Daniel Gruss, and Frank Piessens"],"Title":"LVI - Hijacking Transient Execution with Load Value Injection","PublicationYear":"2020","URL":"https://lviattack.eu/"},{"ExternalReferenceID":"REF-1203","Authors":["Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina Minkin, Daniel Genkin, Yuval Yarom, Berk Sunar, Daniel Gruss, and Frank Piessens"],"Title":"LVI: Hijacking Transient Execution through Microarchitectural Load Value Injection","PublicationYear":"2020","PublicationMonth":"01","PublicationDay":"09","URL":"https://lviattack.eu/lvi.pdf"},{"ExternalReferenceID":"REF-1204","Title":"Hijacking Transient Execution through Microarchitectural Load Value Injection","PublicationYear":"2020","PublicationMonth":"05","PublicationDay":"18","URL":"https://www.youtube.com/watch?v=99kVz-YGi6Y"},{"ExternalReferenceID":"REF-1205","Authors":["Stephan van Schaik, Marina Minkin, Andrew Kwong, Daniel Genkin, Yuval Yarom"],"Title":"CacheOut: Leaking Data on Intel CPUs via Cache Evictions","PublicationYear":"2020","PublicationMonth":"12","PublicationDay":"28","URL":"https://cacheoutattack.com/files/CacheOut.pdf"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Relationship","Note":"CWE-1342 differs from CWE-1303, which is related to misprediction and biasing microarchitectural components, while CWE-1342 addresses illegal data flows and retention. For example, Spectre is an instance of CWE-1303 biasing branch prediction to steer the transient execution indirectly."},{"Type":"Maintenance","Note":"As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. As a result, this entry might change significantly in CWE 4.10."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"Anders Nordstrom, Alric Althoff","SubmissionOrganization":"Cycuity (originally submitted as Tortuga Logic)","SubmissionDate":"2021-09-22","SubmissionVersion":"4.6","SubmissionReleaseDate":"2021-10-28"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Demonstrative_Examples, Maintenance_Notes, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Description","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"}]}