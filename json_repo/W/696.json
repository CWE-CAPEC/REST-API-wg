{"ID":"696","Name":"Incorrect Behavior Order","Abstraction":"Class","Structure":"Simple","Status":"Incomplete","Description":"The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"691","ViewID":"1000","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity"],"Impact":["Alter Execution Logic"]}],"DemonstrativeExamples":[{"ID":"DX-35","Entries":[{"IntroText":"The following code attempts to validate a given input path by checking it against an allowlist and then return the canonical path. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\"."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tString path = getInputPath();\n\tif (path.startsWith(\"/safe_dir/\"))\n\t{\n\t\tFile f = new File(path);\n\t\treturn f.getCanonicalPath();\n\t}\n```"},{"BodyText":"The problem with the above code is that the validation step occurs before canonicalization occurs. An attacker could provide an input path of \"/safe_dir/../\" that would pass the validation step. However, the canonicalization process sees the double dot as a traversal to the parent directory and hence when canonicized the path would become just \"/\"."},{"BodyText":"To avoid this problem, validation should occur after canonicalization takes place. In this case canonicalization occurs during the initialization of the File object. The code below fixes the issue."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tString path = getInputPath();\n\tFile f = new File(path);\n\tif (f.getCanonicalPath().startsWith(\"/safe_dir/\"))\n\t{\n\t\treturn f.getCanonicalPath();\n\t}\n```"}]},{"ID":"DX-157","Entries":[{"IntroText":"This function prints the contents of a specified file requested by a user."},{"Nature":"Bad","Language":"PHP","ExampleCode":"```\n\tfunction printFile($username,$filename){\n```\n//read file into string* \n\t\t\t$file = file_get_contents($filename);\n\t\t\tif ($file \u0026\u0026 isOwnerOf($username,$filename)){\n\t\t\t```\n\t\t\t\techo $file;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\techo 'You are not authorized to view this file';\n\t\t\t}\n\t\t\treturn false;\n\t}\n```"},{"BodyText":"This code first reads a specified file into memory, then prints the file if the user is authorized to see its contents. The read of the file into memory may be resource intensive and is unnecessary if the user is not allowed to see the file anyway."}]},{"ID":"DX-187","Entries":[{"IntroText":"Assume that the module foo_bar implements a protected register. The register content is the asset. Only transactions made by user id (indicated by signal usr_id) 0x4 are allowed to modify the register contents. The signal grant_access is used to provide access."},{"Nature":"Bad","Language":"Verilog","ExampleCode":"module foo_bar(data_out, usr_id, data_in, clk, rst_n);\n output reg [7:0] data_out;\n input wire [2:0] usr_id;\n input wire [7:0] data_in; \n input wire clk, rst_n;\n wire grant_access;\n always @ (posedge clk or negedge rst_n)\n begin\n\n```\n\t if (!rst_n)\n\t\t data_out = 0; \n\t else \n\t\t data_out = (grant_access) ? data_in : data_out;\n\t\t assign grant_access = (usr_id == 3'h4) ? 1'b1 : 1'b0;\n end\n endmodule\n```"},{"BodyText":"This code uses Verilog blocking assignments for data_out and grant_access. Therefore, these assignments happen sequentially (i.e., data_out is updated to new value first, and grant_access is updated the next cycle) and not in parallel. Therefore, the asset data_out is allowed to be modified even before the access control check is complete and grant_access signal is set. Since grant_access does not have a reset value, it will be meta-stable and will randomly go to either 0 or 1."},{"BodyText":"Flipping the order of the assignment of data_out and grant_access should solve the problem. The correct snippet of code is shown below."},{"Nature":"Good","Language":"Verilog","ExampleCode":"always @ (posedge clk or negedge rst_n)\n begin\n\n```\n\t if (!rst_n)\n\t\t data_out = 0;\n\t else\n\t\t assign grant_access = (usr_id == 3'h4) ? 1'b1 : 1'b0;\n\t\t data_out = (grant_access) ? data_in : data_out;\n end\n endmodule\n```"}]}],"ObservedExamples":[{"Reference":"CVE-2019-9805","Description":"Chain: Creation of the packet client occurs before initialization is complete (CWE-696) resulting in a read from uninitialized memory (CWE-908), causing memory corruption.","Link":"https://www.cve.org/CVERecord?id=CVE-2019-9805"},{"Reference":"CVE-2007-5191","Description":"file-system management programs call the setuid and setgid functions in the wrong order and do not check the return values, allowing attackers to gain unintended privileges","Link":"https://www.cve.org/CVERecord?id=CVE-2007-5191"},{"Reference":"CVE-2007-1588","Description":"C++ web server program calls Process::setuid before calling Process::setgid, preventing it from dropping privileges, potentially allowing CGI programs to be called with higher privileges than intended","Link":"https://www.cve.org/CVERecord?id=CVE-2007-1588"},{"Reference":"CVE-2022-37734","Description":"Chain: lexer in Java-based GraphQL server does not enforce maximum of tokens early enough (CWE-696), allowing excessive CPU consumption (CWE-1176)","Link":"https://www.cve.org/CVERecord?id=CVE-2022-37734"}],"TaxonomyMappings":[{"TaxonomyName":"CERT C Secure Coding","EntryID":"POS36-C","EntryName":"Observe correct revocation order while relinquishing privileges","MappingFit":"CWE More Abstract"}],"RelatedAttackPatterns":["463"],"MappingNotes":{"Usage":"Allowed-with-Review","Rationale":"This CWE entry is a Class and might have Base-level children that would be more appropriate","Comments":"Examine children of this entry to see if there is a better fit","Reasons":["Abstraction"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2008-09-09","SubmissionVersion":"1.0","SubmissionReleaseDate":"2008-09-09"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-03-29","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Related_Attack_Patterns, Relationships, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-05-03","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Description, Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Demonstrative_Examples, Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Demonstrative_Examples","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2025-04-03","ModificationComment":"updated Relationships","ModificationVersion":"4.17","ModificationReleaseDate":"2025-04-03"}]}