{"ID":"1332","Name":"Improper Handling of Faults that Lead to Instruction Skips","Abstraction":"Base","Structure":"Simple","Status":"Stable","Description":"The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.","ExtendedDescription":"\n\nThe operating conditions of hardware may change in ways that cause unexpected behavior to occur, including the skipping of security-critical CPU instructions. Generally, this can occur due to electrical disturbances or when the device operates outside of its expected conditions.\n\n\nIn practice, application code may contain conditional branches that are security-sensitive (e.g., accepting or rejecting a user-provided password). These conditional branches are typically implemented by a single conditional branch instruction in the program binary which, if skipped, may lead to effectively flipping the branch condition - i.e., causing the wrong security-sensitive branch to be taken. This affects processes such as firmware authentication, password verification, and other security-sensitive decision points.\n\n\nAttackers can use fault injection techniques to alter the operating conditions of hardware so that security-critical instructions are skipped more frequently or more reliably than they would in a \"natural\" setting.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"1384","ViewID":"1000","Ordinal":"Primary"},{"Nature":"PeerOf","CweID":"1247","ViewID":"1194","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"System on Chip","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design","Note":"Failure to design appropriate countermeasures to common fault injection techniques can manifest this weakness."},{"Phase":"Implementation","Note":"This weakness can arise if the hardware design incorrectly implements countermeasures to prevent fault injection."}],"CommonConsequences":[{"Scope":["Confidentiality","Integrity","Authentication"],"Impact":["Bypass Protection Mechanism","Alter Execution Logic","Unexpected State"],"Likelihood":["High"],"Note":"Depending on the context, instruction skipping can have a broad range of consequences related to the generic bypassing of security critical code."}],"DetectionMethods":[{"Method":"Automated Static Analysis","Description":"This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.","Effectiveness":"Moderate"},{"Method":"Simulation / Emulation","Description":"This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.","Effectiveness":"Moderate"},{"Method":"Manual Analysis","Description":"This weakness can be found using manual (static) analysis. The analyst has security objectives that are matched against the high-level code. This method is less precise than emulation, especially if the analysis is done at the higher level language rather than at assembly level.","Effectiveness":"Moderate"}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"Design strategies for ensuring safe failure if inputs, such as Vcc, are modified out of acceptable ranges."},{"Phase":["Architecture and Design"],"Description":"Design strategies for ensuring safe behavior if instructions attempt to be skipped."},{"Phase":["Architecture and Design"],"Description":"Identify mission critical secrets that should be wiped if faulting is detected, and design a mechanism to do the deletion."},{"Phase":["Implementation"],"Description":"Add redundancy by performing an operation multiple times, either in space or time, and perform majority voting. Additionally, make conditional instruction timing unpredictable."},{"Phase":["Implementation"],"Description":"Use redundant operations or canaries to detect and respond to faults."},{"Phase":["Implementation"],"Description":"Ensure that fault mitigations are strong enough in practice. For example, a low power detection mechanism that takes 50 clock cycles to trigger at lower voltages may be an insufficient security mechanism if the instruction counter has already progressed with no other CPU activity occurring."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"A smart card contains authentication credentials that are used as authorization to enter a building. The credentials are only accessible when a correct PIN is presented to the card."},{"Nature":"Bad","Language":"Other","ExampleCode":"The card emits the credentials when a voltage anomaly is injected into the power line to the device at a particular time after providing an incorrect PIN to the card, causing the internal program to accept the incorrect PIN."},{"BodyText":"There are several ways this weakness could be fixed."},{"Nature":"Good","Language":"Other","ExampleCode":"- add an internal filter or internal power supply in series with the power supply pin on the device\n\n  - add sensing circuitry to reset the device if out of tolerance conditions are detected\n\n  - add additional execution sensing circuits to monitor the execution order for anomalies and abort the action or reset the device under fault conditions"}]}],"ObservedExamples":[{"Reference":"CVE-2019-15894","Description":"fault injection attack bypasses the verification mode, potentially allowing arbitrary code execution.","Link":"https://www.cve.org/CVERecord?id=CVE-2019-15894"}],"FunctionalAreas":["Power"],"RelatedAttackPatterns":["624","625"],"References":[{"ExternalReferenceID":"REF-1161","Authors":["Josep Balasch","Benedikt Gierlichs","Ingrid Verbauwhede"],"Title":"An In-depth and Black-box Characterization of the Effects of Clock Glitches on 8-bit MCUs","Publication":"2011 Workshop on Fault Diagnosis and Tolerance in Cryptography (IEEE)","PublicationYear":"2011","PublicationMonth":"09","URL":"https://ieeexplore.ieee.org/document/6076473"},{"ExternalReferenceID":"REF-1222","Authors":["Alexandre Menu","Jean-Max Dutertre","Olivier Potin","Jean-Baptiste Rigaud"],"Title":"Experimental Analysis of the Electromagnetic Instruction Skip Fault Model","Publication":"IEEE Xplore","PublicationYear":"2020","PublicationMonth":"04","PublicationDay":"30","URL":"https://ieeexplore.ieee.org/document/9081261"},{"ExternalReferenceID":"REF-1223","Authors":["Niek Timmers","Albert Spruyt","Marc Witteman"],"Title":"Controlling PC on ARM using Fault Injection","PublicationYear":"2016","PublicationMonth":"06","PublicationDay":"11","URL":"https://fdtc.deib.polimi.it/FDTC16/shared/FDTC-2016-session_2_1.pdf","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-1224","Authors":["Colin O'Flynn"],"Title":"Attacking USB Gear with EMFI","Publication":"Circuit Cellar","PublicationYear":"2019","PublicationMonth":"05","URL":"https://www.totalphase.com/media/pdf/whitepapers/Circuit_Cellar_TP.pdf"},{"ExternalReferenceID":"REF-1286","Section":"4.3","Authors":["Lennert Wouters","Benedikt Gierlichs","Bart Preneel"],"Title":"On The Susceptibility of Texas Instruments SimpleLink Platform Microcontrollers to Non-Invasive Physical Attacks","PublicationYear":"2022","PublicationMonth":"03","PublicationDay":"14","URL":"https://eprint.iacr.org/2022/328.pdf"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"Jasper van Woudenberg","SubmissionOrganization":"Riscure","SubmissionDate":"2020-10-14","SubmissionVersion":"4.3","SubmissionReleaseDate":"2020-12-10"},{"Type":"Modification","ModificationName":"Jasper van Woudenberg","ModificationOrganization":"Riscure","ModificationDate":"2021-01-11"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Description, Functional_Areas, Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Demonstrative_Examples, Description, Detection_Factors, Maintenance_Notes, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Potential_Mitigations, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Potential_Mitigations, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2025-04-03","ModificationComment":"updated Demonstrative_Examples","ModificationVersion":"4.17","ModificationReleaseDate":"2025-04-03"},{"Type":"Contribution","ContributionName":"Jasper van Woudenberg","ContributionOrganization":"Riscure","ContributionDate":"2021-10-11","ContributionComment":"Provided detection methods and feedback on demonstrative example","ContributionType":"Content"},{"Type":"Rename","PreviousEntryName":"Insufficient Protection Against Instruction Skipping Via Fault Injection","Date":"2021-10-28"}]}