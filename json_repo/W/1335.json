{"ID":"1335","Name":"Incorrect Bitwise Shift of Integer","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"An integer value is specified to be shifted by a negative amount or an amount greater than or equal to the number of bits contained in the value causing an unexpected or indeterminate result.","ExtendedDescription":"\n\nSpecifying a value to be shifted by a negative amount is undefined in various languages. Various computer architectures implement this action in different ways. The compilers and interpreters when generating code to accomplish a shift generally do not do a check for this issue.\n\n\nSpecifying an over-shift, a shift greater than or equal to the number of bits contained in a value to be shifted, produces a result which varies by architecture and compiler. In some languages, this action is specifically listed as producing an undefined result.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"682","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Undetermined"},{"Type":"Language","Name":"C++","Prevalence":"Undetermined"},{"Type":"Language","Name":"C#","Prevalence":"Undetermined"},{"Type":"Language","Name":"Java","Prevalence":"Undetermined"},{"Type":"Language","Name":"JavaScript","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"Not Technology-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation","Note":"Adding shifts without properly verifying the size and sign of the shift amount."}],"CommonConsequences":[{"Scope":["Integrity"],"Impact":["DoS: Crash, Exit, or Restart"]}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Implicitly or explicitly add checks and mitigation for negative or over-shift values."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"A negative shift amount for an x86 or x86_64 shift instruction will produce the number of bits to be shifted by taking a 2's-complement of the shift amount and effectively masking that amount to the lowest 6 bits for a 64 bit shift instruction."},{"Nature":"Bad","Language":"C","ExampleCode":"unsigned int r = 1 \u003c\u003c -5;"},{"BodyText":"The example above ends up with a shift amount of -5. The hexadecimal value is FFFFFFFFFFFFFFFD which, when bits above the 6th bit are masked off, the shift amount becomes a binary shift value of 111101 which is 61 decimal. A shift of 61 produces a very different result than -5. The previous example is a very simple version of the following code which is probably more realistic of what happens in a real system."},{"Nature":"Bad","Language":"C","ExampleCode":"int choose_bit(int reg_bit, int bit_number_from_elsewhere) \n {\n\n```\n\t if (NEED_TO_SHIFT)\n\t {\n\t\t reg_bit -= bit_number_from_elsewhere;\n\t }\n\t return reg_bit;\n }\n unsigned int handle_io_register(unsigned int *r)\n {\n\t unsigned int the_bit = 1 \u003c\u003c choose_bit(5, 10);\n\t *r |= the_bit;\n\t return the_bit;\n }\n```"},{"Nature":"Good","Language":"C","ExampleCode":"int choose_bit(int reg_bit, int bit_number_from_elsewhere) \n {\n\n```\n\t if (NEED_TO_SHIFT)\n\t {\n\t\t reg_bit -= bit_number_from_elsewhere;\n\t }\n\t return reg_bit;\n }\n unsigned int handle_io_register(unsigned int *r)\n {\n\t int the_bit_number = choose_bit(5, 10);\n\t if ((the_bit_number \u003e 0) \u0026\u0026 (the_bit_number \u003c 63))\n\t {\n\t\t unsigned int the_bit = 1 \u003c\u003c the_bit_number;\n\t\t *r |= the_bit;\n\t }\n\t return the_bit;\n }\n```"},{"BodyText":"Note that the good example not only checks for negative shifts and disallows them, but it also checks for over-shifts. No bit operation is done if the shift is out of bounds. Depending on the program, perhaps an error message should be logged."}]}],"ObservedExamples":[{"Reference":"CVE-2009-4307","Description":"An unexpected large value in the ext4 filesystem causes an overshift condition resulting in a divide by zero.","Link":"https://www.cve.org/CVERecord?id=CVE-2009-4307"},{"Reference":"CVE-2012-2100","Description":"An unexpected large value in the ext4 filesystem causes an overshift condition resulting in a divide by zero - fix of CVE-2009-4307.","Link":"https://www.cve.org/CVERecord?id=CVE-2012-2100"},{"Reference":"CVE-2020-8835","Description":"An overshift in a kernel allowed out of bounds reads and writes resulting in a root takeover.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-8835"},{"Reference":"CVE-2015-1607","Description":"Program is not properly handling signed bitwise left-shifts causing an overlapping memcpy memory range error.","Link":"https://www.cve.org/CVERecord?id=CVE-2015-1607"},{"Reference":"CVE-2016-9842","Description":"Compression function improperly executes a signed left shift of a negative integer.","Link":"https://www.cve.org/CVERecord?id=CVE-2016-9842"},{"Reference":"CVE-2018-18445","Description":"Some kernels improperly handle right shifts of 32 bit numbers in a 64 bit register.","Link":"https://www.cve.org/CVERecord?id=CVE-2018-18445"},{"Reference":"CVE-2013-4206","Description":"Putty has an incorrectly sized shift value resulting in an overshift.","Link":"https://www.cve.org/CVERecord?id=CVE-2013-4206"},{"Reference":"CVE-2018-20788","Description":"LED driver overshifts under certain conditions resulting in a DoS.","Link":"https://www.cve.org/CVERecord?id=CVE-2018-20788"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2021-03-29","SubmissionVersion":"4.5","SubmissionReleaseDate":"2021-07-20"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Demonstrative_Examples, Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}