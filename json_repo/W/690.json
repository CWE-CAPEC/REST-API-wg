{"ID":"690","Name":"Unchecked Return Value to NULL Pointer Dereference","Abstraction":"Compound","Structure":"Chain","Status":"Draft","Description":"The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference.","ExtendedDescription":"While unchecked return value weaknesses are not limited to returns of NULL pointers (see the examples in CWE-252), functions often return NULL to indicate an error status. When this error condition is not checked, a NULL pointer dereference can occur.","RelatedWeaknesses":[{"Nature":"StartsWith","CweID":"252","ViewID":"709"},{"Nature":"ChildOf","CweID":"252","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Undetermined"},{"Type":"Language","Name":"C++","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation","Note":"A typical occurrence of this weakness occurs when an application includes user-controlled input to a malloc() call. The related code might be correct with respect to preventing buffer overflows, but if a large value is provided, the malloc() will fail due to insufficient memory. This problem also frequently occurs when a parsing routine expects that certain elements will always be present. If malformed input is provided, the parser might return NULL. For example, strtok() can return NULL."}],"CommonConsequences":[{"Scope":["Availability"],"Impact":["DoS: Crash, Exit, or Restart"]},{"Scope":["Integrity","Confidentiality","Availability"],"Impact":["Execute Unauthorized Code or Commands","Read Memory","Modify Memory"],"Note":"In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution."}],"DetectionMethods":[{"Method":"Black Box","Description":"This typically occurs in rarely-triggered error conditions, reducing the chances of detection during black box testing."},{"Method":"White Box","Description":"Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"The code below makes a call to the getUserName() function but doesn't check the return value before dereferencing (which may cause a NullPointerException)."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tString username = getUserName();\n\tif (username.equals(ADMIN_USER)) {\n\t\t...\n\t}\n```"}]},{"ID":"DX-1","Entries":[{"IntroText":"This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tvoid host_lookup(char *user_supplied_addr){\n\t\t\tstruct hostent *hp;\n\t\t\tin_addr_t *addr;\n\t\t\tchar hostname[64];\n\t\t\tin_addr_t inet_addr(const char *cp);\n```\n/*routine that ensures user_supplied_addr is in the right format for conversion */* \n\t\t\t\n\t\t\tvalidate_addr_form(user_supplied_addr);\n\t\t\taddr = inet_addr(user_supplied_addr);\n\t\t\thp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);\n\t\t\tstrcpy(hostname, hp-\u003eh_name);}"},{"BodyText":"If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference (CWE-476) would then occur in the call to strcpy()."},{"BodyText":"Note that this code is also vulnerable to a buffer overflow (CWE-119)."}]}],"ObservedExamples":[{"Reference":"CVE-2008-1052","Description":"Large Content-Length value leads to NULL pointer dereference when malloc fails.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-1052"},{"Reference":"CVE-2006-6227","Description":"Large message length field leads to NULL pointer dereference when malloc fails.","Link":"https://www.cve.org/CVERecord?id=CVE-2006-6227"},{"Reference":"CVE-2006-2555","Description":"Parsing routine encounters NULL dereference when input is missing a colon separator.","Link":"https://www.cve.org/CVERecord?id=CVE-2006-2555"},{"Reference":"CVE-2003-1054","Description":"URI parsing API sets argument to NULL when a parsing failure occurs, such as when the Referer header is missing a hostname, leading to NULL dereference.","Link":"https://www.cve.org/CVERecord?id=CVE-2003-1054"},{"Reference":"CVE-2008-5183","Description":"chain: unchecked return value can lead to NULL dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2008-5183"}],"TaxonomyMappings":[{"TaxonomyName":"CERT C Secure Coding","EntryID":"EXP34-C","EntryName":"Do not dereference null pointers","MappingFit":"CWE More Specific"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"ERR08-J","EntryName":"Do not catch NullPointerException or any of its ancestors"},{"TaxonomyName":"SEI CERT Perl Coding Standard","EntryID":"EXP32-PL","EntryName":"Do not ignore function return values","MappingFit":"CWE More Specific"}],"MappingNotes":{"Usage":"Discouraged","Rationale":"This CWE entry is a named chain, which combines multiple weaknesses.","Comments":"Mapping to each separate weakness in the chain would be more precise.","Reasons":["Other"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2008-04-11","SubmissionVersion":"Draft 9","SubmissionReleaseDate":"2008-04-11"},{"Type":"Modification","ModificationName":"Sean Eidemiller","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"added/updated demonstrative examples"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Applicable_Platforms, Description, Detection_Factors, Relationships, Other_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-12-28","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-06-23","ModificationComment":"updated Modes_of_Introduction, Other_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-01-19","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Relationships, Relevant_Properties, Taxonomy_Mappings, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes, Relationships"}]}