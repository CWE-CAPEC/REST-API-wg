{"ID":"480","Name":"Use of Incorrect Operator","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.","ExtendedDescription":"These types of errors are generally the result of a typo by the programmer.","LikelihoodOfExploit":"Low","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"670","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Sometimes"},{"Type":"Language","Name":"C++","Prevalence":"Sometimes"},{"Type":"Language","Name":"Perl","Prevalence":"Sometimes"},{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Other"],"Impact":["Alter Execution Logic"],"Note":"This weakness can cause unintended logic to be executed and other unexpected application behavior."}],"DetectionMethods":[{"Method":"Automated Static Analysis","Description":"This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program."},{"Method":"Manual Static Analysis","Description":"This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program."}],"DemonstrativeExamples":[{"ID":"DX-140","Entries":[{"IntroText":"The following C/C++ and C# examples attempt to validate an int input parameter against the integer value 100."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tint isValid(int value) {\n\t\tif (value=100) {\n\t\t\tprintf(\"Value is valid\\n\");\n\t\t\treturn(1);\n\t\t}\n\t\tprintf(\"Value is not valid\\n\");\n\t\treturn(0);\n\t}\n```"},{"Nature":"Bad","Language":"C#","ExampleCode":"```\n\tbool isValid(int value) {\n\t\tif (value=100) {\n\t\t\tConsole.WriteLine(\"Value is valid.\");\n\t\t\treturn true;\n\t\t}\n\t\tConsole.WriteLine(\"Value is not valid.\");\n\t\treturn false;\n\t}\n```"},{"BodyText":"However, the expression to be evaluated in the if statement uses the assignment operator \"=\" rather than the comparison operator \"==\". The result of using the assignment operator instead of the comparison operator causes the int variable to be reassigned locally and the expression in the if statement will always evaluate to the value on the right hand side of the expression. This will result in the input value not being properly validated, which can cause unexpected results."}]},{"ID":"DX-103","Entries":[{"IntroText":"The following C/C++ example shows a simple implementation of a stack that includes methods for adding and removing integer values from the stack. The example uses pointers to add and remove integer values to the stack array variable."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\t#define SIZE 50\n\tint *tos, *p1, stack[SIZE];\n\tvoid push(int i) {\n\t\t\tp1++;\n\t\t\tif(p1==(tos+SIZE)) {\n```\n// Print stack overflow error message and exit* \n\t\t\t\t\t}\n\t\t\t*p1 == i;}\n\t\n\tint pop(void) {\n\t```\n\t\t\tif(p1==tos) {\n```\n// Print stack underflow error message and exit* \n\t\t\t\t\t}\n\t\t\tp1--;\n\t\t\treturn *(p1+1);}\n\t\n\tint main(int argc, char *argv[]) {\n\t```\n```\n// initialize tos and p1 to point to the top of stack* \n\t\t\ttos = stack;\n\t\t\tp1 = stack;\n\t\t\t\n\t\t\t *// code to add and remove items from stack* \n\t\t\t...\n\t\t\treturn 0;}"},{"BodyText":"The push method includes an expression to assign the integer value to the location in the stack pointed to by the pointer variable."},{"BodyText":"However, this expression uses the comparison operator \"==\" rather than the assignment operator \"=\". The result of using the comparison operator instead of the assignment operator causes erroneous values to be entered into the stack and can cause unexpected results."}]},{"Entries":[{"IntroText":"The example code below is taken from the CVA6 processor core of the HACK@DAC'21 buggy OpenPiton SoC. Debug access allows users to access internal hardware registers that are otherwise not exposed for user access or restricted access through access control protocols. Hence, requests to enter debug mode are checked and authorized only if the processor has sufficient privileges. In addition, debug accesses are also locked behind password checkers. Thus, the processor enters debug mode only when the privilege level requirement is met, and the correct debug password is provided."},{"BodyText":"The following code [REF-1377] illustrates an instance of a vulnerable implementation of debug mode. The core correctly checks if the debug requests have sufficient privileges and enables the debug_mode_d and debug_mode_q signals. It also correctly checks for debug password and enables umode_i signal."},{"Nature":"Bad","Language":"Verilog","ExampleCode":"module csr_regfile #(\n ...\n\n```\n\t // check that we actually want to enter debug depending on the privilege level we are currently in\n\t unique case (priv_lvl_o)\n\t\t riscv::PRIV_LVL_M: begin\n\t\t\t debug_mode_d = dcsr_q.ebreakm;\n ...\n\t\t riscv::PRIV_LVL_U: begin\n\t\t\t debug_mode_d = dcsr_q.ebreaku;\n ...\n```\nassign priv_lvl_o = (debug_mode_q || umode_i) ? riscv::PRIV_LVL_M : priv_lvl_q;** \n\t ...\n\n```\n\t debug_mode_q \u003c= debug_mode_d;\n ...\n```"},{"BodyText":"However, it grants debug access and changes the privilege level, priv_lvl_o, even when one of the two checks is satisfied and the other is not. Because of this, debug access can be granted by simply requesting with sufficient privileges (i.e., debug_mode_q is enabled) and failing the password check (i.e., umode_i is disabled). This allows an attacker to bypass the debug password checking and gain debug access to the core, compromising the security of the processor."},{"BodyText":"A fix to this issue is to only change the privilege level of the processor when both checks are satisfied, i.e., the request has enough privileges (i.e., debug_mode_q is enabled) and the password checking is successful (i.e., umode_i is enabled) [REF-1378]."},{"Nature":"Good","Language":"Verilog","ExampleCode":"module csr_regfile #(\n ...\n\n```\n\t // check that we actually want to enter debug depending on the privilege level we are currently in\n\t unique case (priv_lvl_o)\n\t\t riscv::PRIV_LVL_M: begin\n\t\t\t debug_mode_d = dcsr_q.ebreakm;\n ...\n\t\t riscv::PRIV_LVL_U: begin\n\t\t\t debug_mode_d = dcsr_q.ebreaku;\n ...\n\t assign priv_lvl_o = \n```\n(debug_mode_q \u0026\u0026 umode_i) ? riscv::PRIV_LVL_M : priv_lvl_q;** \n\t ...\n\n```\n\t debug_mode_q \u003c= debug_mode_d;\n ...\n```"}]}],"ObservedExamples":[{"Reference":"CVE-2022-3979","Description":"Chain: data visualization program written in PHP uses the \"!=\" operator instead of the type-strict \"!==\" operator (CWE-480) when validating hash values, potentially leading to an incorrect type conversion (CWE-704)","Link":"https://www.cve.org/CVERecord?id=CVE-2022-3979"},{"Reference":"CVE-2021-3116","Description":"Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390)","Link":"https://www.cve.org/CVERecord?id=CVE-2021-3116"}],"TaxonomyMappings":[{"TaxonomyName":"CLASP","EntryName":"Using the wrong operator"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"EXP45-C","EntryName":"Do not perform assignments in selection statements","MappingFit":"CWE More Abstract"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"EXP46-C","EntryName":"Do not use a bitwise operator with a Boolean-like operand","MappingFit":"CWE More Abstract"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP1","EntryName":"Glitch in Computation"}],"References":[{"ExternalReferenceID":"REF-18","Authors":["Secure Software, Inc."],"Title":"The CLASP Application Security Process","PublicationYear":"2005","URL":"https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf"},{"ExternalReferenceID":"REF-62","Section":"Chapter 6, \"Typos\", Page 289","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"},{"ExternalReferenceID":"REF-1377","Title":"csr_regile.sv line 938","PublicationYear":"2021","URL":"https://github.com/HACK-EVENT/hackatdac19/blob/57e7b2109c1ea2451914878df2e6ca740c2dcf34/src/csr_regfile.sv#L938","URLDate":"2023-12-13"},{"ExternalReferenceID":"REF-1378","Title":"Fix for csr_regfile.sv line 938","PublicationYear":"2021","URL":"https://github.com/HACK-EVENT/hackatdac19/blob/a7b61209e56c48eec585eeedea8413997ec71e4a/src/csr_regfile.sv#L938C31-L938C56","URLDate":"2023-12-13"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CLASP","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-10-14","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Common_Consequences, References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Demonstrative_Examples, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-06-23","ModificationComment":"updated Applicable_Platforms, Description, Detection_Factors, Other_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Demonstrative_Examples, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description, Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Demonstrative_Examples, References","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"},{"Type":"Contribution","ContributionName":"Chen Chen, Rahul Kande, Jeyavijayan Rajendran","ContributionOrganization":"Texas A\u0026M University","ContributionDate":"2023-11-07","ContributionComment":"suggested demonstrative example","ContributionType":"Content"},{"Type":"Contribution","ContributionName":"Shaza Zeitouni, Mohamadreza Rostami, Ahmad-Reza Sadeghi","ContributionOrganization":"Technical University of Darmstadt","ContributionDate":"2023-11-07","ContributionComment":"suggested demonstrative example","ContributionType":"Content"},{"Type":"Rename","PreviousEntryName":"Using the Wrong Operator","Date":"2008-04-11"}]}