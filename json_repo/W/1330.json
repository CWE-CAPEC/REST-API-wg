{"ID":"1330","Name":"Remanent Data Readable after Memory Erase","Abstraction":"Variant","Structure":"Simple","Status":"Draft","Description":"Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.","ExtendedDescription":"\n\nData remanence occurs when stored, memory content is not fully lost after a memory-clear or -erase operation. Confidential memory contents can still be readable through data remanence in the hardware.\n\n\nData remanence can occur because of performance optimization or memory organization during 'clear' or 'erase' operations, like a design that allows the memory-organization metadata (e.g., file pointers) to be erased without erasing the actual memory content. To protect against this weakness, memory devices will often support different commands for optimized memory erase and explicit secure erase.\n\n\nData remanence can also happen because of the physical properties of memory circuits in use. For example, static, random-access-memory (SRAM) and dynamic, random-access-memory (DRAM) data retention is based on the charge retained in the memory cell, which depends on factors such as power supply, refresh rates, and temperature.\n\n\nOther than explicit erase commands, self-encrypting, secure-memory devices can also support secure erase through cryptographic erase commands. In such designs, only the decryption keys for encrypted data stored on the device are erased. That is, the stored data are always remnant in the media after a cryptographic erase. However, only the encrypted data can be extracted. Thus, protection against data recovery in such designs relies on the strength of the encryption algorithm.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"1301","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"1301","ViewID":"1194","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Name":"Security Hardware","Prevalence":"Undetermined"},{"Type":"Technology","Class":"Not Technology-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Confidentiality"],"Impact":["Modify Memory","Read Memory"],"Note":"Confidential data are readable to untrusted agent."}],"DetectionMethods":[{"Method":"Architecture or Design Review","Description":"\n\n  - Testing of memory-device contents after clearing or erase commands.\n\n  - Dynamic analysis of memory contents during device operation to detect specific, confidential assets.\n\n  - Architecture and design analysis of memory clear and erase operations.\n\n"},{"Method":"Dynamic Analysis with Manual Results Interpretation","Description":"\n\n  - Testing of memory-device contents after clearing or erase commands.\n\n  - Dynamic analysis of memory contents during device operation to detect specific, confidential assets.\n\n  - Architecture and design analysis of memory clear and erase operations.\n\n"}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"\n\n  - Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content.\n\n  - Support for cryptographic erase in self-encrypting, memory devices.\n\n  - External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM).\n\n  - Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.\n\n"}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"Consider a device that uses flash memory for non-volatile-data storage. To optimize flash-access performance or reliable-flash lifetime, the device might limit the number of flash writes/erases by maintaining some state in internal SRAM and only committing changes to flash memory periodically."},{"BodyText":"The device also supports user reset to factory defaults with the expectation that all personal information is erased from the device after this operation. On factory reset, user files are erased using explicit, erase commands supported by the flash device."},{"BodyText":"In the given, system design, the flash-file system can support performance-optimized erase such that only the file metadata are erased and not the content. If this optimized erase is used for files containing user data during factory-reset flow, then device, flash memory can contain remanent data from these files."},{"BodyText":"On device-factory reset, the implementation might not erase these copies, since the file organization has changed and the flash file system does not have the metadata to track all previous copies."},{"BodyText":"A flash-memory region that is used by a flash-file system should be fully erased as part of the factory-reset flow. This should include secure-erase flow for the flash media such as overwriting patterns multiple times followed by erase."}]}],"ObservedExamples":[{"Reference":"CVE-2019-8575","Description":"Firmware Data Deletion Vulnerability in which a base station factory reset might not delete all user information. The impact of this enables a new owner of a used device that has been \"factory-default reset\" with a vulnerable firmware version can still retrieve, at least, the previous owner's wireless network name, and the previous owner's wireless security (such as WPA2) key. This issue was addressed with improved, data deletion.","Link":"https://www.cve.org/CVERecord?id=CVE-2019-8575"}],"RelatedAttackPatterns":["150","37","545"],"References":[{"ExternalReferenceID":"REF-1154","Authors":["National Institute of Standards and Technology"],"Title":"NIST Special Publication 800-88 Revision 1: Guidelines for Media Sanitization","PublicationYear":"2014","PublicationMonth":"12","URL":"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-88r1.pdf","URLDate":"2023-04-07"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"Hareesh Khattri, Arun Kanuparthi, Parbati K. Manna","SubmissionOrganization":"Intel Corporation","SubmissionDate":"2020-06-10","SubmissionVersion":"4.3","SubmissionReleaseDate":"2020-12-10"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Applicable_Platforms"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Applicable_Platforms"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}