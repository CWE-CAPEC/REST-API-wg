{"ID":"467","Name":"Use of sizeof() on a Pointer Type","Abstraction":"Variant","Structure":"Simple","Status":"Draft","Description":"The code calls sizeof() on a pointer type, which can be an incorrect calculation if the programmer intended to determine the size of the data that is being pointed to.","ExtendedDescription":"The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.","LikelihoodOfExploit":"High","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"131","ViewID":"1000","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Undetermined"},{"Type":"Language","Name":"C++","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Confidentiality"],"Impact":["Modify Memory","Read Memory"],"Note":"This error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows."}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"Care should be taken to ensure sizeof returns the size of the data structure itself, and not the size of the pointer to the data structure."},{"BodyText":"In this example, sizeof(foo) returns the size of the pointer."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tdouble *foo;\n\t...\n\tfoo = (double *)malloc(sizeof(foo));\n```"},{"BodyText":"In this example, sizeof(*foo) returns the size of the data structure and not the size of the pointer."},{"Nature":"Good","Language":"C","ExampleCode":"```\n\tdouble *foo;\n\t...\n\tfoo = (double *)malloc(sizeof(*foo));\n```"}]},{"Entries":[{"IntroText":"This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded."},{"Nature":"Bad","ExampleCode":"```\n```\n/* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */* \n\t\n\tchar *username = \"admin\";\n\tchar *pass = \"password\";\n\t\n\tint AuthenticateUser(char *inUser, char *inPass) {\n\t```\n\t\t\tprintf(\"Sizeof username = %d\\n\", sizeof(username));\n\t\t\tprintf(\"Sizeof pass = %d\\n\", sizeof(pass));\n\t\t\tif (strncmp(username, inUser, sizeof(username))) {\n\t\t\t\tprintf(\"Auth failure of username using sizeof\\n\");\n\t\t\t\treturn(AUTH_FAIL);\n\t\t\t}\n```\n/* Because of CWE-467, the sizeof returns 4 on many platforms and architectures. */* \n\t\t\t\n\t\t\tif (! strncmp(pass, inPass, sizeof(pass))) {\n\t\t\t```\n\t\t\t\tprintf(\"Auth success of password using sizeof\\n\");\n\t\t\t\treturn(AUTH_SUCCESS);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprintf(\"Auth fail of password using sizeof\\n\");\n\t\t\t\treturn(AUTH_FAIL);\n\t\t\t}\n\t}\n\tint main (int argc, char **argv)\n\t{\n\t\t\tint authResult;\n\t\t\tif (argc \u003c 3) {\n\t\t\t\tExitError(\"Usage: Provide a username and password\");\n\t\t\t}\n\t\t\tauthResult = AuthenticateUser(argv[1], argv[2]);\n\t\t\tif (authResult != AUTH_SUCCESS) {\n\t\t\t\tExitError(\"Authentication failed\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tDoAuthenticatedTask(argv[1]);\n\t\t\t}\n\t}\n```"},{"BodyText":"In AuthenticateUser(), because sizeof() is applied to a parameter with an array type, the sizeof() call might return 4 on many modern architectures. As a result, the strncmp() call only checks the first four characters of the input password, resulting in a partial comparison (CWE-187), leading to improper authentication (CWE-287)."},{"BodyText":"Because of the partial comparison, any of these passwords would still cause authentication to succeed for the \"admin\" user:"},{"Nature":"Attack","ExampleCode":"```\n\tpass5\n\tpassABCDEFGH\n\tpassWORD\n```"},{"BodyText":"Because only 4 characters are checked, this significantly reduces the search space for an attacker, making brute force attacks more feasible."},{"BodyText":"The same problem also applies to the username, so values such as \"adminXYZ\" and \"administrator\" will succeed for the username."}]}],"TaxonomyMappings":[{"TaxonomyName":"CLASP","EntryName":"Use of sizeof() on a pointer type"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"ARR01-C","EntryName":"Do not apply the sizeof operator to a pointer when taking the size of an array"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"MEM35-C","EntryName":"Allocate sufficient memory for an object","MappingFit":"CWE More Abstract"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP10","EntryName":"Incorrect Buffer Length Computation"}],"References":[{"ExternalReferenceID":"REF-18","Authors":["Secure Software, Inc."],"Title":"The CLASP Application Security Process","PublicationYear":"2005","URL":"https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf","URLDate":"2024-11-17"},{"ExternalReferenceID":"REF-442","Authors":["Robert Seacord"],"Title":"EXP01-A. Do not take the sizeof a pointer to determine the size of a type","URL":"https://www.securecoding.cert.org/confluence/display/seccode/EXP01-A.+Do+not+take+the+sizeof+a+pointer+to+determine+the+size+of+a+type"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CLASP","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationOrganization":"KDM Analytics","ModificationDate":"2008-08-01","ModificationComment":"added/updated white box definitions"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-03-10","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-12-28","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-06-23","ModificationComment":"updated Description, Other_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Demonstrative_Examples, Taxonomy_Mappings, White_Box_Definitions"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-11-19","ModificationComment":"updated Description","ModificationVersion":"4.16","ModificationReleaseDate":"2024-11-19"},{"Type":"Contribution","ContributionName":"Marco Trosi","ContributionOrganization":"Schaeffler Group","ContributionDate":"2024-10-21","ContributionComment":"Identified inappropriate emphasis on pointers to data allocated with malloc(), leading to a description change.","ContributionType":"Feedback","ContributionVersion":"4.16","ContributionReleaseDate":"2024-11-19"}]}