{"ID":"787","Name":"Out-of-bounds Write","Abstraction":"Base","Structure":"Simple","Status":"Draft","Diagram":"/data/images/CWE-787-Diagram.png","Description":"The product writes data past the end, or before the beginning, of the intended buffer.","LikelihoodOfExploit":"High","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"119","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"119","ViewID":"1003","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"119","ViewID":"1305","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"119","ViewID":"1340","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Resultant","Description":"At the point when the product writes data to an invalid location, it is likely that a separate weakness already occurred earlier. For example, the product might alter an index, perform incorrect pointer arithmetic, initialize or release memory incorrectly, etc., thus referencing a memory location outside the buffer."}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Often"},{"Type":"Language","Name":"C++","Prevalence":"Often"},{"Type":"Language","Class":"Assembly","Prevalence":"Undetermined"},{"Type":"Technology","Class":"ICS/OT","Prevalence":"Often"}],"AlternateTerms":[{"Term":"Memory Corruption","Description":"Often used to describe the consequences of writing to memory outside the bounds of a buffer, or to memory that is otherwise invalid."}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity"],"Impact":["Modify Memory","Execute Unauthorized Code or Commands"],"Note":"Write operations could cause memory corruption. In some cases, an adversary can modify control data such as return addresses in order to execute unexpected code."},{"Scope":["Availability"],"Impact":["DoS: Crash, Exit, or Restart"],"Note":"Attempting to access out-of-range, invalid, or unauthorized memory could cause the product to crash."},{"Scope":["Other"],"Impact":["Unexpected State"],"Note":"Subsequent write operations can produce undefined or unexpected results."}],"DetectionMethods":[{"DetectionMethodID":"DM-1","Method":"Automated Static Analysis","Description":"\n\nThis weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.\n\n\nAutomated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\n","Effectiveness":"High","EffectivenessNotes":"Detection techniques for buffer-related errors are more mature than for most other weakness types."},{"DetectionMethodID":"DM-2","Method":"Automated Dynamic Analysis","Description":"This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."}],"PotentialMitigations":[{"MitigationID":"MIT-3","Phase":["Requirements"],"Strategy":"Language Selection","Description":"\n\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.\n\n\nBe wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\n"},{"MitigationID":"MIT-4.1","Phase":["Architecture and Design"],"Strategy":"Libraries or Frameworks","Description":"\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nExamples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.\n","EffectivenessNotes":"This is not a complete solution, since many buffer overflows are not related to strings."},{"MitigationID":"MIT-10","Phase":["Operation","Build and Compilation"],"Strategy":"Environment Hardening","Description":"\n\nUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. \n\n\n D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. \n","Effectiveness":"Defense in Depth","EffectivenessNotes":"\n\n This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application. \n"},{"MitigationID":"MIT-9","Phase":["Implementation"],"Description":"\n\nConsider adhering to the following rules when allocating and managing an application's memory:\n\n\n  - Double check that the buffer is as large as specified.\n\n  - When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.\n\n  - Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.\n\n  - If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.\n\n"},{"MitigationID":"MIT-11","Phase":["Operation","Build and Compilation"],"Strategy":"Environment Hardening","Description":"\n\nRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. \n\n\n Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. \n\n\n For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. \n","Effectiveness":"Defense in Depth","EffectivenessNotes":"These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]."},{"MitigationID":"MIT-12","Phase":["Operation"],"Strategy":"Environment Hardening","Description":"\n\n Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. \n\n\n For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]. \n","Effectiveness":"Defense in Depth","EffectivenessNotes":"This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."},{"MitigationID":"MIT-13","Phase":["Implementation"],"Description":"Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.","Effectiveness":"Moderate","EffectivenessNotes":"This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131)."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"The following code attempts to save four different identification numbers into an array."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tint id_sequence[3];\n\t/* Populate the id array. */\n\tid_sequence[0] = 123;\n\tid_sequence[1] = 234;\n\tid_sequence[2] = 345;\n\tid_sequence[3] = 456;\n```"},{"BodyText":"Since the array is only allocated to hold three elements, the valid indices are 0 to 2; so, the assignment to id_sequence[3] is out of bounds."}]},{"ID":"DX-114","Entries":[{"IntroText":"In the following code, it is possible to request that memcpy move a much larger segment of memory than assumed:"},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tint returnChunkSize(void *) {\n```\n/* if chunk info is valid, return the size of usable memory,* \n\t\t\t\n\t\t\t\n\t\t\t ** else, return -1 to indicate an error* \n\t\t\t\n\t\t\t\n\t\t\t **/* \n\t\t\t...}\n\tint main() {\n\t```\n\t\t...\n\t\tmemcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));\n\t\t...\n\t}\n```"},{"BodyText":"If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787, CWE-788)."}]},{"ID":"DX-1","Entries":[{"IntroText":"This code takes an IP address from the user and verifies that it is well formed. It then looks up the hostname and copies it into a buffer."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tvoid host_lookup(char *user_supplied_addr){\n\t\t\tstruct hostent *hp;\n\t\t\tin_addr_t *addr;\n\t\t\tchar hostname[64];\n\t\t\tin_addr_t inet_addr(const char *cp);\n```\n/*routine that ensures user_supplied_addr is in the right format for conversion */* \n\t\t\t\n\t\t\tvalidate_addr_form(user_supplied_addr);\n\t\t\taddr = inet_addr(user_supplied_addr);\n\t\t\thp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);\n\t\t\tstrcpy(hostname, hp-\u003eh_name);}"},{"BodyText":"This function allocates a buffer of 64 bytes to store the hostname. However, there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker."},{"BodyText":"Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476)."}]},{"ID":"DX-19","Entries":[{"IntroText":"This code applies an encoding procedure to an input string and stores it into a buffer."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tchar * copy_input(char *user_supplied_string){\n\t\t\tint i, dst_index;\n\t\t\tchar *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);\n\t\t\tif ( MAX_SIZE \u003c= strlen(user_supplied_string) ){\n\t\t\t\tdie(\"user string too long, die evil hacker!\");\n\t\t\t}\n\t\t\tdst_index = 0;\n\t\t\tfor ( i = 0; i \u003c strlen(user_supplied_string); i++ ){\n\t\t\t\t\tif( '\u0026' == user_supplied_string[i] ){\n\t\t\t\t\t\tdst_buf[dst_index++] = '\u0026';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'a';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'm';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'p';\n\t\t\t\t\t\tdst_buf[dst_index++] = ';';\n\t\t\t\t\t}\n\t\t\t\t\telse if ('\u003c' == user_supplied_string[i] ){\n```\n/* encode to \u0026lt; */* \n\t\t\t\t\t\t\t}\n\t\t\t\t\telse dst_buf[dst_index++] = user_supplied_string[i];}\n\t\t\treturn dst_buf;}"},{"BodyText":"The programmer attempts to encode the ampersand character in the user-controlled string. However, the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands."}]},{"ID":"DX-87","Entries":[{"IntroText":"In the following C/C++ code, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tchar* trimTrailingWhitespace(char *strMessage, int length) {\n\t\t\tchar *retMessage;\n\t\t\tchar *message = malloc(sizeof(char)*(length+1));\n```\n// copy input string to a temporary string* \n\t\t\tchar message[length+1];\n\t\t\tint index;\n\t\t\tfor (index = 0; index \u003c length; index++) {\n\t\t\t```\n\t\t\t\tmessage[index] = strMessage[index];\n\t\t\t}\n\t\t\tmessage[index] = '\\0';\n```\n// trim trailing whitespace* \n\t\t\tint len = index-1;\n\t\t\twhile (isspace(message[len])) {\n\t\t\t```\n\t\t\t\tmessage[len] = '\\0';\n\t\t\t\tlen--;\n\t\t\t}\n```\n// return string without trailing whitespace* \n\t\t\tretMessage = message;\n\t\t\treturn retMessage;}"},{"BodyText":"However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer."}]},{"ID":"DX-20","Entries":[{"IntroText":"The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tint i;\n\tunsigned int numWidgets;\n\tWidget **WidgetList;\n\tnumWidgets = GetUntrustedSizeValue();\n\tif ((numWidgets == 0) || (numWidgets \u003e MAX_NUM_WIDGETS)) {\n\t\tExitError(\"Incorrect number of widgets requested!\");\n\t}\n\tWidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));\n\tprintf(\"WidgetList ptr=%p\\n\", WidgetList);\n\tfor(i=0; i\u003cnumWidgets; i++) {\n\t\tWidgetList[i] = InitializeWidget();\n\t}\n\tWidgetList[numWidgets] = NULL;\n\tshowWidgets(WidgetList);\n```"},{"BodyText":"However, this code contains an off-by-one calculation error (CWE-193). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be (CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write (CWE-787) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption."}]},{"ID":"DX-88","Entries":[{"IntroText":"The following is an example of code that may result in a buffer underwrite. This code is attempting to replace the substring \"Replace Me\" in destBuf with the string stored in srcBuf. It does so by using the function strstr(), which returns a pointer to the found substring in destBuf. Using pointer arithmetic, the starting index of the substring is found."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tint main() { \n\t\t...\n\t\t char *result = strstr(destBuf, \"Replace Me\");\n\t\t int idx = result - destBuf;\n\t\t strcpy(\u0026destBuf[idx], srcBuf);\n\t\t ...\n\t} \n```"},{"BodyText":"In the case where the substring is not found in destBuf, strstr() will return NULL, causing the pointer arithmetic to be undefined, potentially setting the value of idx to a negative number. If idx is negative, this will result in a buffer underwrite of destBuf."}]}],"ObservedExamples":[{"Reference":"CVE-2021-21220","Description":"Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2021-21220"},{"Reference":"CVE-2021-28664","Description":"GPU kernel driver allows memory corruption because a user can obtain read/write access to read-only pages, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2021-28664"},{"Reference":"CVE-2020-17087","Description":"Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-17087"},{"Reference":"CVE-2020-1054","Description":"Out-of-bounds write in kernel-mode driver, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-1054"},{"Reference":"CVE-2020-0041","Description":"Escape from browser sandbox using out-of-bounds write due to incorrect bounds check, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-0041"},{"Reference":"CVE-2020-0968","Description":"Memory corruption in web browser scripting engine, as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-0968"},{"Reference":"CVE-2020-0022","Description":"chain: mobile phone Bluetooth implementation does not include offset when calculating packet length (CWE-682), leading to out-of-bounds write (CWE-787)","Link":"https://www.cve.org/CVERecord?id=CVE-2020-0022"},{"Reference":"CVE-2019-1010006","Description":"Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).","Link":"https://www.cve.org/CVERecord?id=CVE-2019-1010006"},{"Reference":"CVE-2009-1532","Description":"malformed inputs cause accesses of uninitialized or previously-deleted objects, leading to memory corruption","Link":"https://www.cve.org/CVERecord?id=CVE-2009-1532"},{"Reference":"CVE-2009-0269","Description":"chain: -1 value from a function call was intended to indicate an error, but is used as an array index instead.","Link":"https://www.cve.org/CVERecord?id=CVE-2009-0269"},{"Reference":"CVE-2002-2227","Description":"Unchecked length of SSLv2 challenge value leads to buffer underflow.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-2227"},{"Reference":"CVE-2007-4580","Description":"Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130)","Link":"https://www.cve.org/CVERecord?id=CVE-2007-4580"},{"Reference":"CVE-2007-4268","Description":"Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122)","Link":"https://www.cve.org/CVERecord?id=CVE-2007-4268"},{"Reference":"CVE-2009-2550","Description":"Classic stack-based buffer overflow in media player using a long entry in a playlist","Link":"https://www.cve.org/CVERecord?id=CVE-2009-2550"},{"Reference":"CVE-2009-2403","Description":"Heap-based buffer overflow in media player using a long entry in a playlist","Link":"https://www.cve.org/CVERecord?id=CVE-2009-2403"}],"TaxonomyMappings":[{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 3-3","EntryName":"Req SR 3.5"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-1","EntryName":"Req SI-1"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-1","EntryName":"Req SI-2"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-1","EntryName":"Req SVV-1"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-1","EntryName":"Req SVV-3"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-2","EntryName":"Req CR 3.5"}],"References":[{"ExternalReferenceID":"REF-1029","Authors":["Aleph One"],"Title":"Smashing The Stack For Fun And Profit","PublicationYear":"1996","PublicationMonth":"11","PublicationDay":"08","URL":"http://phrack.org/issues/49/14.html"},{"ExternalReferenceID":"REF-7","Section":"Chapter 5, \"Stack Overruns\" Page 129","Authors":["Michael Howard","David LeBlanc"],"Title":"Writing Secure Code","Edition":"2nd Edition","PublicationYear":"2002","PublicationMonth":"12","PublicationDay":"04","Publisher":"Microsoft Press","URL":"https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223"},{"ExternalReferenceID":"REF-7","Section":"Chapter 5, \"Heap Overruns\" Page 138","Authors":["Michael Howard","David LeBlanc"],"Title":"Writing Secure Code","Edition":"2nd Edition","PublicationYear":"2002","PublicationMonth":"12","PublicationDay":"04","Publisher":"Microsoft Press","URL":"https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223"},{"ExternalReferenceID":"REF-44","Section":"\"Sin 5: Buffer Overruns.\" Page 89","Authors":["Michael Howard","David LeBlanc","John Viega"],"Title":"24 Deadly Sins of Software Security","Publication":"McGraw-Hill","PublicationYear":"2010"},{"ExternalReferenceID":"REF-62","Section":"Chapter 3, \"Nonexecutable Stack\", Page 76","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"},{"ExternalReferenceID":"REF-62","Section":"Chapter 5, \"Protection Mechanisms\", Page 189","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"},{"ExternalReferenceID":"REF-90","Title":"Buffer UNDERFLOWS: What do you know about it?","Publication":"Vuln-Dev Mailing List","PublicationYear":"2004","PublicationMonth":"01","PublicationDay":"10","URL":"https://seclists.org/vuln-dev/2004/Jan/22","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-56","Authors":["Microsoft"],"Title":"Using the Strsafe.h Functions","URL":"https://learn.microsoft.com/en-us/windows/win32/menurc/strsafe-ovw?redirectedfrom=MSDN","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-57","Authors":["Matt Messier","John Viega"],"Title":"Safe C String Library v1.0.3","URL":"http://www.gnu-darwin.org/www001/ports-1.5a-CURRENT/devel/safestr/work/safestr-1.0.3/doc/safestr.html","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-58","Authors":["Michael Howard"],"Title":"Address Space Layout Randomization in Windows Vista","URL":"https://learn.microsoft.com/en-us/archive/blogs/michael_howard/address-space-layout-randomization-in-windows-vista","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-60","Title":"PaX","URL":"https://en.wikipedia.org/wiki/Executable_space_protection#PaX","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-61","Authors":["Microsoft"],"Title":"Understanding DEP as a mitigation technology part 1","URL":"https://msrc.microsoft.com/blog/2009/06/understanding-dep-as-a-mitigation-technology-part-1/","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-64","Authors":["Grant Murphy"],"Title":"Position Independent Executables (PIE)","PublicationYear":"2012","PublicationMonth":"11","PublicationDay":"28","Publisher":"Red Hat","URL":"https://www.redhat.com/en/blog/position-independent-executables-pie","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-1332","Authors":["John Richard Moser"],"Title":"Prelink and address space randomization","PublicationYear":"2006","PublicationMonth":"07","PublicationDay":"05","URL":"https://lwn.net/Articles/190139/","URLDate":"2023-04-26"},{"ExternalReferenceID":"REF-1333","Authors":["Dmitry Evtyushkin, Dmitry Ponomarev, Nael Abu-Ghazaleh"],"Title":"Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR","PublicationYear":"2016","URL":"http://www.cs.ucr.edu/~nael/pubs/micro16.pdf","URLDate":"2023-04-26"},{"ExternalReferenceID":"REF-1334","Authors":["D3FEND"],"Title":"Stack Frame Canary Validation (D3-SFCV)","PublicationYear":"2023","URL":"https://d3fend.mitre.org/technique/d3f:StackFrameCanaryValidation/","URLDate":"2023-04-26"},{"ExternalReferenceID":"REF-1335","Authors":["D3FEND"],"Title":"Segment Address Offset Randomization (D3-SAOR)","PublicationYear":"2023","URL":"https://d3fend.mitre.org/technique/d3f:SegmentAddressOffsetRandomization/","URLDate":"2023-04-26"},{"ExternalReferenceID":"REF-1336","Authors":["D3FEND"],"Title":"Process Segment Execution Prevention (D3-PSEP)","PublicationYear":"2023","URL":"https://d3fend.mitre.org/technique/d3f:ProcessSegmentExecutionPrevention/","URLDate":"2023-04-26"},{"ExternalReferenceID":"REF-1337","Section":"Memory information leaks","Authors":["Alexander Sotirov and Mark Dowd"],"Title":"Bypassing Browser Memory Protections: Setting back browser security by 10 years","PublicationYear":"2008","URL":"https://www.blackhat.com/presentations/bh-usa-08/Sotirov_Dowd/bh08-sotirov-dowd.pdf","URLDate":"2023-04-26"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2009-10-21","SubmissionVersion":"1.6","SubmissionReleaseDate":"2009-10-29"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-06-23","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2018-03-27","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-09-19","ModificationComment":"updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations, References, Relationships, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Alternate_Terms, Demonstrative_Examples, Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Demonstrative_Examples, Potential_Mitigations, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Applicable_Platforms"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Alternate_Terms, Demonstrative_Examples, Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-02-29","ModificationComment":"updated Demonstrative_Examples","ModificationVersion":"4.14","ModificationReleaseDate":"2024-02-29"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2024-07-16","ModificationComment":"updated Alternate_Terms, Common_Consequences, Description, Diagram, Weakness_Ordinalities","ModificationVersion":"4.15","ModificationReleaseDate":"2024-07-16"},{"Type":"Contribution","ContributionName":"\"Mapping CWE to 62443\" Sub-Working Group","ContributionOrganization":"CWE-CAPEC ICS/OT SIG","ContributionDate":"2023-04-25","ContributionComment":"Suggested mappings to ISA/IEC 62443.","ContributionType":"Content"},{"Type":"Contribution","ContributionName":"Abhi Balakrishnan","ContributionDate":"2024-02-29","ContributionComment":"Provided diagram to improve CWE usability","ContributionType":"Content","ContributionVersion":"4.15","ContributionReleaseDate":"2024-07-16"}]}