{"ID":"456","Name":"Missing Initialization of a Variable","Abstraction":"Variant","Structure":"Simple","Status":"Draft","Description":"The product does not initialize critical variables, which causes the execution environment to use unexpected values.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"909","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"665","ViewID":"1305","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"665","ViewID":"1340","Ordinal":"Primary"},{"Nature":"CanPrecede","CweID":"89","ViewID":"1000"},{"Nature":"CanPrecede","CweID":"120","ViewID":"1000"},{"Nature":"CanPrecede","CweID":"98","ViewID":"1000"},{"Nature":"CanPrecede","CweID":"457","ViewID":"1000"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Other"],"Impact":["Unexpected State","Quality Degradation","Varies by Context"],"Note":"The uninitialized data may be invalid, causing logic errors within the program. In some cases, this could result in a security problem."}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Check that critical variables are initialized."},{"Phase":["Testing"],"Description":"Use a static analysis tool to spot non-initialized variables."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"This function attempts to extract a pair of numbers from a user-supplied string."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tvoid parse_data(char *untrusted_input){\n\t\t\tint m, n, error;\n\t\t\terror = sscanf(untrusted_input, \"%d:%d\", \u0026m, \u0026n);\n\t\t\tif ( EOF == error ){\n\t\t\t\tdie(\"Did not specify integer value. Die evil hacker!\\n\");\n\t\t\t}\n```\n/* proceed assuming n and m are initialized correctly */* \n\t\t\t}"},{"BodyText":"This code attempts to extract two integer values out of a formatted, user-supplied input. However, if an attacker were to provide an input of the form:"},{"Nature":"Attack","ExampleCode":"```\n\t123:\n```"},{"BodyText":"then only the m variable will be initialized. Subsequent use of n may result in the use of an uninitialized variable (CWE-457)."}]},{"Entries":[{"IntroText":"Here, an uninitialized field in a Java class is used in a seldom-called method, which would cause a NullPointerException to be thrown."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tprivate User user;\n\tpublic void someMethod() {\n```\n// Do something interesting.* \n\t\t\t...\n\t\t\t\n\t\t\t\n\t\t\t *// Throws NPE if user hasn't been properly initialized.* \n\t\t\tString username = user.getName();}"}]},{"Entries":[{"IntroText":"This code first authenticates a user, then allows a delete command if the user is an administrator."},{"Nature":"Bad","Language":"PHP","ExampleCode":"```\n\tif (authenticate($username,$password) \u0026\u0026 setAdmin($username)){\n\t\t$isAdmin = true;\n\t}\n```\n/.../* \n\t\n\tif ($isAdmin){\n\t```\n\t\tdeleteUser($userToDelete);\n\t}\n```"},{"BodyText":"The $isAdmin variable is set to true if the user is an admin, but is uninitialized otherwise. If PHP's register_globals feature is enabled, an attacker can set uninitialized variables like $isAdmin to arbitrary values, in this case gaining administrator privileges by setting $isAdmin to true."}]},{"Entries":[{"IntroText":"In the following Java code the BankManager class uses the user variable of the class User to allow authorized users to perform bank manager tasks. The user variable is initialized within the method setUser that retrieves the User from the User database. The user is then authenticated as unauthorized user through the method authenticateUser."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic class BankManager {\n```\n// user allowed to perform bank manager tasks* \n\t\t\tprivate User user = null;\n\t\t\tprivate boolean isUserAuthentic = false;\n\t\t\t\n\t\t\t\n\t\t\t *// constructor for BankManager class* \n\t\t\tpublic BankManager() {\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n```\n// retrieve user from database of users* \n\t\t\tpublic User getUserFromUserDatabase(String username){\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n```\n// set user variable using username* \n\t\t\tpublic void setUser(String username) {\n\t\t\t```\n\t\t\t\tthis.user = getUserFromUserDatabase(username);\n\t\t\t}\n```\n// authenticate user* \n\t\t\tpublic boolean authenticateUser(String username, String password) {\n\t\t\t```\n\t\t\t\tif (username.equals(user.getUsername()) \u0026\u0026 password.equals(user.getPassword())) {\n\t\t\t\t\tisUserAuthentic = true;\n\t\t\t\t}\n\t\t\t\treturn isUserAuthentic;\n\t\t\t}\n```\n// methods for performing bank manager tasks* \n\t\t\t...}"},{"BodyText":"However, if the method setUser is not called before authenticateUser then the user variable will not have been initialized and will result in a NullPointerException. The code should verify that the user variable has been initialized before it is used, as in the following code."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tpublic class BankManager {\n```\n// user allowed to perform bank manager tasks* \n\t\t\tprivate User user = null;\n\t\t\tprivate boolean isUserAuthentic = false;\n\t\t\t\n\t\t\t\n\t\t\t *// constructor for BankManager class* \n\t\t\tpublic BankManager(String username) {\n\t\t\t```\n\t\t\t\tuser = getUserFromUserDatabase(username);\n\t\t\t}\n```\n// retrieve user from database of users* \n\t\t\tpublic User getUserFromUserDatabase(String username) {...}\n\t\t\t\n\t\t\t\n\t\t\t *// authenticate user* \n\t\t\tpublic boolean authenticateUser(String username, String password) {\n\t\t\t```\n\t\t\t\t\tif (user == null) {\n\t\t\t\t\t\tSystem.out.println(\"Cannot find user \" + username);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (password.equals(user.getPassword())) {\n\t\t\t\t\t\t\tisUserAuthentic = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn isUserAuthentic;\n\t\t\t}\n```\n// methods for performing bank manager tasks* \n\t\t\t\t\t...\n\t\t\t}"}]},{"ID":"DX-144","Entries":[{"IntroText":"This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized (CWE-456). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address."},{"Nature":"Bad","Language":"C","ExampleCode":"char *test_string;\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n printf(\"%s\", test_string);\n```"},{"BodyText":"When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings (CWE-457).\n\n\n To fix this code, there are a couple approaches to making sure that test_string has been properly set once it reaches the printf().\n\n\nOne solution would be to set test_string to an acceptable default before the conditional:"},{"Nature":"Good","Language":"C","ExampleCode":"char *test_string = \"Done at the beginning\";\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n printf(\"%s\", test_string);\n```"},{"BodyText":"Another solution is to ensure that each branch of the conditional - including the default/else branch - could ensure that test_string is set:"},{"Nature":"Good","Language":"C","ExampleCode":"char *test_string;\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n else {\n\ttest_string = \"Done on the other side!\";\n }\n printf(\"%s\", test_string);\n```"}]},{"Entries":[{"IntroText":"Consider the following merchant server application as implemented in [REF-1475]. It receives card payment information (orderPgData instance in OrderPgData.java) from the payment gateway (such as PayPal). The next step is to complete the payment (finalizeOrder() in Main.java). The merchant server validates the amount (validateAmount() in OrderPgData.java), and if the validation is successful, then the payment is completed."},{"Nature":"Bad","Language":"Java","ExampleCode":"File: OrderPgData.java\n\n public class OrderPgData {\n\n```\n\t String PgType;\n\t int productPrice;\n\t int paymentAmount;\n\t private boolean isPaymentAmountTampered;\n\t\t public boolean getIsPaymentAmountTampered() {\n\t\t\t return this.isPaymentAmountTampered;\n\t\t }\n\t ...\n public void validateAmount() {\n\t ... [sets this.setIsPaymentAmountTampered to true or false depending on whether the product price matches the payment amount]\n }\n```"},{"Nature":"Bad","Language":"Java","ExampleCode":"File: PgServiceResolver.java\n\n public class PgServiceResolver {\n\n```\n\t public OrderPgData getOrderPgDataByPgType(String pgType, int productPrice, int paymentAmount) {\n\t\t ...\n\t\t switch(pgType) {\n\t\t\t case \"card\":\n\t\t\t\t System.out.println(\"In \"+pgType+\" payment logic, orderPgData does not verify whether the product amount and payment amount have been tampered with.\");\n\t\t\t\t break;\n\t\t\t case \"paypal\":\n\t\t\t\t System.out.println(\"In \"+pgType+\" payment logic, orderPgData verifies whether the product amount and payment amount have been tampered with.\");\n\t\t\t\t orderPgData.validateAmount();\n\t\t\t\t break;\n\t\t\t }\n\t\t\t ...\n```"},{"Nature":"Bad","Language":"Java","ExampleCode":"File: Main.java\n\n public class Main {\n\n```\n\t public static void main(String[] args) { \n\t\t String pgType = \"card\"; // or paypal\n\t\t int productPrice = 100;\n\t\t int paymentAmount = 10;\n\t\t PgServiceResolver pgServiceResolver = new PgServiceResolver();\n\t\t OrderPgData orderPgData = pgServiceResolver.getOrderPgDataByPgType(pgType, productPrice, paymentAmount);\n\t\t finalizeOrder(orderPgData);\n\t }\n\t private static void finalizeOrder(OrderPgData orderPgData) {\n\t\t if (orderPgData.getIsPaymentAmountTampered()) {\n\t\t\t System.out.println(\"The attacker tampered with the payment amount, but product payment is canceled.\");\n\t\t } else {\n\t\t\t ... /* the product payment is completed */\n\t\t } \n\t } \n }\n```"},{"BodyText":"In PgServiceResolver.java, when pgType is \"card\" indicating a card payment, orderPgData.validateAmount() is not called - that is, the amount is not validated to be the same as the expected price.\n\n\nSince isPaymentAmountTampered is declared as a private boolean, but it is not initialized, it is forcibly initialized to false by the Java compiler [REF-1476].\n\n\nIf the adversary modifies the price, e.g., changing paymentAmount from 100 to 10, then no validation is performed. Since isPaymentAmountTampered is \"false\" because of the default initialization, the code finishes processing the payment because it does not believe that the amount has been changed."},{"BodyText":"This weakness could be addressed by setting the value of isPaymentAmountTampered to true. This is a \"secure-by-default\" value that reflects a \"default deny\" policy - i.e., it's assumed that the payment amount is tampered, and only a special validation step can change this assumption."},{"Nature":"Good","Language":"Java","ExampleCode":"File: OrderPgData.java\n ...\n\n```\n\t private boolean isPaymentAmountTampered = true; \n```"}]}],"ObservedExamples":[{"Reference":"CVE-2020-6078","Description":"Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476)","Link":"https://www.cve.org/CVERecord?id=CVE-2020-6078"},{"Reference":"CVE-2019-3836","Description":"Chain: secure communications library does not initialize a local variable for a data structure (CWE-456), leading to access of an uninitialized pointer (CWE-824).","Link":"https://www.cve.org/CVERecord?id=CVE-2019-3836"},{"Reference":"CVE-2018-14641","Description":"Chain: C union member is not initialized (CWE-456), leading to access of invalid pointer (CWE-824)","Link":"https://www.cve.org/CVERecord?id=CVE-2018-14641"},{"Reference":"CVE-2009-2692","Description":"Chain: Use of an unimplemented network socket operation pointing to an uninitialized handler function (CWE-456) causes a crash because of a null pointer dereference (CWE-476).","Link":"https://www.cve.org/CVERecord?id=CVE-2009-2692"},{"Reference":"CVE-2020-20739","Description":"A variable that has its value set in a conditional statement is sometimes used when the conditional fails, sometimes causing data leakage","Link":"https://www.cve.org/CVERecord?id=CVE-2020-20739"},{"Reference":"CVE-2005-2978","Description":"Product uses uninitialized variables for size and index, leading to resultant buffer overflow.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2978"},{"Reference":"CVE-2005-2109","Description":"Internal variable in PHP application is not initialized, allowing external modification.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2109"},{"Reference":"CVE-2005-2193","Description":"Array variable not initialized in PHP application, leading to resultant SQL injection.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2193"}],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"Missing Initialization"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP1","EntryName":"Glitch in computation"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"ERR30-C","EntryName":"Set errno to zero before calling a library function known to set errno,  and check errno only after the function returns a value indicating failure","MappingFit":"CWE More Abstract"},{"TaxonomyName":"SEI CERT Perl Coding Standard","EntryID":"DCL04-PL","EntryName":"Always initialize local variables","MappingFit":"Exact"},{"TaxonomyName":"SEI CERT Perl Coding Standard","EntryID":"DCL33-PL","EntryName":"Declare identifiers before using them","MappingFit":"Imprecise"},{"TaxonomyName":"OMG ASCSM","EntryID":"ASCSM-CWE-456"},{"TaxonomyName":"OMG ASCRM","EntryID":"ASCRM-CWE-456"}],"References":[{"ExternalReferenceID":"REF-62","Section":"Chapter 7, \"Variable Initialization\", Page 312","Authors":["Mark Dowd","John McDonald","Justin Schuh"],"Title":"The Art of Software Security Assessment","Edition":"1st Edition","PublicationYear":"2006","Publisher":"Addison Wesley"},{"ExternalReferenceID":"REF-961","Section":"ASCRM-CWE-456","Authors":["Object Management Group (OMG)"],"Title":"Automated Source Code Reliability Measure (ASCRM)","PublicationYear":"2016","PublicationMonth":"01","URL":"http://www.omg.org/spec/ASCRM/1.0/"},{"ExternalReferenceID":"REF-962","Section":"ASCSM-CWE-456","Authors":["Object Management Group (OMG)"],"Title":"Automated Source Code Security Measure (ASCSM)","PublicationYear":"2016","PublicationMonth":"01","URL":"http://www.omg.org/spec/ASCSM/1.0/"},{"ExternalReferenceID":"REF-1475","Authors":["windshock"],"Title":"uninitialized variable vulnerability - Problem with boolean variables that are forcibly initialized to false by the Java compiler","PublicationYear":"2022","PublicationMonth":"09","PublicationDay":"13","URL":"https://github.com/windshock/uninitialized-variable-vulnerability/blob/main/README.md","URLDate":"2025-04-02"},{"ExternalReferenceID":"REF-1476","Authors":["James Gosling","Bill Joy","Guy Steele","Gilad Bracha","Alex Buckley"],"Title":"The Java Language Specification, Java SE 7 Edition","PublicationYear":"2013","PublicationMonth":"02","PublicationDay":"28","URL":"https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5","URLDate":"2025-04-02"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Relationship","Note":"This weakness is a major factor in a number of resultant weaknesses, especially in web applications that allow global variable initialization (such as PHP) with libraries that can be directly requested."},{"Type":"Research Gap","Note":"It is highly likely that a large number of resultant weaknesses have missing initialization as a primary factor, but researcher reports generally do not provide this level of detail."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Sean Eidemiller","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"added/updated demonstrative examples"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Potential_Mitigations, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Relationships, Other_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-04-05","ModificationComment":"updated Applicable_Platforms, Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Other_Notes, Relationship_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-03-29","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Common_Consequences, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2013-02-21","ModificationComment":"updated Name, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated References, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Relationships, Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples, Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2025-04-03","ModificationComment":"updated Demonstrative_Examples, Observed_Examples, References","ModificationVersion":"4.17","ModificationReleaseDate":"2025-04-03"},{"Type":"Contribution","ContributionName":"Hyeongkwan Lee","ContributionOrganization":"SK Planet","ContributionDate":"2022-09-13","ContributionComment":"provided demonstratuve example for Java boolean variables","ContributionType":"Content","ContributionVersion":"4.17","ContributionReleaseDate":"2025-04-03"},{"Type":"Rename","PreviousEntryName":"Missing Initialization","Date":"2013-02-21"}]}