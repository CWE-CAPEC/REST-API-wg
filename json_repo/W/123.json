{"ID":"123","Name":"Write-what-where Condition","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.","LikelihoodOfExploit":"High","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"787","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"119","ViewID":"1305","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"119","ViewID":"1340","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Resultant"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Undetermined"},{"Type":"Language","Name":"C++","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Confidentiality","Availability","Access Control"],"Impact":["Modify Memory","Execute Unauthorized Code or Commands","Gain Privileges or Assume Identity","DoS: Crash, Exit, or Restart","Bypass Protection Mechanism"],"Note":"Clearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator."},{"Scope":["Integrity","Availability"],"Impact":["DoS: Crash, Exit, or Restart","Modify Memory"],"Note":"Many memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process."},{"Scope":["Access Control","Other"],"Impact":["Bypass Protection Mechanism","Other"],"Note":"When the consequence is arbitrary code execution, this can often be used to subvert any other security service."}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Strategy":"Language Selection","Description":"Use a language that provides appropriate memory abstractions."},{"Phase":["Operation"],"Description":"Use OS-level preventative functionality integrated after the fact. Not a complete solution."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"The classic example of a write-what-where condition occurs when the accounting information for memory allocations is overwritten in a particular fashion. Here is an example of potentially vulnerable code:"},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\t#define BUFSIZE 256\n\tint main(int argc, char **argv) {\n\t\tchar *buf1 = (char *) malloc(BUFSIZE);\n\t\tchar *buf2 = (char *) malloc(BUFSIZE);\n\t\tstrcpy(buf1, argv[1]);\n\t\tfree(buf2);\n\t}\n```"},{"BodyText":"Vulnerability in this case is dependent on memory layout. The call to strcpy() can be used to write past the end of buf1, and, with a typical layout, can overwrite the accounting information that the system keeps for buf2 when it is allocated. Note that if the allocation header for buf2 can be overwritten, buf2 itself can be overwritten as well."},{"BodyText":"The allocation header will generally keep a linked list of memory \"chunks\". Particularly, there may be a \"previous\" chunk and a \"next\" chunk. Here, the previous chunk for buf2 will probably be buf1, and the next chunk may be null. When the free() occurs, most memory allocators will rewrite the linked list using data from buf2. Particularly, the \"next\" chunk for buf1 will be updated and the \"previous\" chunk for any subsequent chunk will be updated. The attacker can insert a memory address for the \"next\" chunk and a value to write into that memory address for the \"previous\" chunk."},{"BodyText":"This could be used to overwrite a function pointer that gets dereferenced later, replacing it with a memory address that the attacker has legitimate access to, where they have placed malicious code, resulting in arbitrary code execution."}]}],"ObservedExamples":[{"Reference":"CVE-2022-21668","Description":"Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).","Link":"https://www.cve.org/CVERecord?id=CVE-2022-21668"},{"Reference":"CVE-2022-0545","Description":"Chain: 3D renderer has an integer overflow (CWE-190) leading to write-what-where condition (CWE-123) using a crafted image.","Link":"https://www.cve.org/CVERecord?id=CVE-2022-0545"}],"TaxonomyMappings":[{"TaxonomyName":"CLASP","EntryName":"Write-what-where condition"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"ARR30-C","EntryName":"Do not form or use out-of-bounds pointers or array subscripts","MappingFit":"Imprecise"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"ARR38-C","EntryName":"Guarantee that library functions do not form invalid pointers","MappingFit":"Imprecise"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"STR31-C","EntryName":"Guarantee that storage for strings has sufficient space for character data and the null terminator","MappingFit":"Imprecise"},{"TaxonomyName":"CERT C Secure Coding","EntryID":"STR32-C","EntryName":"Do not pass a non-null-terminated character sequence to a library function that expects a string","MappingFit":"Imprecise"},{"TaxonomyName":"Software Fault Patterns","EntryID":"SFP8","EntryName":"Faulty Buffer Access"}],"References":[{"ExternalReferenceID":"REF-44","Section":"\"Sin 5: Buffer Overruns.\" Page 89","Authors":["Michael Howard","David LeBlanc","John Viega"],"Title":"24 Deadly Sins of Software Security","Publication":"McGraw-Hill","PublicationYear":"2010"},{"ExternalReferenceID":"REF-18","Authors":["Secure Software, Inc."],"Title":"The CLASP Application Security Process","PublicationYear":"2005","URL":"https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CLASP","SubmissionDate":"2006-07-19","SubmissionVersion":"Draft 3","SubmissionReleaseDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Common_Consequences, Other_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-01-12","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-12-13","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Common_Consequences, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2013-02-21","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Causal_Nature, Common_Consequences, Demonstrative_Examples, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-09-19","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-10-26","ModificationComment":"updated Observed_Examples"}]}