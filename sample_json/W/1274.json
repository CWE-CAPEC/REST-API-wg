{"ID":"1274","Name":"Improper Access Control for Volatile Memory Containing Boot Code","Abstraction":"Base","Structure":"Simple","Status":"Stable","Description":"The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.","ExtendedDescription":"\n\nAdversaries could bypass the secure-boot process and execute their own untrusted, malicious boot code.\n\n\nAs a part of a secure-boot process, the read-only-memory (ROM) code for a System-on-Chip (SoC) or other system fetches bootloader code from Non-Volatile Memory (NVM) and stores the code in Volatile Memory (VM), such as dynamic, random-access memory (DRAM) or static, random-access memory (SRAM). The NVM is usually external to the SoC, while the VM is internal to the SoC. As the code is transferred from NVM to VM, it is authenticated by the SoC's ROM code.\n\n\nIf the volatile-memory-region protections or access controls are insufficient to prevent modifications from an adversary or untrusted agent, the secure boot may be bypassed or replaced with the execution of an adversary's code.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"284","ViewID":"1000","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"Not Technology-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design","Note":"This weakness can be introduced during hardware architecture or design but can be identified later during testing."}],"CommonConsequences":[{"Scope":["Access Control","Integrity"],"Impact":["Modify Memory","Execute Unauthorized Code or Commands","Gain Privileges or Assume Identity"],"Likelihood":["High"]}],"DetectionMethods":[{"Method":"Manual Analysis","Description":"Ensure the volatile memory is lockable or has locks. Ensure the volatile memory is locked for writes from untrusted agents or adversaries. Try modifying the volatile memory from an untrusted agent, and ensure these writes are dropped.","Effectiveness":"High"},{"Method":"Manual Analysis","Description":"\n\nAnalyze the device using the following steps:\n\n\n  - 1) Identify all fabric master agents that are active during system Boot Flow when initial code is loaded from Non-volatile storage to volatile memory.\n\n  - 2) Identify the volatile memory regions that are used for storing loaded system executable program.\n\n  - 3) During system boot, test programming the identified memory regions in step 2 from all the masters identified in step 1.\n\nOnly trusted masters should be allowed to write to the memory regions. For example, pluggable device peripherals should not have write access to program load memory regions.","Effectiveness":"Moderate"}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code."},{"Phase":["Testing"],"Description":"Test the volatile-memory protections to ensure they are safe from modification or untrusted code."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"A typical SoC secure boot's flow includes fetching the next piece of code (i.e., the boot loader) from NVM (e.g., serial, peripheral interface (SPI) flash), and transferring it to DRAM/SRAM volatile, internal memory, which is more efficient."},{"Nature":"Bad","ExampleCode":"The volatile-memory protections or access controls are insufficient."},{"BodyText":"The memory from where the boot loader executes can be modified by an adversary."},{"Nature":"Good","ExampleCode":"A good architecture should define appropriate protections or access controls to prevent modification by an adversary or untrusted agent, once the bootloader is authenticated."}]}],"ObservedExamples":[{"Reference":"CVE-2019-2267","Description":"Locked memory regions may be modified through other interfaces in a secure-boot-loader image due to improper access control.","Link":"https://www.cve.org/CVERecord?id=CVE-2019-2267"}],"RelatedAttackPatterns":["456","679"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi","SubmissionOrganization":"Intel Corporation","SubmissionDate":"2020-04-25"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Demonstrative_Examples, Description, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Maintenance_Notes, Name, Observed_Examples, Potential_Mitigations, Relationships, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Contribution","ContributionName":"Narasimha Kumar V Mangipudi","ContributionOrganization":"Lattice Semiconductor","ContributionDate":"2021-10-20","ContributionComment":"suggested content improvements","ContributionType":"Feedback"},{"Type":"Contribution","ContributionName":"Hareesh Khattri","ContributionOrganization":"Intel Corporation","ContributionDate":"2021-10-22","ContributionComment":"provided detection method","ContributionType":"Content"},{"Type":"Rename","PreviousEntryName":"Insufficient Protections on the Volatile Memory Containing Boot Code","Date":"2021-10-28"}]}