{"ID":"362","Name":"Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')","Abstraction":"Class","Structure":"Simple","Status":"Draft","Description":"The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.","ExtendedDescription":"\n\nThis can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider.\n\n\nA race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc.\n\n\nA race condition violates these properties, which are closely related:\n\n\n  - Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution.\n\n  - Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource.\n\nA race condition exists when an \"interfering code sequence\" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single \"x++\" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x).\n\nThe interfering code sequence could be \"trusted\" or \"untrusted.\" A trusted interfering code sequence occurs within the product; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable product.\n","LikelihoodOfExploit":"Medium","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"691","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"C","Prevalence":"Sometimes"},{"Type":"Language","Name":"C++","Prevalence":"Sometimes"},{"Type":"Language","Name":"Java","Prevalence":"Sometimes"},{"Type":"Technology","Class":"Mobile","Prevalence":"Undetermined"},{"Type":"Technology","Class":"ICS/OT","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Availability"],"Impact":["DoS: Resource Consumption (CPU)","DoS: Resource Consumption (Memory)","DoS: Resource Consumption (Other)"],"Note":"When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400)."},{"Scope":["Availability"],"Impact":["DoS: Crash, Exit, or Restart","DoS: Instability"],"Note":"When a race condition allows multiple control flows to access a resource simultaneously, it might lead the product(s) into unexpected states, possibly resulting in a crash."},{"Scope":["Confidentiality","Integrity"],"Impact":["Read Files or Directories","Read Application Data"],"Note":"When a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59)."}],"DetectionMethods":[{"Method":"Black Box","Description":"Black box methods may be able to identify evidence of race conditions via methods such as multiple simultaneous connections, which may cause the software to become instable or crash. However, race conditions with very narrow timing windows would not be detectable."},{"Method":"White Box","Description":"Common idioms are detectable in white box analysis, such as time-of-check-time-of-use (TOCTOU) file operations (CWE-367), or double-checked locking (CWE-609)."},{"DetectionMethodID":"DM-2","Method":"Automated Dynamic Analysis","Description":"\n\nThis weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\n\nRace conditions may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.\n\n\nInsert breakpoints or delays in between relevant code statements to artificially expand the race window so that it will be easier to detect.\n","Effectiveness":"Moderate"},{"Method":"Automated Static Analysis - Binary or Bytecode","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis","Effectiveness":"High"},{"Method":"Dynamic Analysis with Automated Results Interpretation","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners","Effectiveness":"SOAR Partial"},{"Method":"Dynamic Analysis with Manual Results Interpretation","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFramework-based Fuzzer\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tMonitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious","Effectiveness":"High"},{"Method":"Manual Static Analysis - Source Code","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source","Effectiveness":"High"},{"Method":"Automated Static Analysis - Source Code","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer","Effectiveness":"High"},{"Method":"Architecture or Design Review","Description":"\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance."},{"Phase":["Architecture and Design"],"Description":"Use thread-safe capabilities such as the data access abstraction in Spring."},{"Phase":["Architecture and Design"],"Description":"\n\nMinimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.\n\n\nAdditionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).\n"},{"Phase":["Implementation"],"Description":"When using multithreading and operating on shared variables, only use thread-safe functions."},{"Phase":["Implementation"],"Description":"Use atomic operations on shared variables. Be wary of innocent-looking constructs such as \"x++\". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write."},{"Phase":["Implementation"],"Description":"Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412."},{"Phase":["Implementation"],"Description":"Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization."},{"Phase":["Implementation"],"Description":"Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop."},{"Phase":["Implementation"],"Description":"Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help."},{"MitigationID":"MIT-17","Phase":["Architecture and Design","Operation"],"Strategy":"Environment Hardening","Description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"This code could be used in an e-commerce application that supports transfers between accounts. It takes the total amount of the transfer, sends it to the new account, and deducts the amount from the original account."},{"Nature":"Bad","Language":"Perl","ExampleCode":"```\n\t$transfer_amount = GetTransferAmount();\n\t$balance = GetBalanceFromDatabase();\n\tif ($transfer_amount \u003c 0) {\n\t\tFatalError(\"Bad Transfer Amount\");\n\t}\n\t$newbalance = $balance - $transfer_amount;\n\tif (($balance - $transfer_amount) \u003c 0) {\n\t\tFatalError(\"Insufficient Funds\");\n\t}\n\tSendNewBalanceToDatabase($newbalance);\n\tNotifyUser(\"Transfer of $transfer_amount succeeded.\");\n\tNotifyUser(\"New balance: $newbalance\");\n```"},{"BodyText":"A race condition could occur between the calls to GetBalanceFromDatabase() and SendNewBalanceToDatabase()."},{"BodyText":"Suppose the balance is initially 100.00. An attack could be constructed as follows:"},{"Nature":"Attack","Language":"Other","ExampleCode":"```\n\tIn the following pseudocode, the attacker makes two simultaneous calls of the program, CALLER-1 and CALLER-2. Both callers are for the same user account.\n\tCALLER-1 (the attacker) is associated with PROGRAM-1 (the instance that handles CALLER-1). CALLER-2 is associated with PROGRAM-2.\n\tCALLER-1 makes a transfer request of 80.00.\n\tPROGRAM-1 calls GetBalanceFromDatabase and sets $balance to 100.00\n\tPROGRAM-1 calculates $newbalance as 20.00, then calls SendNewBalanceToDatabase().\n\tDue to high server load, the PROGRAM-1 call to SendNewBalanceToDatabase() encounters a delay.\n\tCALLER-2 makes a transfer request of 1.00.\n\tPROGRAM-2 calls GetBalanceFromDatabase() and sets $balance to 100.00. This happens because the previous PROGRAM-1 request was not processed yet.\n\tPROGRAM-2 determines the new balance as 99.00.\n\tAfter the initial delay, PROGRAM-1 commits its balance to the database, setting it to 20.00.\n\tPROGRAM-2 sends a request to update the database, setting the balance to 99.00\n```"},{"BodyText":"At this stage, the attacker should have a balance of 19.00 (due to 81.00 worth of transfers), but the balance is 99.00, as recorded in the database."},{"BodyText":"To prevent this weakness, the programmer has several options, including using a lock to prevent multiple simultaneous requests to the web application, or using a synchronization mechanism that includes all the code between GetBalanceFromDatabase() and SendNewBalanceToDatabase()."}]},{"ID":"DX-24","Entries":[{"IntroText":"The following function attempts to acquire a lock in order to perform operations on a shared resource."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n\tvoid f(pthread_mutex_t *mutex) {\n\t\t\tpthread_mutex_lock(mutex);\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\tpthread_mutex_unlock(mutex);}"},{"BodyText":"However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior."},{"BodyText":"In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels."},{"Nature":"Good","Language":"C","ExampleCode":"```\n\tint f(pthread_mutex_t *mutex) {\n\t\t\tint result;\n\t\t\tresult = pthread_mutex_lock(mutex);\n\t\t\tif (0 != result)\n\t\t\t\treturn result;\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\treturn pthread_mutex_unlock(mutex);}"}]},{"ID":"DX-132","Entries":[{"IntroText":"Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of \"accessible\" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs."},{"BodyText":"Suppose the interconnect fabric does not prioritize such \"update\" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario."}]}],"ObservedExamples":[{"Reference":"CVE-2022-29527","Description":"Go application for cloud management creates a world-writable sudoers file that allows local attackers to inject sudo rules and escalate privileges to root by winning a race condition.","Link":"https://www.cve.org/CVERecord?id=CVE-2022-29527"},{"Reference":"CVE-2021-1782","Description":"Chain: improper locking (CWE-667) leads to race condition (CWE-362), as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2021-1782"},{"Reference":"CVE-2021-0920","Description":"Chain: mobile platform race condition (CWE-362) leading to use-after-free (CWE-416), as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2021-0920"},{"Reference":"CVE-2020-6819","Description":"Chain: race condition (CWE-362) leads to use-after-free (CWE-416), as exploited in the wild per CISA KEV.","Link":"https://www.cve.org/CVERecord?id=CVE-2020-6819"},{"Reference":"CVE-2019-18827","Description":"chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys","Link":"https://www.cve.org/CVERecord?id=CVE-2019-18827"},{"Reference":"CVE-2019-1161","Description":"Chain: race condition (CWE-362) in anti-malware product allows deletion of files by creating a junction (CWE-1386) and using hard links during the time window in which a temporary file is created and deleted.","Link":"https://www.cve.org/CVERecord?id=CVE-2019-1161"},{"Reference":"CVE-2015-1743","Description":"TOCTOU in sandbox process allows installation of untrusted browser add-ons by replacing a file after it has been verified, but before it is executed","Link":"https://www.cve.org/CVERecord?id=CVE-2015-1743"},{"Reference":"CVE-2014-8273","Description":"Chain: chipset has a race condition (CWE-362) between when an interrupt handler detects an attempt to write-enable the BIOS (in violation of the lock bit), and when the handler resets the write-enable bit back to 0, allowing attackers to issue BIOS writes during the timing window [REF-1237].","Link":"https://www.cve.org/CVERecord?id=CVE-2014-8273"},{"Reference":"CVE-2008-5044","Description":"Race condition leading to a crash by calling a hook removal procedure while other activities are occurring at the same time.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-5044"},{"Reference":"CVE-2008-2958","Description":"chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-2958"},{"Reference":"CVE-2008-1570","Description":"chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-1570"},{"Reference":"CVE-2008-0058","Description":"Unsynchronized caching operation enables a race condition that causes messages to be sent to a deallocated object.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-0058"},{"Reference":"CVE-2008-0379","Description":"Race condition during initialization triggers a buffer overflow.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-0379"},{"Reference":"CVE-2007-6599","Description":"Daemon crash by quickly performing operations and undoing them, which eventually leads to an operation that does not acquire a lock.","Link":"https://www.cve.org/CVERecord?id=CVE-2007-6599"},{"Reference":"CVE-2007-6180","Description":"chain: race condition triggers NULL pointer dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2007-6180"},{"Reference":"CVE-2007-5794","Description":"Race condition in library function could cause data to be sent to the wrong process.","Link":"https://www.cve.org/CVERecord?id=CVE-2007-5794"},{"Reference":"CVE-2007-3970","Description":"Race condition in file parser leads to heap corruption.","Link":"https://www.cve.org/CVERecord?id=CVE-2007-3970"},{"Reference":"CVE-2008-5021","Description":"chain: race condition allows attacker to access an object while it is still being initialized, causing software to access uninitialized memory.","Link":"https://www.cve.org/CVERecord?id=CVE-2008-5021"},{"Reference":"CVE-2009-4895","Description":"chain: race condition for an argument value, possibly resulting in NULL dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2009-4895"},{"Reference":"CVE-2009-3547","Description":"chain: race condition might allow resource to be released before operating on it, leading to NULL dereference","Link":"https://www.cve.org/CVERecord?id=CVE-2009-3547"},{"Reference":"CVE-2006-5051","Description":"Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition (CWE-362) that leads to a double free (CWE-415).","Link":"https://www.cve.org/CVERecord?id=CVE-2006-5051"}],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"Race Conditions"},{"TaxonomyName":"The CERT Oracle Secure Coding Standard for Java (2011)","EntryID":"VNA03-J","EntryName":"Do not assume that a group of calls to independently atomic methods is atomic"}],"RelatedAttackPatterns":["26","29"],"MappingNotes":{"Usage":"Allowed-with-Review","Rationale":"This CWE entry is a Class and might have Base-level children that would be more appropriate","Comments":"Examine children of this entry to see if there is a better fit","Reasons":["Abstraction"]},"References":[{"ExternalReferenceID":"REF-44","Section":"\"Sin 13: Race Conditions.\" Page 205","Authors":["Michael Howard","David LeBlanc","John Viega"],"Title":"24 Deadly Sins of Software Security","Publication":"McGraw-Hill","PublicationYear":"2010"},{"ExternalReferenceID":"REF-349","Authors":["Andrei Alexandrescu"],"Title":"volatile - Multithreaded Programmer's Best Friend","Publication":"Dr. Dobb's","PublicationYear":"2008","PublicationMonth":"02","PublicationDay":"01","URL":"https://drdobbs.com/cpp/volatile-the-multithreaded-programmers-b/184403766","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-350","Authors":["Steven Devijver"],"Title":"Thread-safe webapps using Spring","URL":"https://web.archive.org/web/20170609174845/http://www.javalobby.org/articles/thread-safe/index.jsp","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-351","Authors":["David Wheeler"],"Title":"Prevent race conditions","PublicationYear":"2007","PublicationMonth":"10","PublicationDay":"04","URL":"https://www.ida.liu.se/~TDDC90/literature/papers/SP-race-conditions.pdf","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-352","Authors":["Matt Bishop"],"Title":"Race Conditions, Files, and Security Flaws; or the Tortoise and the Hare Redux","PublicationYear":"1995","PublicationMonth":"09","URL":"https://seclab.cs.ucdavis.edu/projects/vulnerabilities/scriv/ucd-ecs-95-08.pdf","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-353","Authors":["David Wheeler"],"Title":"Secure Programming for Linux and Unix HOWTO","PublicationYear":"2003","PublicationMonth":"03","PublicationDay":"03","URL":"https://dwheeler.com/secure-programs/Secure-Programs-HOWTO/avoid-race.html","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-354","Authors":["Blake Watts"],"Title":"Discovering and Exploiting Named Pipe Security Flaws for Fun and Profit","PublicationYear":"2002","PublicationMonth":"04","URL":"https://www.blakewatts.com/blog/discovering-and-exploiting-named-pipe-security-flaws-for-fun-and-profit","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-355","Authors":["Roberto Paleari","Davide Marrone","Danilo Bruschi","Mattia Monga"],"Title":"On Race Vulnerabilities in Web Applications","URL":"http://security.dico.unimi.it/~roberto/pubs/dimva08-web.pdf"},{"ExternalReferenceID":"REF-356","Title":"Avoiding Race Conditions and Insecure File Operations","Publication":"Apple Developer Connection","URL":"https://web.archive.org/web/20081010155022/http://developer.apple.com/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-357","Authors":["Johannes Ullrich"],"Title":"Top 25 Series - Rank 25 - Race Conditions","PublicationYear":"2010","PublicationMonth":"03","PublicationDay":"26","Publisher":"SANS Software Security Institute","URL":"https://web.archive.org/web/20100530231203/http://blogs.sans.org:80/appsecstreetfighter/2010/03/26/top-25-series-rank-25-race-conditions/","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-76","Authors":["Sean Barnum","Michael Gegick"],"Title":"Least Privilege","PublicationYear":"2005","PublicationMonth":"09","PublicationDay":"14","URL":"https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-1237","Authors":["CERT Coordination Center"],"Title":"Intel BIOS locking mechanism contains race condition that enables write protection bypass","PublicationYear":"2015","PublicationMonth":"01","PublicationDay":"05","URL":"https://www.kb.cert.org/vuls/id/766164/"}],"Notes":[{"Type":"Maintenance","Note":"The relationship between race conditions and synchronization problems (CWE-662) needs to be further developed. They are not necessarily two perspectives of the same core concept, since synchronization is only one technique for avoiding race conditions, and synchronization can be used for other purposes besides race condition prevention."},{"Type":"Research Gap","Note":"Race conditions in web applications are under-studied and probably under-reported. However, in 2008 there has been growing interest in this area."},{"Type":"Research Gap","Note":"Much of the focus of race condition research has been in Time-of-check Time-of-use (TOCTOU) variants (CWE-367), but many race conditions are related to synchronization problems that do not necessarily require a time-of-check."},{"Type":"Research Gap","Note":"From a classification/taxonomy perspective, the relationships between concurrency and program state need closer investigation and may be useful in organizing related issues."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-10-14","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-11-24","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-01-12","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships, Research_Gaps"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-03-10","ModificationComment":"updated Demonstrative_Examples, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Detection_Factors, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Observed_Examples, Potential_Mitigations, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-12-13","ModificationComment":"updated Applicable_Platforms, Demonstrative_Examples, Description, Name, Potential_Mitigations, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences, Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-09-13","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Potential_Mitigations, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Detection_Factors, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Demonstrative_Examples, References, Research_Gaps, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Observed_Examples, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Observed_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Observed_Examples, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes, Relationships"},{"Type":"Contribution","ContributionName":"Martin Sebor","ContributionOrganization":"Cisco Systems, Inc.","ContributionDate":"2010-04-30","ContributionComment":"Provided Demonstrative Example","ContributionType":"Content"},{"Type":"Rename","PreviousEntryName":"Race Conditions","Date":"2008-04-11"},{"Type":"Rename","PreviousEntryName":"Race Condition","Date":"2010-12-13"}]}