{"ID":"917","Name":"Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.","ExtendedDescription":"Frameworks such as Java Server Page (JSP) allow a developer to insert executable expressions within otherwise-static content. When the developer is not aware of the executable nature of these expressions and/or does not disable them, then if an attacker can inject expressions, this could lead to code execution or other unexpected behaviors.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"77","ViewID":"1000","Ordinal":"Primary"},{"Nature":"PeerOf","CweID":"1336","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"74","ViewID":"1003","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"77","ViewID":"1305","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"77","ViewID":"1340","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"Java","Prevalence":"Undetermined"}],"AlternateTerms":[{"Term":"EL Injection"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Confidentiality"],"Impact":["Read Application Data"]},{"Scope":["Integrity"],"Impact":["Execute Unauthorized Code or Commands"]}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Architecture and Design"],"Description":"Avoid adding user-controlled data into an expression interpreter when possible."},{"Phase":["Implementation"],"Description":"\n\nIf user-controlled data must be added to an expression interpreter, one or more of the following should be performed:\n\n\n  - Validate that the user input will not evaluate as an expression\n\n  - Encode the user input in a way that ensures it is not evaluated as an expression\n\n"},{"Phase":["System Configuration","Operation"],"Description":"The framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to \"true\"."}],"ObservedExamples":[{"Reference":"CVE-2021-44228","Description":"Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability in log4j)","Link":"https://www.cve.org/CVERecord?id=CVE-2021-44228"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"References":[{"ExternalReferenceID":"REF-911","Authors":["Stefano Di Paola","Arshan Dabirsiaghi"],"Title":"Expression Language Injection","PublicationYear":"2011","PublicationMonth":"09","PublicationDay":"12","URL":"https://mindedsecurity.com/wp-content/uploads/2020/10/ExpressionLanguageInjection.pdf","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-912","Authors":["Dan Amodio"],"Title":"Remote Code with Expression Language Injection","PublicationYear":"2012","PublicationMonth":"12","PublicationDay":"14","URL":"http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-1279","Authors":["CWE/CAPEC"],"Title":"Neutralizing Your Inputs: A Log4Shell Weakness Story","URL":"https://medium.com/@CWE_CAPEC/neutralizing-your-inputs-a-log4shell-weakness-story-89954c8b25c9"},{"ExternalReferenceID":"REF-1280","Authors":["OWASP"],"Title":"Expression Language Injection","URL":"https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection"}],"Notes":[{"Type":"Maintenance","Note":"The interrelationships and differences between CWE-917 and CWE-1336 need to be further clarified."},{"Type":"Relationship","Note":"In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2013-02-15"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2018-03-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-12-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Description, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Contribution","ContributionName":"Dan Amodio, Dave Wichers","ContributionOrganization":"Aspect Security","ContributionDate":"2013-02-15","ContributionComment":"Suggested adding this weakness and provided references.","ContributionType":"Feedback"}]}