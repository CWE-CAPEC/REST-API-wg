{"ID":"927","Name":"Use of Implicit Intent for Sensitive Communication","Abstraction":"Variant","Structure":"Simple","Status":"Incomplete","Description":"The Android application uses an implicit intent for transmitting sensitive data to other applications.","ExtendedDescription":"\n\nSince an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent Filter for that intent. This can allow untrusted applications to obtain sensitive data. There are two variations on the standard broadcast intent, ordered and sticky.\n\n\nOrdered broadcast intents are delivered to a series of registered receivers in order of priority as declared by the Receivers. A malicious receiver can give itself a high priority and cause a denial of service by stopping the broadcast from propagating further down the chain. There is also the possibility of malicious data modification, as a receiver may also alter the data within the Intent before passing it on to the next receiver. The downstream components have no way of asserting that the data has not been altered earlier in the chain.\n\n\nSticky broadcast intents remain accessible after the initial broadcast. An old sticky intent will be broadcast again to any new receivers that register for it in the future, greatly increasing the chances of information exposure over time. Also, sticky broadcasts cannot be protected by permissions that may apply to other kinds of intents.\n\n\nIn addition, any broadcast intent may include a URI that references data that the receiving component does not normally have the privileges to access. The sender of the intent can include special privileges that grant the receiver read or write access to the specific URI included in the intent. A malicious receiver that intercepts this intent will also gain those privileges and be able to read or write the resource at the specified URI.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"285","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"668","ViewID":"1000"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"Mobile","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"}],"CommonConsequences":[{"Scope":["Confidentiality"],"Impact":["Read Application Data"],"Note":"Other applications, possibly untrusted, can read the data that is offered through the Intent."},{"Scope":["Integrity"],"Impact":["Varies by Context"],"Note":"The application may handle responses from untrusted applications on the device, which could cause it to perform unexpected or unauthorized actions."}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"This application wants to create a user account in several trusted applications using one broadcast intent:"},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tIntent intent = new Intent();\n\tintent.setAction(\"com.example.CreateUser\");\n\tintent.putExtra(\"Username\", uname_string);\n\tintent.putExtra(\"Password\", pw_string);\n\tsendBroadcast(intent);\n```"},{"BodyText":"This application assumes only the trusted applications will be listening for the action. A malicious application can register for this action and intercept the user's login information, as below:"},{"Nature":"Attack","Language":"Java","ExampleCode":"```\n\tIntentFilter filter = new IntentFilter(\"com.example.CreateUser\");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n```"},{"BodyText":"When a broadcast contains sensitive information, create an allowlist of applications that can receive the action using the application's manifest file, or programmatically send the intent to each individual intended receiver."}]},{"Entries":[{"IntroText":"This application interfaces with a web service that requires a separate user login. It creates a sticky intent, so that future trusted applications that also use the web service will know who the current user is:"},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tIntent intent = new Intent();\n\tintent.setAction(\"com.example.service.UserExists\");\n\tintent.putExtra(\"Username\", uname_string);\n\tsendStickyBroadcast(intent);\n```"},{"Nature":"Attack","Language":"Java","ExampleCode":"```\n\tIntentFilter filter = new IntentFilter(\"com.example.service.UserExists\");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n```"},{"BodyText":"Sticky broadcasts can be read by any application at any time, and so should never contain sensitive information such as a username."}]},{"Entries":[{"IntroText":"This application is sending an ordered broadcast, asking other applications to open a URL:"},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tIntent intent = new Intent();\n\tintent.setAction(\"com.example.OpenURL\");\n\tintent.putExtra(\"URL_TO_OPEN\", url_string);\n\tsendOrderedBroadcastAsUser(intent);\n```"},{"BodyText":"Any application in the broadcast chain may alter the data within the intent. This malicious application is altering the URL to point to an attack site:"},{"Nature":"Attack","Language":"Java","ExampleCode":"```\n\tpublic class CallReceiver extends BroadcastReceiver {\n\t\t@Override\n\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\tString Url = intent.getStringExtra(Intent.URL_TO_OPEN);\n\t\t\tattackURL = \"www.example.com/attack?\" + Url;\n\t\t\tsetResultData(attackURL);\n\t\t}\n\t}\n```"},{"BodyText":"The final receiving application will then open the attack URL. Where possible, send intents to specific trusted applications instead of using a broadcast chain."}]},{"ID":"DX-108","Entries":[{"IntroText":"This application sends a special intent with a flag that allows the receiving application to read a data file for backup purposes."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tIntent intent = new Intent();\n\tintent.setAction(\"com.example.BackupUserData\");\n\tintent.setData(file_uri);\n\tintent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);\n\tsendBroadcast(intent);\n```"},{"Nature":"Attack","Language":"Java","ExampleCode":"```\n\tpublic class CallReceiver extends BroadcastReceiver {\n\t\t@Override\n\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\tUri userData = intent.getData();\n\t\t\tstealUserData(userData);\n\t\t}\n\t}\n```"},{"BodyText":"Any malicious application can register to receive this intent. Because of the FLAG_GRANT_READ_URI_PERMISSION included with the intent, the malicious receiver code can read the user's data."}]}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"References":[{"ExternalReferenceID":"REF-922","Section":"3.2.1","Authors":["Erika Chin","Adrienne Porter Felt","Kate Greenwood","David Wagner"],"Title":"Analyzing Inter-Application Communication in Android","URL":"http://www.eecs.berkeley.edu/~daw/papers/intents-mobisys11.pdf"},{"ExternalReferenceID":"REF-923","Authors":["Android Open Source Project"],"Title":"Security Tips","PublicationYear":"2013","PublicationMonth":"07","PublicationDay":"16","URL":"https://developer.android.com/training/articles/security-tips#ContentProviders","URLDate":"2023-04-07"}],"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2013-07-09"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-02-18","ModificationComment":"updated Demonstrative_Examples, Description, References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Applicable_Platforms, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Maintenance_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}