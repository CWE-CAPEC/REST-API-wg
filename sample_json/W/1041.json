{"ID":"1041","Name":"Use of Redundant Code","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The product has multiple functions, methods, procedures, macros, etc. that\n\t\t\t\t\tcontain the same code.","ExtendedDescription":"\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. For example, if there are two copies of the same code, the programmer might fix a weakness in one copy while forgetting to fix the same weakness in another copy.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"710","ViewID":"1000","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Indirect"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"CommonConsequences":[{"Scope":["Other"],"Impact":["Reduce Maintainability"]}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Merge common functionality into a single function and then call that function from across the entire code base."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"In the following Java example the code performs some complex math when specific test conditions are met. The math is the same in each case and the equations are repeated within the code. Unfortunately if a future change needs to be made then that change needs to be made in all locations. This opens the door to mistakes being made and the changes not being made in the same way in each instance."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic class Main {\n\t\tpublic static void main(String[] args) { \n\t\t\tdouble s = 10.0; \n\t\t\tdouble r = 1.0; \n\t\t\tdouble pi = 3.14159; \n\t\t\tdouble surface_area;\n\t\t\tif(r \u003e 0.0) { \n\t\t\t\t// complex math equations \n\t\t\t\tsurface_area = pi * r * s + pi * Math.pow(r, 2);\n\t\t\t}\n\t\t\tif(r \u003e 1.0) { \n\t\t\t\t// a complex set of math \n\t\t\t\tsurface_area = pi * r * s + pi * Math.pow(r, 2);\n\t\t\t}\n\t\t}\n\t}\n```"},{"BodyText":"It is recommended to place the complex math into its own function and then call that function whenever necessary."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tpublic class Main {\n\t\tprivate double ComplexMath(double r, double s) { \n\t\t\t//complex math equations \n\t\t\tdouble pi = Math.PI; \n\t\t\tdouble surface_area = pi * r * s + pi * Math.pow(r, 2); \n\t\t\treturn surface_area;\n\t\t}\n\t\tpublic static void main(String[] args) { \n\t\t\tdouble s = 10.0; \n\t\t\tdouble r = 1.0; \n\t\t\tdouble surface_area;\n\t\t\tif(r \u003e 0.0) { \n\t\t\t\tsurface_area = ComplexMath(r, s);\n\t\t\t}\n\t\t\tif(r \u003e 1.0) { \n\t\t\t\tsurface_area = ComplexMath(r, s);\n\t\t\t}\n\t\t}\n\t}\n```"}]}],"TaxonomyMappings":[{"TaxonomyName":"OMG ASCMM","EntryID":"ASCMM-MNT-19"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"References":[{"ExternalReferenceID":"REF-960","Section":"ASCMM-MNT-19","Authors":["Object Management Group (OMG)"],"Title":"Automated Source Code Maintainability Measure (ASCMM)","PublicationYear":"2016","PublicationMonth":"01","URL":"https://www.omg.org/spec/ASCMM/","URLDate":"2023-04-07"}],"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2018-07-02"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Applicable_Platforms, Demonstrative_Examples, Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Contribution","ContributionName":"Drew Buttner","ContributionDate":"2022-08-15","ContributionComment":"Suggested new demonstrative examples, mitigations, and applicable platforms.","ContributionType":"Content"}]}