{"ID":"1310","Name":"Missing Ability to Patch ROM Code","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.","ExtendedDescription":"\n\nA System or System-on-Chip (SoC) that implements a boot process utilizing security mechanisms such as Root-of-Trust (RoT) typically starts by executing code from a Read-only-Memory (ROM) component. The code in ROM is immutable, hence any security vulnerabilities discovered in the ROM code can never be fixed for the systems that are already in use.\n\n\nA common weakness is that the ROM does not have the ability to patch if security vulnerabilities are uncovered after the system gets shipped. This leaves the system in a vulnerable state where an adversary can compromise the SoC.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"1329","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"System on Chip","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design","Note":"This issue could be introduced during hardware architecture and design and can be identified later during Testing."},{"Phase":"Implementation","Note":"This issue could be introduced during implementation and can be identified later during Testing."},{"Phase":"Integration","Note":"This issue could be introduced during integration and can be identified later during Testing."},{"Phase":"Manufacturing","Note":"This issue could be introduced during manufacturing and can be identified later during Testing."}],"CommonConsequences":[{"Scope":["Other"],"Impact":["Varies by Context","Reduce Maintainability"],"Likelihood":["High"],"Note":"When the system is unable to be patched, it can be left in a vulnerable state."}],"PotentialMitigations":[{"Phase":["Architecture and Design","Implementation"],"Description":"Secure patch support to allow ROM code to be patched on the next boot.","Effectiveness":"Moderate","EffectivenessNotes":"Some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\""},{"Phase":["Architecture and Design","Implementation"],"Description":"Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.","Effectiveness":"Moderate","EffectivenessNotes":"Patches that use hardware fuses will have limitations in terms of size and the number of patches that can be supported. Note that some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\""}],"DemonstrativeExamples":[{"ID":"DX-146","Entries":[{"IntroText":"A System-on-Chip (SOC) implements a Root-of-Trust (RoT) in ROM to boot secure code. However, at times this ROM code might have security vulnerabilities and need to be patched. Since ROM is immutable, it can be impossible to patch."},{"BodyText":"ROM does not have built-in application-programming interfaces (APIs) to patch if the code is vulnerable. Implement mechanisms to patch the vulnerable ROM code."}]}],"RelatedAttackPatterns":["682"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"Narasimha Kumar V Mangipudi","SubmissionOrganization":"Intel Corporation","SubmissionDate":"2020-04-25"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Maintenance_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-07-20","ModificationComment":"updated Demonstrative_Examples, Maintenance_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Potential_Mitigations, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated References, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Contribution","ContributionName":"Jason Fung","ContributionOrganization":"Intel","ContributionDate":"2022-09-07","ContributionComment":"suggested removal of incorrect references","ContributionType":"Feedback"}]}