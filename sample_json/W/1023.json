{"ID":"1023","Name":"Incomplete Comparison with Missing Factors","Abstraction":"Class","Structure":"Simple","Status":"Incomplete","Description":"The product performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors.","ExtendedDescription":"An incomplete comparison can lead to resultant weaknesses, e.g., by operating on the wrong object or making a security decision without considering a required factor.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"697","ViewID":"1000","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Integrity","Access Control"],"Impact":["Alter Execution Logic","Bypass Protection Mechanism"]}],"PotentialMitigations":[{"Phase":["Testing"],"Description":"Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing."}],"DemonstrativeExamples":[{"ID":"DX-115","Entries":[{"IntroText":"Consider an application in which Truck objects are defined to be the same if they have the same make, the same model, and were manufactured in the same year."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tpublic class Truck {\n\t\t\tprivate String make;\n\t\t\tprivate String model;\n\t\t\tprivate int year;\n\t\t\tpublic boolean equals(Object o) {\n\t\t\t\t\tif (o == null) return false;\n\t\t\t\t\tif (o == this) return true;\n\t\t\t\t\tif (!(o instanceof Truck)) return false;\n\t\t\t\t\tTruck t = (Truck) o;\n\t\t\t\t\treturn (this.make.equals(t.getMake()) \u0026\u0026 this.model.equals(t.getModel()));\n\t\t\t}\n\t}\n```"},{"BodyText":"Here, the equals() method only checks the make and model of the Truck objects, but the year of manufacture is not included."}]},{"ID":"DX-116","Entries":[{"IntroText":"This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded."},{"Nature":"Bad","Language":"C","ExampleCode":"```\n```\n/* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */* \n\t\n\tchar *username = \"admin\";\n\tchar *pass = \"password\";\n\t\n\tint AuthenticateUser(char *inUser, char *inPass) {\n\t```\n\t\tif (strncmp(username, inUser, strlen(inUser))) {\n\t\t\tlogEvent(\"Auth failure of username using strlen of inUser\");\n\t\t\treturn(AUTH_FAIL);\n\t\t}\n\t\tif (! strncmp(pass, inPass, strlen(inPass))) {\n\t\t\tlogEvent(\"Auth success of password using strlen of inUser\");\n\t\t\treturn(AUTH_SUCCESS);\n\t\t}\n\t\telse {\n\t\t\tlogEvent(\"Auth fail of password using sizeof\");\n\t\t\treturn(AUTH_FAIL);\n\t\t}\n\t}\n\tint main (int argc, char **argv) {\n\t\t int authResult;\n\t\tif (argc \u003c 3) {\n\t\t\tExitError(\"Usage: Provide a username and password\");\n\t\t}\n\t\tauthResult = AuthenticateUser(argv[1], argv[2]);\n\t\tif (authResult == AUTH_SUCCESS) {\n\t\t\tDoAuthenticatedTask(argv[1]);\n\t\t}\n\t\telse {\n\t\t\tExitError(\"Authentication failed\");\n\t\t}\n\t}\n```"},{"BodyText":"In AuthenticateUser(), the strncmp() call uses the string length of an attacker-provided inPass parameter in order to determine how many characters to check in the password. So, if the attacker only provides a password of length 1, the check will only examine the first byte of the application's password before determining success."},{"BodyText":"As a result, this partial comparison leads to improper authentication (CWE-287)."},{"BodyText":"Any of these passwords would still cause authentication to succeed for the \"admin\" user:"},{"Nature":"Attack","ExampleCode":"```\n\tp\n\tpa\n\tpas\n\tpass\n```"},{"BodyText":"This significantly reduces the search space for an attacker, making brute force attacks more feasible."},{"BodyText":"The same problem also applies to the username, so values such as \"a\" and \"adm\" will succeed for the username."},{"BodyText":"While this demonstrative example may not seem realistic, see the Observed Examples for CVE entries that effectively reflect this same weakness."}]}],"MappingNotes":{"Usage":"Allowed-with-Review","Rationale":"This CWE entry is a Class and might have Base-level children that would be more appropriate","Comments":"Examine children of this entry to see if there is a better fit","Reasons":["Abstraction"]},"ContentHistory":[{"Type":"Submission","SubmissionName":"CWE Content Team","SubmissionOrganization":"MITRE","SubmissionDate":"2018-01-04"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-01-03","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Description, Relationships, Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}