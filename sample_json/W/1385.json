{"ID":"1385","Name":"Missing Origin Validation in WebSockets","Abstraction":"Variant","Structure":"Simple","Status":"Incomplete","Description":"The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.","ExtendedDescription":"\n\nWebSockets provide a bi-directional low latency communication (near real-time) between a client and a server. WebSockets are different than HTTP in that the connections are long-lived, as the channel will remain open until the client or the server is ready to send the message, whereas in HTTP, once the response occurs (which typically happens immediately), the transaction completes. \n\n\nA WebSocket can leverage the existing HTTP protocol over ports 80 and 443, but it is not limited to HTTP. WebSockets can make cross-origin requests that are not restricted by browser-based protection mechanisms such as the Same Origin Policy (SOP) or Cross-Origin Resource Sharing (CORS). Without explicit origin validation, this makes CSRF attacks more powerful.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"346","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Name":"Web Server","Prevalence":"Undetermined"}],"AlternateTerms":[{"Term":"Cross-Site WebSocket hijacking (CSWSH)","Description":"this term is used for attacks that exploit this weakness"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Confidentiality","Integrity","Availability","Non-Repudiation","Access Control"],"Impact":["Varies by Context","Gain Privileges or Assume Identity","Bypass Protection Mechanism","Read Application Data","Modify Application Data","DoS: Crash, Exit, or Restart"],"Note":"The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of the CSRF is limited only by the victim's privileges."}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake."},{"Phase":["Implementation"],"Description":"Use a randomized CSRF token to verify requests."},{"Phase":["Implementation"],"Description":"Use TLS to securely communicate using 'wss' (WebSocket Secure) instead of 'ws'."},{"Phase":["Architecture and Design","Implementation"],"Description":"Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function."},{"Phase":["Implementation"],"Description":"Leverage rate limiting to prevent against DoS. Use of the leaky bucket algorithm can help with this.","Effectiveness":"Defense in Depth"},{"Phase":["Implementation"],"Description":"Use a library that provides restriction of the payload size. For example, WS library for Node includes 'maxPayloadoption' that can be set.","Effectiveness":"Defense in Depth"},{"Phase":["Implementation"],"Description":"Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc."}],"ObservedExamples":[{"Reference":"CVE-2020-25095","Description":"web console for SIEM product does not check Origin header, allowing Cross Site WebSocket Hijacking (CSWH)","Link":"https://www.cve.org/CVERecord?id=CVE-2020-25095"},{"Reference":"CVE-2018-6651","Description":"Chain: gaming client attempts to validate the Origin header, but only uses a substring, allowing Cross-Site WebSocket hijacking by forcing requests from an origin whose hostname is a substring of the valid origin.","Link":"https://www.cve.org/CVERecord?id=CVE-2018-6651"},{"Reference":"CVE-2018-14730","Description":"WebSocket server does not check the origin of requests, allowing attackers to steal developer's code using a ws://127.0.0.1:3123/ connection.","Link":"https://www.cve.org/CVERecord?id=CVE-2018-14730"},{"Reference":"CVE-2018-14731","Description":"WebSocket server does not check the origin of requests, allowing attackers to steal developer's code using a ws://127.0.0.1/ connection to a randomized port number.","Link":"https://www.cve.org/CVERecord?id=CVE-2018-14731"},{"Reference":"CVE-2018-14732","Description":"WebSocket server does not check the origin of requests, allowing attackers to steal developer's code using a ws://127.0.0.1:8080/ connection.","Link":"https://www.cve.org/CVERecord?id=CVE-2018-14732"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"References":[{"ExternalReferenceID":"REF-1257","Authors":["Christian Schneider"],"Title":"Cross-Site WebSocket Hijacking (CSWSH)","PublicationYear":"2013","PublicationMonth":"09","PublicationDay":"01","URL":"https://christian-schneider.net/CrossSiteWebSocketHijacking.html"},{"ExternalReferenceID":"REF-1251","Authors":["Drew Branch"],"Title":"WebSockets not Bound by SOP and CORS? Does this mean...","PublicationYear":"2018","PublicationMonth":"06","PublicationDay":"06","URL":"https://blog.securityevaluators.com/websockets-not-bound-by-cors-does-this-mean-2e7819374acc"},{"ExternalReferenceID":"REF-1252","Authors":["Mehul Mohan"],"Title":"How to secure your WebSocket connections","PublicationYear":"2018","PublicationMonth":"11","PublicationDay":"12","URL":"https://www.freecodecamp.org/news/how-to-secure-your-websocket-connections-d0be0996c556/"},{"ExternalReferenceID":"REF-1256","Authors":["Vickie Li"],"Title":"Cross-Site WebSocket Hijacking (CSWSH)","PublicationYear":"2019","PublicationMonth":"11","PublicationDay":"27","URL":"https://medium.com/swlh/hacking-websocket-25d3cba6a4b9"},{"ExternalReferenceID":"REF-1253","Section":"Using cross-site WebSockets to exploit vulnerabilities","Authors":["PortSwigger"],"Title":"Testing for WebSockets security vulnerabilities","URL":"https://portswigger.net/web-security/websockets","URLDate":"2023-04-07"}],"ContentHistory":[{"Type":"Submission","SubmissionName":"Anonymous External Contributor","SubmissionDate":"2021-05-28"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}