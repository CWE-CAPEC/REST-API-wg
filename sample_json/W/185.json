{"ID":"185","Name":"Incorrect Regular Expression","Abstraction":"Class","Structure":"Simple","Status":"Draft","Description":"The product specifies a regular expression in a way that causes data to be improperly matched or compared.","ExtendedDescription":"When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"697","ViewID":"1000","Ordinal":"Primary"},{"Nature":"CanPrecede","CweID":"187","ViewID":"1000"},{"Nature":"CanPrecede","CweID":"182","ViewID":"1000"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Other"],"Impact":["Unexpected State","Varies by Context"],"Note":"When the regular expression is not correctly specified, data might have a different format or type than the rest of the program expects, producing resultant weaknesses or errors."},{"Scope":["Access Control"],"Impact":["Bypass Protection Mechanism"],"Note":"In PHP, regular expression checks can sometimes be bypassed with a null byte, leading to any number of weaknesses."}],"DetectionMethods":[{"DetectionMethodID":"DM-14","Method":"Automated Static Analysis","Description":"Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)","Effectiveness":"High"}],"PotentialMitigations":[{"MitigationID":"MIT-45","Phase":["Architecture and Design"],"Strategy":"Refactoring","Description":"Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression."}],"DemonstrativeExamples":[{"ID":"DX-37","Entries":[{"IntroText":"The following code takes phone numbers as input, and uses a regular expression to reject invalid phone numbers."},{"Nature":"Bad","Language":"Perl","ExampleCode":"```\n\t$phone = GetPhoneNumber();\n\tif ($phone =~ /\\d+-\\d+/) {\n```\n# looks like it only has hyphens and digits* \n\t\tsystem(\"lookup-phone $phone\");} \n\telse {\n\t```\n\t\terror(\"malformed number!\");\n\t}\n```"},{"BodyText":"An attacker could provide an argument such as: \"; ls -l ; echo 123-456\" This would pass the check, since \"123-456\" is sufficient to match the \"\\d+-\\d+\" portion of the regular expression."}]},{"ID":"DX-154","Entries":[{"IntroText":"This code uses a regular expression to validate an IP string prior to using it in a call to the \"ping\" command."},{"Nature":"Bad","Language":"Python","ExampleCode":"```\n\t import subprocess\n\t import re\n\t def validate_ip_regex(ip: str):\n\t\t ip_validator = re.compile(r\"((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}\")\n\t\t if ip_validator.match(ip):\n\t\t\t return ip\n\t\t else:\n\t\t\t raise ValueError(\"IP address does not match valid pattern.\")\n\t def run_ping_regex(ip: str):\n\t\t validated = validate_ip_regex(ip)\n```\n# The ping command treats zero-prepended IP addresses as octal* \n\t\t result = subprocess.call([\"ping\", validated])\n\t\t print(result)"},{"BodyText":"Since the regular expression does not have anchors (CWE-777), i.e. is unbounded without ^ or $ characters, then prepending a 0 or 0x to the beginning of the IP address will still result in a matched regex pattern. Since the ping command supports octal and hex prepended IP addresses, it will use the unexpectedly valid IP address (CWE-1389). For example, \"0x63.63.63.63\" would be considered equivalent to \"99.63.63.63\". As a result, the attacker could potentially ping systems that the attacker cannot reach directly."}]}],"ObservedExamples":[{"Reference":"CVE-2002-2109","Description":"Regexp isn't \"anchored\" to the beginning or end, which allows spoofed values that have trusted values as substrings.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-2109"},{"Reference":"CVE-2005-1949","Description":"Regexp for IP address isn't anchored at the end, allowing appending of shell metacharacters.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1949"},{"Reference":"CVE-2001-1072","Description":"Bypass access restrictions via multiple leading slash, which causes a regular expression to fail.","Link":"https://www.cve.org/CVERecord?id=CVE-2001-1072"},{"Reference":"CVE-2000-0115","Description":"Local user DoS via invalid regular expressions.","Link":"https://www.cve.org/CVERecord?id=CVE-2000-0115"},{"Reference":"CVE-2002-1527","Description":"chain: Malformed input generates a regular expression error that leads to information exposure.","Link":"https://www.cve.org/CVERecord?id=CVE-2002-1527"},{"Reference":"CVE-2005-1061","Description":"Certain strings are later used in a regexp, leading to a resultant crash.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1061"},{"Reference":"CVE-2005-2169","Description":"MFV. Regular expression intended to protect against directory traversal reduces \".../...//\" to \"../\".","Link":"https://www.cve.org/CVERecord?id=CVE-2005-2169"},{"Reference":"CVE-2005-0603","Description":"Malformed regexp syntax leads to information exposure in error message.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-0603"},{"Reference":"CVE-2005-1820","Description":"Code injection due to improper quoting of regular expression.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-1820"},{"Reference":"CVE-2005-3153","Description":"Null byte bypasses PHP regexp check.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-3153"},{"Reference":"CVE-2005-4155","Description":"Null byte bypasses PHP regexp check.","Link":"https://www.cve.org/CVERecord?id=CVE-2005-4155"}],"TaxonomyMappings":[{"TaxonomyName":"PLOVER","EntryName":"Regular Expression Error"}],"RelatedAttackPatterns":["15","6","79"],"MappingNotes":{"Usage":"Allowed-with-Review","Rationale":"This CWE entry is a Class and might have Base-level children that would be more appropriate","Comments":"Examine children of this entry to see if there is a better fit","Reasons":["Abstraction"]},"References":[{"ExternalReferenceID":"REF-7","Section":"Chapter 10, \"Using Regular Expressions for Checking Input\" Page 350","Authors":["Michael Howard","David LeBlanc"],"Title":"Writing Secure Code","Edition":"2nd Edition","PublicationYear":"2002","PublicationMonth":"12","PublicationDay":"04","Publisher":"Microsoft Press","URL":"https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223"}],"Notes":[{"Type":"Relationship","Note":"While there is some overlap with allowlist/denylist problems, this entry is intended to deal with incorrectly written regular expressions, regardless of their intended use. Not every regular expression is intended for use as an allowlist or denylist. In addition, allowlists and denylists can be implemented using other mechanisms besides regular expressions."},{"Type":"Research Gap","Note":"Regexp errors are likely a primary factor in many MFVs, especially those that require multiple manipulations to exploit. However, they are rarely diagnosed at this level of detail."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"PLOVER","SubmissionDate":"2006-07-19"},{"Type":"Modification","ModificationName":"Eric Dalci","ModificationOrganization":"Cigital","ModificationDate":"2008-07-01","ModificationComment":"updated Time_of_Introduction"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2008-09-08","ModificationComment":"updated Description, Name, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2009-12-28","ModificationComment":"updated Common_Consequences, Other_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-02-16","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2010-04-05","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-03-29","ModificationComment":"updated Observed_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2011-06-01","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-05-11","ModificationComment":"updated Demonstrative_Examples, Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2012-10-30","ModificationComment":"updated Potential_Mitigations"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-06-23","ModificationComment":"updated Applicable_Platforms, Common_Consequences, Other_Notes, Relationship_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2014-07-30","ModificationComment":"updated Demonstrative_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2015-12-07","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2017-11-08","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2018-03-27","ModificationComment":"updated References"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2019-06-20","ModificationComment":"updated Related_Attack_Patterns, Relationships, Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-02-24","ModificationComment":"updated Relationships, Type"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-06-25","ModificationComment":"updated Relationship_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Demonstrative_Examples, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Detection_Factors, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Rename","PreviousEntryName":"Regular Expression Error","Date":"2008-09-09"}]}