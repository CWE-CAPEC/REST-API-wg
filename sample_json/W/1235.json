{"ID":"1235","Name":"Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.","ExtendedDescription":"\n\nLanguages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner.\n\n\nHowever, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support \"impedance mismatch\" between reference types and primitives.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"400","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Name":"Java","Prevalence":"Undetermined"},{"Type":"Language","Name":"C#","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"Not Technology-Specific","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Implementation","Note":"The programmer may use boxed primitives when not strictly necessary."}],"CommonConsequences":[{"Scope":["Availability"],"Impact":["DoS: Resource Consumption (CPU)","DoS: Resource Consumption (Memory)","DoS: Resource Consumption (Other)","Reduce Performance"],"Likelihood":["Low"],"Note":"Incorrect autoboxing/unboxing would result in reduced performance, which sometimes can lead to resource consumption issues."}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters. Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"Java has a boxed primitive for each primitive type. A long can be represented with the boxed primitive Long. Issues arise where boxed primitives are used when not strictly necessary."},{"Nature":"Bad","Language":"Java","ExampleCode":"```\n\tLong count = 0L; \n\t for (long i = 0; i \u003c Integer.MAX_VALUE; i++) { \n\t\t count += i; \n\t } \n```"},{"BodyText":"In the above loop, we see that the count variable is declared as a boxed primitive. This causes autoboxing on the line that increments. This causes execution to be magnitudes less performant (time and possibly space) than if the \"long\" primitive was used to declare the count variable, which can impact availability of a resource."}]},{"Entries":[{"IntroText":"This code uses primitive long which fixes the issue."},{"Nature":"Good","Language":"Java","ExampleCode":"```\n\tlong count = 0L; \n\t for (long i = 0; i \u003c Integer.MAX_VALUE; i++) { \n\t\t count += i; \n\t } \n```"}]}],"TaxonomyMappings":[{"TaxonomyName":"SEI CERT Oracle Coding Standard for Java","EntryID":"EXP04-J","EntryName":"Do not pass arguments to certain Java Collections Framework methods that are a different type than the collection parameter type"},{"TaxonomyName":"ISA/IEC 62443","EntryID":"Part 4-1","EntryName":"Req SI-2"}],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"References":[{"ExternalReferenceID":"REF-1051","Title":"Oracle Java Documentation","URL":" https://docs.oracle.com/javase/1.5.0/docs/guide/language/autoboxing.html"},{"ExternalReferenceID":"REF-1052","Authors":["The Software Engineering Institute"],"Title":"SEI CERT Oracle Coding Standard for Java : Rule 02. Expressions (EXP)","URL":"https://wiki.sei.cmu.edu/confluence/display/java/EXP04-J.+Do+not+pass+arguments+to+certain+Java+Collections+Framework+methods+that+are+a+different+type+than+the+collection+parameter+type"}],"ContentHistory":[{"Type":"Submission","SubmissionName":"Joe Harvey","SubmissionDate":"2019-10-14"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships, Taxonomy_Mappings"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Contribution","ContributionName":"\"Mapping CWE to 62443\" Sub-Working Group","ContributionOrganization":"CWE-CAPEC ICS/OT SIG","ContributionDate":"2023-04-25","ContributionComment":"Suggested mappings to ISA/IEC 62443.","ContributionType":"Content"}]}