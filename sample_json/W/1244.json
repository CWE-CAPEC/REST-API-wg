{"ID":"1244","Name":"Internal Asset Exposed to Unsafe Debug Access Level or State","Abstraction":"Base","Structure":"Simple","Status":"Stable","Description":"The product uses physical debug or test\n        interfaces with support for multiple access levels, but it\n        assigns the wrong debug access level to an internal asset,\n        providing unintended access to the asset from untrusted debug\n        agents.","ExtendedDescription":"\n\nDebug authorization can have multiple levels of access, defined such that different system internal assets are accessible based on the current authorized debug level. Other than debugger authentication (e.g., using passwords or challenges), the authorization can also be based on the system state or boot stage. For example, full system debug access might only be allowed early in boot after a system reset to ensure that previous session data is not accessible to the authenticated debugger.\n\n\nIf this protection mechanism does not ensure that internal assets have the correct debug access level during each boot stage or change in system state, an attacker could obtain sensitive information from the internal asset using a debugger.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"863","ViewID":"1000","Ordinal":"Primary"}],"WeaknessOrdinalities":[{"Ordinality":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"System on Chip","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Confidentiality"],"Impact":["Read Memory"]},{"Scope":["Integrity"],"Impact":["Modify Memory"]},{"Scope":["Authorization","Access Control"],"Impact":["Gain Privileges or Assume Identity","Bypass Protection Mechanism"]}],"DetectionMethods":[{"Method":"Manual Analysis","Description":"Check 2 devices for their passcode to authenticate access to JTAG/debugging ports. If the passcodes are missing or the same, update the design to fix and retest. Check communications over JTAG/debugging ports for encryption. If the communications are not encrypted, fix the design and retest.","Effectiveness":"Moderate"}],"PotentialMitigations":[{"Phase":["Architecture and Design","Implementation"],"Description":"\n\nFor security-sensitive assets accessible over debug/test interfaces, only allow trusted agents.\n","Effectiveness":"High"},{"Phase":["Architecture and Design"],"Description":"Apply blinding [REF-1219] or masking techniques in strategic areas.","Effectiveness":"Limited"},{"Phase":["Implementation"],"Description":"Add shielding or tamper-resistant protections to the device, which increases the difficulty and cost for accessing debug/test interfaces.","Effectiveness":"Limited"}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"The JTAG interface is used to perform debugging and provide CPU core access for developers. JTAG-access protection is implemented as part of the JTAG_SHIELD bit in the hw_digctl_ctrl register. This register has no default value at power up and is set only after the system boots from ROM and control is transferred to the user software."},{"Nature":"Bad","Language":"Other","ExampleCode":"|  | \n|\n| 1 bit | 0x0 = JTAG debugger is enabled (default)  |\n| JTAG_SHIELD | 0x1 = JTAG debugger is disabled  |"},{"BodyText":"This means that since the end user has access to JTAG at system reset and during ROM code execution before control is transferred to user software, a JTAG user can modify the boot flow and subsequently disclose all CPU information, including data-encryption keys."},{"Nature":"Informative","ExampleCode":"```\n\tThe default value of this register bit should be set to 1 to prevent the JTAG from being enabled at system reset.\n```"}]}],"ObservedExamples":[{"Reference":"CVE-2019-18827","Description":"After ROM code execution, JTAG access is disabled. But before the ROM code is executed, JTAG access is possible, allowing a user full system access. This allows a user to modify the boot flow and successfully bypass the secure-boot process.","Link":"https://www.cve.org/CVERecord?id=CVE-2019-18827"}],"RelatedAttackPatterns":["114"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"References":[{"ExternalReferenceID":"REF-1056","Authors":["F-Secure Labs"],"Title":"Multiple Vulnerabilities in Barco Clickshare: JTAG access is not permanently disabled","URL":"https://labs.f-secure.com/advisories/multiple-vulnerabilities-in-barco-clickshare/"},{"ExternalReferenceID":"REF-1057","Authors":["Kurt Rosenfeld","Ramesh Karri"],"Title":"Attacks and Defenses for JTAG","URL":"https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\u0026arnumber=5406671"},{"ExternalReferenceID":"REF-1219","Authors":["Monodeep Kar","Arvind Singh","Santosh Ghosh","Sanu Mathew","Anand Rajan","Vivek De","Raheem Beyah","Saibal Mukhopadhyay"],"Title":"Blindsight: Blinding EM Side-Channel Leakage using Built-In Fully Integrated Inductive Voltage Regulator","PublicationYear":"2018","PublicationMonth":"02","URL":"https://arxiv.org/pdf/1802.09096.pdf","URLDate":"2023-04-07"}],"Notes":[{"Type":"Relationship","Note":"CWE-1191 and CWE-1244 both involve physical debug access, but the weaknesses are different. CWE-1191 is effectively about missing authorization for a debug interface, i.e. JTAG. CWE-1244 is about providing internal assets with the wrong debug access level, exposing the asset to untrusted debug agents."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi","SubmissionOrganization":"Intel Corporation","SubmissionDate":"2020-02-12"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Demonstrative_Examples, Name, Observed_Examples, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Maintenance_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Demonstrative_Examples, Description, Detection_Factors, Maintenance_Notes, Name, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships, Weakness_Ordinalities"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated References, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Contribution","ContributionName":"Hareesh Khattri","ContributionOrganization":"Intel Corporation","ContributionDate":"2021-10-22","ContributionComment":"clarified differences between CWE-1191 and CWE-1244, and suggested rephrasing of descriptions and names.","ContributionType":"Content"},{"Type":"Rename","PreviousEntryName":"Improper Authorization on Physical Debug and Test Interfaces","Date":"2020-08-20"},{"Type":"Rename","PreviousEntryName":"Improper Access to Sensitive Information Using Debug and Test Interfaces","Date":"2021-10-28"}]}