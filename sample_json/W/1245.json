{"ID":"1245","Name":"Improper Finite State Machines (FSMs) in Hardware Logic","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.","ExtendedDescription":"\n\nThe functionality and security of the system heavily depend on the implementation of FSMs. FSMs can be used to indicate the current security state of the system. Lots of secure data operations and data transfers rely on the state reported by the FSM. Faulty FSM designs that do not account for all states, either through undefined states (left as don't cares) or through incorrect implementation, might lead an attacker to drive the system into an unstable state from which the system cannot recover without a reset, thus causing a DoS. Depending on what the FSM is used for, an attacker might also gain additional privileges to launch further attacks and compromise the security guarantees.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"684","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"System on Chip","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Availability","Access Control"],"Impact":["Unexpected State","DoS: Crash, Exit, or Restart","DoS: Instability","Gain Privileges or Assume Identity"]}],"PotentialMitigations":[{"Phase":["Architecture and Design","Implementation"],"Description":"Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.","Effectiveness":"High"}],"DemonstrativeExamples":[{"ID":"DX-152","Entries":[{"IntroText":"The Finite State Machine (FSM) shown in the \"bad\" code snippet below assigns the output (\"out\") based on the value of state, which is determined based on the user provided input (\"user_input\")."},{"Nature":"Bad","Language":"Verilog","ExampleCode":"```\n\tmodule fsm_1(out, user_input, clk, rst_n); \n\tinput [2:0] user_input; \n\tinput clk, rst_n; \n\toutput reg [2:0] out; \n\treg [1:0] state; \n\talways @ (posedge clk or negedge rst_n ) \n\t\tbegin \n\t\t\t if (!rst_n)\n\t\t\t\t state = 3'h0; \n\t\t\t else\n\t\t\t case (user_input) \n\t\t\t\t 3'h0:\n\t\t\t\t 3'h1:\n\t\t\t\t 3'h2:\n\t\t\t\t 3'h3: state = 2'h3;\n\t\t\t\t 3'h4: state = 2'h2;\n\t\t\t\t 3'h5: state = 2'h1;\n\t\t\t endcase \n\t\t end\n\t\t out \u003c= {1'h1, state};\n\t endmodule \n```"},{"BodyText":"The case statement does not include a default to handle the scenario when the user provides inputs of 3'h6 and 3'h7. Those inputs push the system to an undefined state and might cause a crash (denial of service) or any other unanticipated outcome.\n\n\nAdding a default statement to handle undefined inputs mitigates this issue. This is shown in the \"Good\" code snippet below. The default statement is in bold."},{"Nature":"Good","Language":"Verilog","ExampleCode":"```\n\tcase (user_input) \n\t\t3'h0: \n\t\t3'h1: \n\t\t3'h2: \n\t\t3'h3: state = 2'h3; \n\t\t3'h4: state = 2'h2; \n\t\t3'h5: state = 2'h1; \n```\ndefault: state = 2'h0;**  endcase"}]}],"RelatedAttackPatterns":["74"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"References":[{"ExternalReferenceID":"REF-1060","Authors":["Farimah Farahmandi","Prabhat Mishra"],"Title":"FSM Anomaly Detection using Formal Analysis","URL":"https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\u0026arnumber=8119228\u0026tag=1"}],"ContentHistory":[{"Type":"Submission","SubmissionName":"Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi","SubmissionOrganization":"The Intel Corporation","SubmissionDate":"2020-02-12"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-10-13","ModificationComment":"updated Demonstrative_Examples"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}