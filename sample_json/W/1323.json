{"ID":"1323","Name":"Improper Management of Sensitive Trace Data","Abstraction":"Base","Structure":"Simple","Status":"Draft","Description":"Trace data collected from several sources on the\n                System-on-Chip (SoC) is stored in unprotected locations or\n                transported to untrusted agents.","ExtendedDescription":"\n\nTo facilitate verification of complex System-on-Chip (SoC) designs, SoC integrators add specific IP blocks that trace the SoC's internal signals in real-time. This infrastructure enables observability of the SoC's internal behavior, validation of its functional design, and detection of hardware and software bugs. Such tracing IP blocks collect traces from several sources on the SoC including the CPU, crypto coprocessors, and on-chip fabrics. Traces collected from these sources are then aggregated inside trace IP block and forwarded to trace sinks, such as debug-trace ports that facilitate debugging by external hardware and software debuggers.\n\n\nSince these traces are collected from several security-sensitive sources, they must be protected against untrusted debuggers. If they are stored in unprotected memory, an untrusted software debugger can access these traces and extract secret information. Additionally, if security-sensitive traces are not tagged as secure, an untrusted hardware debugger might access them to extract confidential information.\n","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"284","ViewID":"1000","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"System on Chip","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Confidentiality"],"Impact":["Read Memory"],"Note":"An adversary can read secret values if they are captured in debug traces and stored unsafely."}],"PotentialMitigations":[{"Phase":["Implementation"],"Description":"Tag traces to indicate owner and debugging privilege level (designer, OEM, or end user) needed to access that trace."}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"In a SoC, traces generated from sources include security-sensitive IP blocks such as CPU (with tracing information such as instructions executed and memory operands), on-chip fabric (e.g., memory-transfer signals, transaction type and destination, and on-chip-firewall-error signals), power-management IP blocks (e.g., clock- and power-gating signals), and cryptographic coprocessors (e.g., cryptographic keys and intermediate values of crypto operations), among other non-security-sensitive IP blocks including timers and other functional blocks. The collected traces are then forwarded to the debug and trace interface used by the external hardware debugger."},{"Nature":"Bad","Language":"Other","ExampleCode":"The traces do not have any privilege level attached to them. All collected traces can be viewed by any debugger (i.e., SoC designer, OEM debugger, or end user)."},{"Nature":"Good","Language":"Other","ExampleCode":"Some of the traces are SoC-design-house secrets, while some are OEM secrets. Few are end-user secrets and the rest are not security-sensitive. Tag all traces with the appropriate, privilege level at the source. The bits indicating the privilege level must be immutable in their transit from trace source to the final, trace sink. Debugger privilege level must be checked before providing access to traces."}]}],"RelatedAttackPatterns":["150","167","545"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"References":[{"ExternalReferenceID":"REF-1150","Authors":["Jerry Backer","David Hely","Ramesh Karri"],"Title":"Secure design-for-debug for Systems-on-Chip","PublicationYear":"2015","PublicationMonth":"10","PublicationDay":"06","URL":"https://ieeexplore.ieee.org/document/7342418"},{"ExternalReferenceID":"REF-1151","Authors":["Jerry Backer","David Hely","Ramesh Karri"],"Title":"Secure and Flexible Trace-Based Debugging of Systems-on-Chip","PublicationYear":"2016","PublicationMonth":"12","URL":"https://dl.acm.org/doi/pdf/10.1145/2994601","URLDate":"2023-04-07"}],"ContentHistory":[{"Type":"Submission","SubmissionName":"Hareesh Khattri, Parbati K. Manna, and Arun Kanuparthi","SubmissionOrganization":"The Intel Corporation","SubmissionDate":"2020-07-20"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Common_Consequences"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"}]}