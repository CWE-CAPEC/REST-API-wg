{"ID":"1259","Name":"Improper Restriction of Security Token Assignment","Abstraction":"Base","Structure":"Simple","Status":"Incomplete","Description":"The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.","ExtendedDescription":"Systems-On-A-Chip (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify which actions originated from which agent. These actions may be one of the directives: 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security Tokens are assigned to every agent in the System that is capable of generating an action or receiving an action from another agent. Multiple Security Tokens may be assigned to an agent and may be unique based on the agent's trust level or allowed privileges. Since the Security Tokens are integral for the maintenance of security in an SoC, they need to be protected properly. A common weakness afflicting Security Tokens is improperly restricting the assignment to trusted components. Consequently, an improperly protected Security Token may be able to be programmed by a malicious agent (i.e., the Security Token is mutable) to spoof the action as if it originated from a trusted agent.","RelatedWeaknesses":[{"Nature":"ChildOf","CweID":"284","ViewID":"1000","Ordinal":"Primary"},{"Nature":"ChildOf","CweID":"1294","ViewID":"1194","Ordinal":"Primary"}],"ApplicablePlatforms":[{"Type":"Language","Class":"Not Language-Specific","Prevalence":"Undetermined"},{"Type":"Operating_System","Class":"Not OS-Specific","Prevalence":"Undetermined"},{"Type":"Architecture","Class":"Not Architecture-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Name":"Processor Hardware","Class":"Not Technology-Specific","Prevalence":"Undetermined"},{"Type":"Technology","Class":"System on Chip","Prevalence":"Undetermined"}],"ModesOfIntroduction":[{"Phase":"Architecture and Design"},{"Phase":"Implementation"}],"CommonConsequences":[{"Scope":["Confidentiality","Integrity","Availability","Access Control"],"Impact":["Modify Files or Directories","Execute Unauthorized Code or Commands","Bypass Protection Mechanism","Gain Privileges or Assume Identity","Modify Memory","Modify Memory","DoS: Crash, Exit, or Restart"],"Likelihood":["High"]}],"PotentialMitigations":[{"Phase":["Architecture and Design","Implementation"],"Description":"\n\n  - Security Token assignment review checks for design inconsistency and common weaknesses.\n\n  - Security-Token definition and programming flow is tested in both pre-silicon and post-silicon testing.\n\n"}],"DemonstrativeExamples":[{"Entries":[{"IntroText":"For example, consider a system with a register for storing an AES key for encryption and decryption. The key is of 128 bits implemented as a set of four 32-bit registers. The key register assets have an associated control register, AES_KEY_ACCESS_POLICY, which provides the necessary access controls. This access-policy register defines which agents may engage in a transaction, and the type of transaction, with the AES-key registers. Each bit in this 32-bit register defines a security Token. There could be a maximum of 32 security Tokens that are allowed access to the AES-key registers. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit and, if \"0\" (i.e., Clear), disallows the respective action to that corresponding agent."},{"BodyText":"Let's assume the system has two agents: a Main-controller and an Aux-controller. The respective Security Tokens are \"1\" and \"2\". \n| Register | Description | Default | \n| --- | --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_3 | AES key [96:127] for encryption or decryption | 0x00000000  |\n| AES_KEY_ACCESS_POLICY | AES key access register [31:0] | 0x00000002  |"},{"BodyText":"An agent with Security Token \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers. As per the above access policy, the AES-Key-access policy allows access to the AES-key registers if the security Token is \"1\"."},{"Nature":"Bad","Language":"Other","ExampleCode":"The Aux-controller could program its Security Token to \"1\" from \"2\"."},{"BodyText":"The SoC does not properly protect the Security Token of the agents, and, hence, the Aux-controller in the above example can spoof the transaction (i.e., send the transaction as if it is coming from the Main-controller to access the AES-Key registers)"},{"Nature":"Good","Language":"Other","ExampleCode":"The SoC needs to protect the Security Tokens. None of the agents in the SoC should have the ability to change the Security Token."}]}],"RelatedAttackPatterns":["121","681"],"MappingNotes":{"Usage":"Allowed","Rationale":"This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.","Comments":"Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.","Reasons":["Acceptable-Use"]},"Notes":[{"Type":"Maintenance","Note":"This entry is still under development and will continue to see updates and content improvements. Currently it is expressed as a general absence of a protection mechanism as opposed to a specific mistake, and the entry's name and description could be interpreted as applying to software."}],"ContentHistory":[{"Type":"Submission","SubmissionName":"Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi","SubmissionOrganization":"Intel Corporation","SubmissionDate":"2020-03-06"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2020-08-20","ModificationComment":"updated Demonstrative_Examples, Description, Modes_of_Introduction, Name, Potential_Mitigations, Related_Attack_Patterns, Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-03-15","ModificationComment":"updated Maintenance_Notes"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2021-10-28","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-04-28","ModificationComment":"updated Applicable_Platforms, Related_Attack_Patterns"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2022-06-28","ModificationComment":"updated Applicable_Platforms"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-01-31","ModificationComment":"updated Description"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-04-27","ModificationComment":"updated Relationships"},{"Type":"Modification","ModificationName":"CWE Content Team","ModificationOrganization":"MITRE","ModificationDate":"2023-06-29","ModificationComment":"updated Mapping_Notes"},{"Type":"Contribution","ContributionName":"MaineK00n","ContributionDate":"2022-10-31","ContributionComment":"corrected a typo in extended description","ContributionType":"Feedback"},{"Type":"Rename","PreviousEntryName":"Improper Protection of Security Identifiers","Date":"2020-08-20"}]}